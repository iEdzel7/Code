Code,Category
"public class Absolute {
	/*@    requires 0 <= num && num <= Short.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires  Short.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ short Absolute(short num) {
		if (0 > num)//if (0 <= num)
			return num;
		else
			return (short)-num;	
	}

	/*@    requires 0 <= num && num <= Integer.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires Integer.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ int Absolute(int num) {
		if (0 <= num)
			return num;
		else
			return -num;
	}

	/*@    requires 0 <= num && num <= Long.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires  Long.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ long Absolute(long num) {
		if (0 <= num)
			return num;
		else
			return -num;	
	}
}",Buggy
"public class AbsoluteDriver {
	/*@ spec_public*/ int i;
	/*@ spec_public*/ short sh;
	/*@ spec_public*/ long l;

	//@ requires Short.MIN_VALUE < sh && sh <= Short.MAX_VALUE;
	//@ requires Integer.MIN_VALUE < i && i <= Integer.MAX_VALUE;
	//@ requires Long.MIN_VALUE < l && l <= Long.MAX_VALUE;
	//@ ensures  this.sh == sh && this.i == i && this.l == l;
	public /*@ pure @*/ AbsoluteDriver(short sh, int i, long l) {
		this.sh = sh;
		this.i = i;
		this.l = l;
	}
	
	//@ requires Short.MIN_VALUE < sh && sh <= Short.MAX_VALUE;
	//@ requires Integer.MIN_VALUE < i && i <= Integer.MAX_VALUE;
	//@ requires Long.MIN_VALUE < l && l <= Long.MAX_VALUE;
	//@ assignable this.i, this.sh, this.l;
	//@ ensures 0 <= sh ==> this.sh == sh;
	//@ ensures sh < 0 ==> this.sh == -sh;
	//@ ensures 0 <= i ==> this.i == i;
	//@ ensures i < 0 ==> this.i == -i;
 	//@ ensures 0 <= l ==> this.l == l;
	//@ ensures l < 0 ==> this.l == -l;
	public void driver() {
		Absolute p = new Absolute();
		this.sh = p.Absolute(sh);
		this.i = p.Absolute(i);
		this.l = p.Absolute(l);
	}
}",Buggy
"public class Absolute {
	/*@    requires 0 <= num && num <= Short.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires  Short.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ short Absolute(short num) {
		if (0 <= num)
			return num;
		else
			return (short)-num;	
	}

	/*@    requires 0 <= num && num <= Integer.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires Integer.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ int Absolute(int num) {
		if (0 <= num)
			return num;
		else
			return (-num== 0 ? 1 : 0);//-num;
	}

	/*@    requires 0 <= num && num <= Long.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires  Long.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ long Absolute(long num) {
		if (0 <= num)
			return num;
		else
			return -num;	
	}
}",Buggy
"public class AbsoluteDriver {
	/*@ spec_public*/ int i;
	/*@ spec_public*/ short sh;
	/*@ spec_public*/ long l;

	//@ requires Short.MIN_VALUE < sh && sh <= Short.MAX_VALUE;
	//@ requires Integer.MIN_VALUE < i && i <= Integer.MAX_VALUE;
	//@ requires Long.MIN_VALUE < l && l <= Long.MAX_VALUE;
	//@ ensures  this.sh == sh && this.i == i && this.l == l;
	public /*@ pure @*/ AbsoluteDriver(short sh, int i, long l) {
		this.sh = sh;
		this.i = i;
		this.l = l;
	}
	
	//@ requires Short.MIN_VALUE < sh && sh <= Short.MAX_VALUE;
	//@ requires Integer.MIN_VALUE < i && i <= Integer.MAX_VALUE;
	//@ requires Long.MIN_VALUE < l && l <= Long.MAX_VALUE;
	//@ assignable this.i, this.sh, this.l;
	//@ ensures 0 <= sh ==> this.sh == sh;
	//@ ensures sh < 0 ==> this.sh == -sh;
	//@ ensures 0 <= i ==> this.i == i;
	//@ ensures i < 0 ==> this.i == -i;
 	//@ ensures 0 <= l ==> this.l == l;
	//@ ensures l < 0 ==> this.l == -l;
	public void driver() {
		Absolute p = new Absolute();
		this.sh = p.Absolute(sh);
		this.i = p.Absolute(i);
		this.l = p.Absolute(l);
	}
}",Buggy
"public class Absolute{
	/*@    requires 0 <= num && num <= Short.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires  Short.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ short Absolute(short num) {
		if (0 <= num)
			return num;
		else
			return (short)-num;	
	}

	/*@    requires 0 <= num && num <= Integer.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires Integer.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ int Absolute(int num) {
		if (0 <= num)
			return num;
		else
			return -num;
	}

	/*@    requires 0 <= num && num <= Long.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires  Long.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ long Absolute(long num) {
		if (0 <= num)
			return num + 1;//num;
		else
			return -num;	
	}
}",Buggy
"public class AbsoluteDriver {
	/*@ spec_public*/ int i;
	/*@ spec_public*/ short sh;
	/*@ spec_public*/ long l;

	//@ requires Short.MIN_VALUE < sh && sh <= Short.MAX_VALUE;
	//@ requires Integer.MIN_VALUE < i && i <= Integer.MAX_VALUE;
	//@ requires Long.MIN_VALUE < l && l <= Long.MAX_VALUE;
	//@ ensures  this.sh == sh && this.i == i && this.l == l;
	public /*@ pure @*/ AbsoluteDriver(short sh, int i, long l) {
		this.sh = sh;
		this.i = i;
		this.l = l;
	}
	
	//@ requires Short.MIN_VALUE < sh && sh <= Short.MAX_VALUE;
	//@ requires Integer.MIN_VALUE < i && i <= Integer.MAX_VALUE;
	//@ requires Long.MIN_VALUE < l && l <= Long.MAX_VALUE;
	//@ assignable this.i, this.sh, this.l;
	//@ ensures 0 <= sh ==> this.sh == sh;
	//@ ensures sh < 0 ==> this.sh == -sh;
	//@ ensures 0 <= i ==> this.i == i;
	//@ ensures i < 0 ==> this.i == -i;
 	//@ ensures 0 <= l ==> this.l == l;
	//@ ensures l < 0 ==> this.l == -l;
	public void driver() {
		Absolute p = new Absolute();
		this.sh = p.Absolute(sh);
		this.i = p.Absolute(i);
		this.l = p.Absolute(l);
	}
}",Buggy
"public class Absolute {
	/*@    requires 0 <= num && num <= Short.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires  Short.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ short Absolute(short num) {
		if (0 <= num)
			return num;
		else
			return (short)-num;	
	}

	/*@    requires 0 <= num && num <= Integer.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires Integer.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ int Absolute(int num) {
		if (0 <= num)
			return num;
		else
			return -num;
	}

	/*@    requires 0 <= num && num <= Long.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires  Long.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ long Absolute(long num) {
		if (0 <= num)
			return num;
		else
			return -num + 1;//-num;	
	}
}",Buggy
"public class AbsoluteDriver {
	/*@ spec_public*/ int i;
	/*@ spec_public*/ short sh;
	/*@ spec_public*/ long l;

	//@ requires Short.MIN_VALUE < sh && sh <= Short.MAX_VALUE;
	//@ requires Integer.MIN_VALUE < i && i <= Integer.MAX_VALUE;
	//@ requires Long.MIN_VALUE < l && l <= Long.MAX_VALUE;
	//@ ensures  this.sh == sh && this.i == i && this.l == l;
	public /*@ pure @*/ AbsoluteDriver(short sh, int i, long l) {
		this.sh = sh;
		this.i = i;
		this.l = l;
	}
	
	//@ requires Short.MIN_VALUE < sh && sh <= Short.MAX_VALUE;
	//@ requires Integer.MIN_VALUE < i && i <= Integer.MAX_VALUE;
	//@ requires Long.MIN_VALUE < l && l <= Long.MAX_VALUE;
	//@ assignable this.i, this.sh, this.l;
	//@ ensures 0 <= sh ==> this.sh == sh;
	//@ ensures sh < 0 ==> this.sh == -sh;
	//@ ensures 0 <= i ==> this.i == i;
	//@ ensures i < 0 ==> this.i == -i;
 	//@ ensures 0 <= l ==> this.l == l;
	//@ ensures l < 0 ==> this.l == -l;
	public void driver() {
		Absolute p = new Absolute();
		this.sh = p.Absolute(sh);
		this.i = p.Absolute(i);
		this.l = p.Absolute(l);
	}
}",Buggy
"public class Absolute {
	/*@    requires 0 <= num && num <= Short.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires  Short.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ short Absolute(short num) {
		if (0 <= num)
			return num;
		else
			return (short)num;//return (short)-num;	
	}

	/*@    requires 0 <= num && num <= Integer.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires Integer.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ int Absolute(int num) {
		if (0 <= num)
			return num;
		else
			return -num;
	}

	/*@    requires 0 <= num && num <= Long.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires  Long.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ long Absolute(long num) {
		if (0 <= num)
			return num;
		else
			return -num;	
	}
}",Buggy
"public class AbsoluteDriver {
	/*@ spec_public*/ int i;
	/*@ spec_public*/ short sh;
	/*@ spec_public*/ long l;

	//@ requires Short.MIN_VALUE < sh && sh <= Short.MAX_VALUE;
	//@ requires Integer.MIN_VALUE < i && i <= Integer.MAX_VALUE;
	//@ requires Long.MIN_VALUE < l && l <= Long.MAX_VALUE;
	//@ ensures  this.sh == sh && this.i == i && this.l == l;
	public /*@ pure @*/ AbsoluteDriver(short sh, int i, long l) {
		this.sh = sh;
		this.i = i;
		this.l = l;
	}
	
	//@ requires Short.MIN_VALUE < sh && sh <= Short.MAX_VALUE;
	//@ requires Integer.MIN_VALUE < i && i <= Integer.MAX_VALUE;
	//@ requires Long.MIN_VALUE < l && l <= Long.MAX_VALUE;
	//@ assignable this.i, this.sh, this.l;
	//@ ensures 0 <= sh ==> this.sh == sh;
	//@ ensures sh < 0 ==> this.sh == -sh;
	//@ ensures 0 <= i ==> this.i == i;
	//@ ensures i < 0 ==> this.i == -i;
 	//@ ensures 0 <= l ==> this.l == l;
	//@ ensures l < 0 ==> this.l == -l;
	public void driver() {
		Absolute p = new Absolute();
		this.sh = p.Absolute(sh);
		this.i = p.Absolute(i);
		this.l = p.Absolute(l);
	}
}",Buggy
"public class Absolute {
	/*@    requires 0 <= num && num <= Short.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires  Short.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ short Absolute(short num) {
		if (0 <= num)
			return num;
		else
			return (short)-num;	
	}

	/*@    requires 0 <= num && num <= Integer.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires Integer.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ int Absolute(int num) {
		if (0 > num)//if (0 <= num)
			return num;
		else
			return -num;
	}

	/*@    requires 0 <= num && num <= Long.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires  Long.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ long Absolute(long num) {
		if (0 <= num)
			return num;
		else
			return -num;	
	}
}",Buggy
"public class AbsoluteDriver {
	/*@ spec_public*/ int i;
	/*@ spec_public*/ short sh;
	/*@ spec_public*/ long l;

	//@ requires Short.MIN_VALUE < sh && sh <= Short.MAX_VALUE;
	//@ requires Integer.MIN_VALUE < i && i <= Integer.MAX_VALUE;
	//@ requires Long.MIN_VALUE < l && l <= Long.MAX_VALUE;
	//@ ensures  this.sh == sh && this.i == i && this.l == l;
	public /*@ pure @*/ AbsoluteDriver(short sh, int i, long l) {
		this.sh = sh;
		this.i = i;
		this.l = l;
	}
	
	//@ requires Short.MIN_VALUE < sh && sh <= Short.MAX_VALUE;
	//@ requires Integer.MIN_VALUE < i && i <= Integer.MAX_VALUE;
	//@ requires Long.MIN_VALUE < l && l <= Long.MAX_VALUE;
	//@ assignable this.i, this.sh, this.l;
	//@ ensures 0 <= sh ==> this.sh == sh;
	//@ ensures sh < 0 ==> this.sh == -sh;
	//@ ensures 0 <= i ==> this.i == i;
	//@ ensures i < 0 ==> this.i == -i;
 	//@ ensures 0 <= l ==> this.l == l;
	//@ ensures l < 0 ==> this.l == -l;
	public void driver() {
		Absolute p = new Absolute();
		this.sh = p.Absolute(sh);
		this.i = p.Absolute(i);
		this.l = p.Absolute(l);
	}
}",Buggy
"public class Absolute {
	/*@    requires 0 <= num && num <= Short.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires  Short.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/	
	public /*@ pure @*/ short Absolute(short num) {
		if (0 <= num)
			return num;
		else
			return (short)-num;	
	}

	/*@    requires 0 <= num && num <= Integer.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires Integer.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ int Absolute(int num) {
		if (0 <= num)
			return num;
		else
			return num;//return -num;
	}

	/*@    requires 0 <= num && num <= Long.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires  Long.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ long Absolute(long num) {
		if (0 <= num)
			return num;
		else
			return -num;	
	}
}",Buggy
"public class AbsoluteDriver {
	/*@ spec_public*/ int i;
	/*@ spec_public*/ short sh;
	/*@ spec_public*/ long l;

	//@ requires Short.MIN_VALUE < sh && sh <= Short.MAX_VALUE;
	//@ requires Integer.MIN_VALUE < i && i <= Integer.MAX_VALUE;
	//@ requires Long.MIN_VALUE < l && l <= Long.MAX_VALUE;
	//@ ensures  this.sh == sh && this.i == i && this.l == l;
	public /*@ pure @*/ AbsoluteDriver(short sh, int i, long l) {
		this.sh = sh;
		this.i = i;
		this.l = l;
	}
	
	//@ requires Short.MIN_VALUE < sh && sh <= Short.MAX_VALUE;
	//@ requires Integer.MIN_VALUE < i && i <= Integer.MAX_VALUE;
	//@ requires Long.MIN_VALUE < l && l <= Long.MAX_VALUE;
	//@ assignable this.i, this.sh, this.l;
	//@ ensures 0 <= sh ==> this.sh == sh;
	//@ ensures sh < 0 ==> this.sh == -sh;
	//@ ensures 0 <= i ==> this.i == i;
	//@ ensures i < 0 ==> this.i == -i;
 	//@ ensures 0 <= l ==> this.l == l;
	//@ ensures l < 0 ==> this.l == -l;
	public void driver() {
		Absolute p = new Absolute();
		this.sh = p.Absolute(sh);
		this.i = p.Absolute(i);
		this.l = p.Absolute(l);
	}
}",Buggy
"public class Absolute {
	/*@    requires 0 <= num && num <= Short.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires  Short.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ short Absolute(short num) {
		if (0 <= num)
			return num;
		else
			return (short)-num;	
	}

	/*@    requires 0 <= num && num <= Integer.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires Integer.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ int Absolute(int num) {
		if (0 <= num)
			return num;
		else
			return -num;
	}

	/*@    requires 0 <= num && num <= Long.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires  Long.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ long Absolute(long num) {
		if (0 > num)//if (0 <= num)
			return num;
		else
			return -num;	
	}
}",Buggy
"public class AbsoluteDriver {
	/*@ spec_public*/ int i;
	/*@ spec_public*/ short sh;
	/*@ spec_public*/ long l;

	//@ requires Short.MIN_VALUE < sh && sh <= Short.MAX_VALUE;
	//@ requires Integer.MIN_VALUE < i && i <= Integer.MAX_VALUE;
	//@ requires Long.MIN_VALUE < l && l <= Long.MAX_VALUE;
	//@ ensures  this.sh == sh && this.i == i && this.l == l;
	public /*@ pure @*/ AbsoluteDriver(short sh, int i, long l) {
		this.sh = sh;
		this.i = i;
		this.l = l;
	}
	
	//@ requires Short.MIN_VALUE < sh && sh <= Short.MAX_VALUE;
	//@ requires Integer.MIN_VALUE < i && i <= Integer.MAX_VALUE;
	//@ requires Long.MIN_VALUE < l && l <= Long.MAX_VALUE;
	//@ assignable this.i, this.sh, this.l;
	//@ ensures 0 <= sh ==> this.sh == sh;
	//@ ensures sh < 0 ==> this.sh == -sh;
	//@ ensures 0 <= i ==> this.i == i;
	//@ ensures i < 0 ==> this.i == -i;
 	//@ ensures 0 <= l ==> this.l == l;
	//@ ensures l < 0 ==> this.l == -l;
	public void driver() {
		Absolute p = new Absolute();
		this.sh = p.Absolute(sh);
		this.i = p.Absolute(i);
		this.l = p.Absolute(l);
	}
}",Buggy
"public class Absolute {
	/*@    requires 0 <= num && num <= Short.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires  Short.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ short Absolute(short num) {
		if (0 <= num)
			return num;
		else
			return (short)-num;	
	}

	/*@    requires 0 <= num && num <= Integer.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires Integer.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ int Absolute(int num) {
		if (0 <= num)
			return num;
		else
			return -num;
	}

	/*@    requires 0 <= num && num <= Long.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires  Long.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ long Absolute(long num) {
		if (0 <= num)
			return num;
		else
			return num;//return -num;	
	}
}",Buggy
"public class AbsoluteDriver {
	/*@ spec_public*/ int i;
	/*@ spec_public*/ short sh;
	/*@ spec_public*/ long l;

	//@ requires Short.MIN_VALUE < sh && sh <= Short.MAX_VALUE;
	//@ requires Integer.MIN_VALUE < i && i <= Integer.MAX_VALUE;
	//@ requires Long.MIN_VALUE < l && l <= Long.MAX_VALUE;
	//@ ensures  this.sh == sh && this.i == i && this.l == l;
	public /*@ pure @*/ AbsoluteDriver(short sh, int i, long l) {
		this.sh = sh;
		this.i = i;
		this.l = l;
	}
	
	//@ requires Short.MIN_VALUE < sh && sh <= Short.MAX_VALUE;
	//@ requires Integer.MIN_VALUE < i && i <= Integer.MAX_VALUE;
	//@ requires Long.MIN_VALUE < l && l <= Long.MAX_VALUE;
	//@ assignable this.i, this.sh, this.l;
	//@ ensures 0 <= sh ==> this.sh == sh;
	//@ ensures sh < 0 ==> this.sh == -sh;
	//@ ensures 0 <= i ==> this.i == i;
	//@ ensures i < 0 ==> this.i == -i;
 	//@ ensures 0 <= l ==> this.l == l;
	//@ ensures l < 0 ==> this.l == -l;
	public void driver() {
		Absolute p = new Absolute();
		this.sh = p.Absolute(sh);
		this.i = p.Absolute(i);
		this.l = p.Absolute(l);
	}
}",Buggy
"public class Absolute {
	/*@    requires 0 <= num && num <= Short.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires  Short.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/	
	public /*@ pure @*/ short Absolute(short num) {
		if (0 <= num)
			return (num == 0 ? (short)1 : (short)0);//num;
		else
			return (short)-num;	
	}

	/*@    requires 0 <= num && num <= Integer.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires Integer.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ int Absolute(int num) {
		if (0 <= num)
			return num;
		else
			return -num;
	}

	/*@    requires 0 <= num && num <= Long.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires  Long.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ long Absolute(long num) {
		if (0 <= num)
			return num;
		else
			return -num;	
	}
}",Buggy
"public class AbsoluteDriver {
	/*@ spec_public*/ int i;
	/*@ spec_public*/ short sh;
	/*@ spec_public*/ long l;

	//@ requires Short.MIN_VALUE < sh && sh <= Short.MAX_VALUE;
	//@ requires Integer.MIN_VALUE < i && i <= Integer.MAX_VALUE;
	//@ requires Long.MIN_VALUE < l && l <= Long.MAX_VALUE;
	//@ ensures  this.sh == sh && this.i == i && this.l == l;
	public /*@ pure @*/ AbsoluteDriver(short sh, int i, long l) {
		this.sh = sh;
		this.i = i;
		this.l = l;
	}
	
	//@ requires Short.MIN_VALUE < sh && sh <= Short.MAX_VALUE;
	//@ requires Integer.MIN_VALUE < i && i <= Integer.MAX_VALUE;
	//@ requires Long.MIN_VALUE < l && l <= Long.MAX_VALUE;
	//@ assignable this.i, this.sh, this.l;
	//@ ensures 0 <= sh ==> this.sh == sh;
	//@ ensures sh < 0 ==> this.sh == -sh;
	//@ ensures 0 <= i ==> this.i == i;
	//@ ensures i < 0 ==> this.i == -i;
 	//@ ensures 0 <= l ==> this.l == l;
	//@ ensures l < 0 ==> this.l == -l;
	public void driver() {
		Absolute p = new Absolute();
		this.sh = p.Absolute(sh);
		this.i = p.Absolute(i);
		this.l = p.Absolute(l);
	}
}",Buggy
"public class Absolute {
	/*@    requires 0 <= num && num <= Short.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires  Short.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ short Absolute(short num) {
		if (0 <= num)
			return num;
		else
			return ((short)-num== 0 ? (short)1 : (short)0);//(short)-num;	
	}

	/*@    requires 0 <= num && num <= Integer.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires Integer.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ int Absolute(int num) {
		if (0 <= num)
			return num;
		else
			return -num;
	}

	/*@    requires 0 <= num && num <= Long.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires  Long.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ long Absolute(long num) {
		if (0 <= num)
			return num;
		else
			return -num;	
	}
}",Buggy
"public class AbsoluteDriver {
	/*@ spec_public*/ int i;
	/*@ spec_public*/ short sh;
	/*@ spec_public*/ long l;

	//@ requires Short.MIN_VALUE < sh && sh <= Short.MAX_VALUE;
	//@ requires Integer.MIN_VALUE < i && i <= Integer.MAX_VALUE;
	//@ requires Long.MIN_VALUE < l && l <= Long.MAX_VALUE;
	//@ ensures  this.sh == sh && this.i == i && this.l == l;
	public /*@ pure @*/ AbsoluteDriver(short sh, int i, long l) {
		this.sh = sh;
		this.i = i;
		this.l = l;
	}
	
	//@ requires Short.MIN_VALUE < sh && sh <= Short.MAX_VALUE;
	//@ requires Integer.MIN_VALUE < i && i <= Integer.MAX_VALUE;
	//@ requires Long.MIN_VALUE < l && l <= Long.MAX_VALUE;
	//@ assignable this.i, this.sh, this.l;
	//@ ensures 0 <= sh ==> this.sh == sh;
	//@ ensures sh < 0 ==> this.sh == -sh;
	//@ ensures 0 <= i ==> this.i == i;
	//@ ensures i < 0 ==> this.i == -i;
 	//@ ensures 0 <= l ==> this.l == l;
	//@ ensures l < 0 ==> this.l == -l;
	public void driver() {
		Absolute p = new Absolute();
		this.sh = p.Absolute(sh);
		this.i = p.Absolute(i);
		this.l = p.Absolute(l);
	}
}",Buggy
"public class Absolute {
	/*@    requires 0 <= num && num <= Short.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires  Short.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ short Absolute(short num) {
		if (0 <= num)
			return num;
		else
			return (short)-num;	
	}

	/*@    requires 0 <= num && num <= Integer.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires Integer.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ int Absolute(int num) {
		if (0 <= num)
			return (num== 0 ? 1 : 0);//num;
		else
			return -num;
	}

	/*@    requires 0 <= num && num <= Long.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires  Long.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ long Absolute(long num) {
		if (0 <= num)
			return num;
		else
			return -num;	
	}
}",Buggy
"public class AbsoluteDriver {
	/*@ spec_public*/ int i;
	/*@ spec_public*/ short sh;
	/*@ spec_public*/ long l;

	//@ requires Short.MIN_VALUE < sh && sh <= Short.MAX_VALUE;
	//@ requires Integer.MIN_VALUE < i && i <= Integer.MAX_VALUE;
	//@ requires Long.MIN_VALUE < l && l <= Long.MAX_VALUE;
	//@ ensures  this.sh == sh && this.i == i && this.l == l;
	public /*@ pure @*/ AbsoluteDriver(short sh, int i, long l) {
		this.sh = sh;
		this.i = i;
		this.l = l;
	}
	
	//@ requires Short.MIN_VALUE < sh && sh <= Short.MAX_VALUE;
	//@ requires Integer.MIN_VALUE < i && i <= Integer.MAX_VALUE;
	//@ requires Long.MIN_VALUE < l && l <= Long.MAX_VALUE;
	//@ assignable this.i, this.sh, this.l;
	//@ ensures 0 <= sh ==> this.sh == sh;
	//@ ensures sh < 0 ==> this.sh == -sh;
	//@ ensures 0 <= i ==> this.i == i;
	//@ ensures i < 0 ==> this.i == -i;
 	//@ ensures 0 <= l ==> this.l == l;
	//@ ensures l < 0 ==> this.l == -l;
	public void driver() {
		Absolute p = new Absolute();
		this.sh = p.Absolute(sh);
		this.i = p.Absolute(i);
		this.l = p.Absolute(l);
	}
}",Buggy
"public class AddLoop {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE && y != Integer.MIN_VALUE;
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y <= 0) {//if (y > 0) {
            int n = y;
            //@ decreases n;
            //@ maintaining sum == x + y - n && 0 <= n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ maintaining sum == x + y + n && 0 <= n;
            //@ decreases n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}",Buggy
"public class AddLoop {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE && y != Integer.MIN_VALUE;
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ decreases n;
            //@ maintaining sum == x + y - n && 0 <= n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ maintaining sum == x + y + n && 0 <= n;
            //@ decreases n;
            while (n > 0) {
                sum = sum - 1;
                n = n + 1;//n = n - 1;
            }
        }
        return sum;
    }
}",Buggy
"public class AddLoop {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE && y != Integer.MIN_VALUE;
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ decreases n;
            //@ maintaining sum == x + y - n && 0 <= n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ maintaining sum == x + y + n && 0 <= n;
            //@ decreases n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return (sum == 0 ? 1 : 0);//sum;
    }
}",Buggy
"public class AddLoop {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE && y != Integer.MIN_VALUE;
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ decreases n;
            //@ maintaining sum == x + y - n && 0 <= n;
            while (n >= 0) {//while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ maintaining sum == x + y + n && 0 <= n;
            //@ decreases n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}",Buggy
"public class AddLoop {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE && y != Integer.MIN_VALUE;
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ decreases n;
            //@ maintaining sum == x + y - n && 0 <= n;
            while (n <= 0) {//while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ maintaining sum == x + y + n && 0 <= n;
            //@ decreases n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}",Buggy
"public class AddLoop {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE && y != Integer.MIN_VALUE;
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ decreases n;
            //@ maintaining sum == x + y - n && 0 <= n;
            while (n > 0) {
                sum = sum - 1;//sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ maintaining sum == x + y + n && 0 <= n;
            //@ decreases n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}",Buggy
"public class AddLoop {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE && y != Integer.MIN_VALUE;
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ decreases n;
            //@ maintaining sum == x + y - n && 0 <= n;
            while (n > 0) {
                sum = sum + 1;
                n = n + 1;//n = n - 1;
            }
        } else {
            int n = -y;
            //@ maintaining sum == x + y + n && 0 <= n;
            //@ decreases n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}",Buggy
"public class AddLoop {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE && y != Integer.MIN_VALUE;
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ decreases n;
            //@ maintaining sum == x + y - n && 0 <= n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = y;//int n = -y;
            //@ maintaining sum == x + y + n && 0 <= n;
            //@ decreases n;
            while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}",Buggy
"public class AddLoop {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE && y != Integer.MIN_VALUE;
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ decreases n;
            //@ maintaining sum == x + y - n && 0 <= n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ maintaining sum == x + y + n && 0 <= n;
            //@ decreases n;
            while (n >= 0) {//while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}",Buggy
"public class AddLoop {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE && y != Integer.MIN_VALUE;
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ decreases n;
            //@ maintaining sum == x + y - n && 0 <= n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ maintaining sum == x + y + n && 0 <= n;
            //@ decreases n;
            while (n <= 0) {//while (n > 0) {
                sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}",Buggy
"public class AddLoop {
    //@ requires Integer.MIN_VALUE <= x + y && x + y <= Integer.MAX_VALUE && y != Integer.MIN_VALUE;
    //@ ensures \result == x + y;
    public static int AddLoop(int x, int y) {
        int sum = x;
        if (y > 0) {
            int n = y;
            //@ decreases n;
            //@ maintaining sum == x + y - n && 0 <= n;
            while (n > 0) {
                sum = sum + 1;
                n = n - 1;
            }
        } else {
            int n = -y;
            //@ maintaining sum == x + y + n && 0 <= n;
            //@ decreases n;
            while (n > 0) {
                sum = sum + 1;//sum = sum - 1;
                n = n - 1;
            }
        }
        return sum;
    }
}",Buggy
"public class Alphabet {
   private boolean vowel_set = false;
   private boolean vowel;
   /*@ private invariant vowel_set ==> 
                     (vowel == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
                               || c == 'i' || c == 'I' || c == 'o'
			       || c == 'O' || c == 'u' || c == 'U')); @*/

   private boolean alphabetic_set = false;
   private boolean alphabetic;
   //@ private invariant alphabetic_set ==> alphabetic == (('a' <= c && c <= 'z')||('A' <= c && c <='Z'));
   private boolean digit_set = false;
   private boolean digit;
   //@ private invariant digit_set ==> digit == ('0' <= c && c <= '9');
   private boolean uppercase_set = false;
   private boolean uppercase;
   //@ private invariant uppercase_set ==> (uppercase == ('A' <= c && c <= 'Z'));
   private boolean lowercase_set = false;
   private boolean lowercase;
   //@ private invariant lowercase_set ==> (lowercase == ('a' <= c && c <= 'z'));

   private /*@ spec_public @*/ final char c;

   /*@ private normal_behavior
     @   ensures !vowel_set && !alphabetic_set && !digit_set;
     @   ensures !uppercase_set && !lowercase_set;
     @ public normal_behavior
     @   ensures this.c == c; @*/
   public /*@ pure @*/ Alphabet(char c) 
   {
	this.c = c;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set && \result == vowel;
     @ public normal_behavior
     @   	ensures \result == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @    	                      || c == 'i' || c == 'I' || c == 'o'
     @				      || c == 'O' || c == 'u' || c == 'U'); @*/
   public boolean isVowel() 
   {
       // setVowel();
       return vowel;
   }

   /*@ private normal_behavior
     @   assignable alphabetic_set, alphabetic;
     @   ensures alphabetic_set && \result == alphabetic; 
     @ public normal_behavior
     @   ensures \result == ('a' <= c && c <= 'z')||('A' <= c && c <='Z'); @*/
   public boolean isAlphabetic() 
   {
	setAlphabetic();
	return alphabetic;
   }

   /*@ private normal_behavior
     @   assignable uppercase_set, uppercase;
     @   ensures uppercase_set && \result == uppercase; 
     @ public normal_behavior
     @   ensures \result == ('A' <= c && c <= 'Z'); @*/
   public boolean isUppercase() 
   {
	setUppercase();
	return uppercase;
   }

   /*@ private normal_behavior
      @   assignable lowercase_set, lowercase;
      @   ensures lowercase_set && \result == lowercase; 
      @ public normal_behavior
      @   ensures \result == ('a' <= c && c <= 'z'); @*/
   public boolean isLowercase() 
   {
       setLowercase();
       return lowercase;
   }

   /*@ private normal_behavior
     @   assignable digit_set, digit;
     @   ensures digit_set && \result == digit; 
     @ public normal_behavior
     @   ensures \result == ('0' <= c && c <= '9'); @*/
   public boolean isDigit() 
   {
	setDigit();
	return digit;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set;
     @   ensures vowel <==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @                     	|| c == 'i' || c == 'I' || c == 'o'
     @	 	 	     	|| c == 'O' || c == 'u' || c == 'U'); @*/
   private /*@ spec_public @*/ void setVowel() 
   {
        vowel = false;
        switch (c) {
            case 'a' :
            case 'e' :
            case 'i' :
            case 'o' :
            case 'u' :
            case 'A' :
            case 'E' :
            case 'I' :
            case 'O' :
            case 'U' : vowel = true;
        }
        vowel_set = true;
   }

   /*@ private normal_behavior
     @    assignable alphabetic_set, alphabetic;
     @    ensures alphabetic_set;
     @    ensures alphabetic <==> ('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setAlphabetic() 
   {
	alphabetic = (('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'));		
	alphabetic_set = true;
   }

   /*@ private normal_behavior
     @    assignable uppercase_set, uppercase;
     @    ensures uppercase_set;
     @    ensures uppercase <==> ('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setUppercase() 
   {
	uppercase = ('A' <= c && c <= 'Z');		
	uppercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable lowercase_set, lowercase;
     @    ensures lowercase_set;
     @    ensures lowercase <==> ('a' <= c && c <= 'z'); @*/
   private /*@ spec_public @*/ void setLowercase() 
   {
       lowercase = ('a' <= c && c <= 'z');
       lowercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable digit_set, digit;
     @    ensures digit_set;
     @    ensures digit <==> ('0' <= c && c <= '9'); @*/
   private /*@ spec_public @*/ void setDigit() 
   {
	digit = ('0' <= c && c <= '9');	
	digit_set = true;
   }

   /*@ private normal_behavior
     @   ensures \result == alphabetic_set; @*/
   public /*@ pure @*/ boolean getAlphabetic_set()
   {
	return alphabetic_set;
   }

   /*@ private normal_behavior
     @   ensures \result == uppercase_set; @*/
   public /*@ pure @*/ boolean getUppercase_set()
   {
	return uppercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == lowercase_set; @*/
   public /*@ pure @*/ boolean getLowercase_set()
   {
	return lowercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == vowel_set; @*/
   public /*@ pure @*/ boolean getVowel_set()
   {
	return vowel_set;
   }

   /*@ private normal_behavior
     @   ensures \result == digit_set; @*/
   public /*@ pure @*/ boolean getDigit_set()
   {
	return digit_set;
   }
   
   /*@ requires 0 <= op && op <= 4;
     @ {|
     @      requires op == 0;
     @      ensures \result[0] ==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' ||
     @		 	         c == 'O' || c == 'u' || c == 'U'); 
     @	    ensures \result[1];
     @ also
     @      requires op == 1;
     @      ensures \result[0] ==> ('A' <= c && c <= 'Z');
     @	    ensures \result[2];
     @ also
     @      requires op == 2;
     @      ensures \result[0] ==> ('a' <= c && c <= 'z');
     @	    ensures \result[3];
     @ also
     @      requires op == 3;
     @      ensures \result[0] ==> ('0' <= c && c <= '9');
     @	    ensures \result[4];
     @ also
     @      requires op == 4;
     @	    ensures \result[5];
     @ |} @*/
   public boolean[] driver(int op) 
   {
	boolean[] result = new boolean[6];
	switch (op) {
		case 0 :
		result[0] = isVowel();
		result[1] = getVowel_set();
		break;
		
		case 1 :
		result[0] = isUppercase();
		result[2] = getUppercase_set();
		break;

		case 2 :
		result[0] = isLowercase();
		result[3] = getLowercase_set();
		break;

		case 3 :
		result[0] = isDigit();
		result[4] = getDigit_set();
		break;

		default :
		result[0] = isAlphabetic();
		result[5] = getAlphabetic_set();
		break;
	}
	return result;
   }
}",Buggy
"public class Alphabet {
   private boolean vowel_set = false;
   private boolean vowel;
   /*@ private invariant vowel_set ==> 
                     (vowel == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
                               || c == 'i' || c == 'I' || c == 'o'
			       || c == 'O' || c == 'u' || c == 'U')); @*/

   private boolean alphabetic_set = false;
   private boolean alphabetic;
   //@ private invariant alphabetic_set ==> alphabetic == (('a' <= c && c <= 'z')||('A' <= c && c <='Z'));
   private boolean digit_set = false;
   private boolean digit;
   //@ private invariant digit_set ==> digit == ('0' <= c && c <= '9');
   private boolean uppercase_set = false;
   private boolean uppercase;
   //@ private invariant uppercase_set ==> (uppercase == ('A' <= c && c <= 'Z'));
   private boolean lowercase_set = false;
   private boolean lowercase;
   //@ private invariant lowercase_set ==> (lowercase == ('a' <= c && c <= 'z'));

   private /*@ spec_public @*/ final char c;

   /*@ private normal_behavior
     @   ensures !vowel_set && !alphabetic_set && !digit_set;
     @   ensures !uppercase_set && !lowercase_set;
     @ public normal_behavior
     @   ensures this.c == c; @*/
   public /*@ pure @*/ Alphabet(char c) 
   {
	this.c = c;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set && \result == vowel;
     @ public normal_behavior
     @   	ensures \result == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @    	                      || c == 'i' || c == 'I' || c == 'o'
     @				      || c == 'O' || c == 'u' || c == 'U'); @*/
   public boolean isVowel() 
   {
       setVowel();
       return vowel;
   }

   /*@ private normal_behavior
     @   assignable alphabetic_set, alphabetic;
     @   ensures alphabetic_set && \result == alphabetic; 
     @ public normal_behavior
     @   ensures \result == ('a' <= c && c <= 'z')||('A' <= c && c <='Z'); @*/
   public boolean isAlphabetic() 
   {
	setAlphabetic();
	return alphabetic;
   }

   /*@ private normal_behavior
     @   assignable uppercase_set, uppercase;
     @   ensures uppercase_set && \result == uppercase; 
     @ public normal_behavior
     @   ensures \result == ('A' <= c && c <= 'Z'); @*/
   public boolean isUppercase() 
   {
	setUppercase();
	return uppercase;
   }

   /*@ private normal_behavior
      @   assignable lowercase_set, lowercase;
      @   ensures lowercase_set && \result == lowercase; 
      @ public normal_behavior
      @   ensures \result == ('a' <= c && c <= 'z'); @*/
   public boolean isLowercase() 
   {
       setLowercase();
       return lowercase;
   }

   /*@ private normal_behavior
     @   assignable digit_set, digit;
     @   ensures digit_set && \result == digit; 
     @ public normal_behavior
     @   ensures \result == ('0' <= c && c <= '9'); @*/
   public boolean isDigit() 
   {
	setDigit();
	return !digit; // return digit;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set;
     @   ensures vowel <==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @                     	|| c == 'i' || c == 'I' || c == 'o'
     @	 	 	     	|| c == 'O' || c == 'u' || c == 'U'); @*/
   private /*@ spec_public @*/ void setVowel() 
   {
        vowel = false;
        switch (c) {
            case 'a' :
            case 'e' :
            case 'i' :
            case 'o' :
            case 'u' :
            case 'A' :
            case 'E' :
            case 'I' :
            case 'O' :
            case 'U' : vowel = true;
        }
        vowel_set = true;
   }

   /*@ private normal_behavior
     @    assignable alphabetic_set, alphabetic;
     @    ensures alphabetic_set;
     @    ensures alphabetic <==> ('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setAlphabetic() 
   {
	alphabetic = (('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'));		
	alphabetic_set = true;
   }

   /*@ private normal_behavior
     @    assignable uppercase_set, uppercase;
     @    ensures uppercase_set;
     @    ensures uppercase <==> ('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setUppercase() 
   {
	uppercase = ('A' <= c && c <= 'Z');		
	uppercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable lowercase_set, lowercase;
     @    ensures lowercase_set;
     @    ensures lowercase <==> ('a' <= c && c <= 'z'); @*/
   private /*@ spec_public @*/ void setLowercase() 
   {
       lowercase = ('a' <= c && c <= 'z');
       lowercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable digit_set, digit;
     @    ensures digit_set;
     @    ensures digit <==> ('0' <= c && c <= '9'); @*/
   private /*@ spec_public @*/ void setDigit() 
   {
	digit = ('0' <= c && c <= '9');	
	digit_set = true;
   }

   /*@ private normal_behavior
     @   ensures \result == alphabetic_set; @*/
   public /*@ pure @*/ boolean getAlphabetic_set()
   {
	return alphabetic_set;
   }

   /*@ private normal_behavior
     @   ensures \result == uppercase_set; @*/
   public /*@ pure @*/ boolean getUppercase_set()
   {
	return uppercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == lowercase_set; @*/
   public /*@ pure @*/ boolean getLowercase_set()
   {
	return lowercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == vowel_set; @*/
   public /*@ pure @*/ boolean getVowel_set()
   {
	return vowel_set;
   }

   /*@ private normal_behavior
     @   ensures \result == digit_set; @*/
   public /*@ pure @*/ boolean getDigit_set()
   {
	return digit_set;
   }
   
   /*@ requires 0 <= op && op <= 4;
     @ {|
     @      requires op == 0;
     @      ensures \result[0] ==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' ||
     @		 	         c == 'O' || c == 'u' || c == 'U'); 
     @	    ensures \result[1];
     @ also
     @      requires op == 1;
     @      ensures \result[0] ==> ('A' <= c && c <= 'Z');
     @	    ensures \result[2];
     @ also
     @      requires op == 2;
     @      ensures \result[0] ==> ('a' <= c && c <= 'z');
     @	    ensures \result[3];
     @ also
     @      requires op == 3;
     @      ensures \result[0] ==> ('0' <= c && c <= '9');
     @	    ensures \result[4];
     @ also
     @      requires op == 4;
     @	    ensures \result[5];
     @ |} @*/
   public boolean[] driver(int op) 
   {
	boolean[] result = new boolean[6];
	switch (op) {
		case 0 :
		result[0] = isVowel();
		result[1] = getVowel_set();
		break;
		
		case 1 :
		result[0] = isUppercase();
		result[2] = getUppercase_set();
		break;

		case 2 :
		result[0] = isLowercase();
		result[3] = getLowercase_set();
		break;

		case 3 :
		result[0] = isDigit();
		result[4] = getDigit_set();
		break;

		default :
		result[0] = isAlphabetic();
		result[5] = getAlphabetic_set();
		break;
	}
	return result;
   }
}",Buggy
"public class Alphabet {
   private boolean vowel_set = false;
   private boolean vowel;
   /*@ private invariant vowel_set ==> 
                     (vowel == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
                               || c == 'i' || c == 'I' || c == 'o'
			       || c == 'O' || c == 'u' || c == 'U')); @*/

   private boolean alphabetic_set = false;
   private boolean alphabetic;
   //@ private invariant alphabetic_set ==> alphabetic == (('a' <= c && c <= 'z')||('A' <= c && c <='Z'));
   private boolean digit_set = false;
   private boolean digit;
   //@ private invariant digit_set ==> digit == ('0' <= c && c <= '9');
   private boolean uppercase_set = false;
   private boolean uppercase;
   //@ private invariant uppercase_set ==> (uppercase == ('A' <= c && c <= 'Z'));
   private boolean lowercase_set = false;
   private boolean lowercase;
   //@ private invariant lowercase_set ==> (lowercase == ('a' <= c && c <= 'z'));

   private /*@ spec_public @*/ final char c;

   /*@ private normal_behavior
     @   ensures !vowel_set && !alphabetic_set && !digit_set;
     @   ensures !uppercase_set && !lowercase_set;
     @ public normal_behavior
     @   ensures this.c == c; @*/
   public /*@ pure @*/ Alphabet(char c) 
   {
	this.c = c;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set && \result == vowel;
     @ public normal_behavior
     @   	ensures \result == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @    	                      || c == 'i' || c == 'I' || c == 'o'
     @				      || c == 'O' || c == 'u' || c == 'U'); @*/
   public boolean isVowel() 
   {
       setVowel();
       return vowel;
   }

   /*@ private normal_behavior
     @   assignable alphabetic_set, alphabetic;
     @   ensures alphabetic_set && \result == alphabetic; 
     @ public normal_behavior
     @   ensures \result == ('a' <= c && c <= 'z')||('A' <= c && c <='Z'); @*/
   public boolean isAlphabetic() 
   {
	setAlphabetic();
	return alphabetic;
   }

   /*@ private normal_behavior
     @   assignable uppercase_set, uppercase;
     @   ensures uppercase_set && \result == uppercase; 
     @ public normal_behavior
     @   ensures \result == ('A' <= c && c <= 'Z'); @*/
   public boolean isUppercase() 
   {
	setUppercase();
	return uppercase;
   }

   /*@ private normal_behavior
      @   assignable lowercase_set, lowercase;
      @   ensures lowercase_set && \result == lowercase; 
      @ public normal_behavior
      @   ensures \result == ('a' <= c && c <= 'z'); @*/
   public boolean isLowercase() 
   {
       setLowercase();
       return lowercase;
   }

   /*@ private normal_behavior
     @   assignable digit_set, digit;
     @   ensures digit_set && \result == digit; 
     @ public normal_behavior
     @   ensures \result == ('0' <= c && c <= '9'); @*/
   public boolean isDigit() 
   {
	setDigit();
	return digit;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set;
     @   ensures vowel <==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @                     	|| c == 'i' || c == 'I' || c == 'o'
     @	 	 	     	|| c == 'O' || c == 'u' || c == 'U'); @*/
   private /*@ spec_public @*/ void setVowel() 
   {
        vowel = false;
        switch (c) {
            case 'a' :
            case 'e' :
            case 'i' :
            case 'o' :
            case 'u' :
            case 'A' :
            case 'E' :
            case 'I' :
            case 'O' :
            case 'U' : vowel = true;
        }
        vowel_set = true;
   }

   /*@ private normal_behavior
     @    assignable alphabetic_set, alphabetic;
     @    ensures alphabetic_set;
     @    ensures alphabetic <==> ('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setAlphabetic() 
   {
	alphabetic = (('a' < c && c <= 'z')||('A' <= c && c <= 'Z')); // alphabetic = (('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'));		
	alphabetic_set = true;
   }

   /*@ private normal_behavior
     @    assignable uppercase_set, uppercase;
     @    ensures uppercase_set;
     @    ensures uppercase <==> ('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setUppercase() 
   {
	uppercase = ('A' <= c && c <= 'Z');		
	uppercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable lowercase_set, lowercase;
     @    ensures lowercase_set;
     @    ensures lowercase <==> ('a' <= c && c <= 'z'); @*/
   private /*@ spec_public @*/ void setLowercase() 
   {
       lowercase = ('a' <= c && c <= 'z');
       lowercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable digit_set, digit;
     @    ensures digit_set;
     @    ensures digit <==> ('0' <= c && c <= '9'); @*/
   private /*@ spec_public @*/ void setDigit() 
   {
	digit = ('0' <= c && c <= '9');	
	digit_set = true;
   }

   /*@ private normal_behavior
     @   ensures \result == alphabetic_set; @*/
   public /*@ pure @*/ boolean getAlphabetic_set()
   {
	return alphabetic_set;
   }

   /*@ private normal_behavior
     @   ensures \result == uppercase_set; @*/
   public /*@ pure @*/ boolean getUppercase_set()
   {
	return uppercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == lowercase_set; @*/
   public /*@ pure @*/ boolean getLowercase_set()
   {
	return lowercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == vowel_set; @*/
   public /*@ pure @*/ boolean getVowel_set()
   {
	return vowel_set;
   }

   /*@ private normal_behavior
     @   ensures \result == digit_set; @*/
   public /*@ pure @*/ boolean getDigit_set()
   {
	return digit_set;
   }
   
   /*@ requires 0 <= op && op <= 4;
     @ {|
     @      requires op == 0;
     @      ensures \result[0] ==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' ||
     @		 	         c == 'O' || c == 'u' || c == 'U'); 
     @	    ensures \result[1];
     @ also
     @      requires op == 1;
     @      ensures \result[0] ==> ('A' <= c && c <= 'Z');
     @	    ensures \result[2];
     @ also
     @      requires op == 2;
     @      ensures \result[0] ==> ('a' <= c && c <= 'z');
     @	    ensures \result[3];
     @ also
     @      requires op == 3;
     @      ensures \result[0] ==> ('0' <= c && c <= '9');
     @	    ensures \result[4];
     @ also
     @      requires op == 4;
     @	    ensures \result[5];
     @ |} @*/
   public boolean[] driver(int op) 
   {
	boolean[] result = new boolean[6];
	switch (op) {
		case 0 :
		result[0] = isVowel();
		result[1] = getVowel_set();
		break;
		
		case 1 :
		result[0] = isUppercase();
		result[2] = getUppercase_set();
		break;

		case 2 :
		result[0] = isLowercase();
		result[3] = getLowercase_set();
		break;

		case 3 :
		result[0] = isDigit();
		result[4] = getDigit_set();
		break;

		default :
		result[0] = isAlphabetic();
		result[5] = getAlphabetic_set();
		break;
	}
	return result;
   }
}",Buggy
"public class Alphabet {
   private boolean vowel_set = false;
   private boolean vowel;
   /*@ private invariant vowel_set ==> 
                     (vowel == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
                               || c == 'i' || c == 'I' || c == 'o'
			       || c == 'O' || c == 'u' || c == 'U')); @*/

   private boolean alphabetic_set = false;
   private boolean alphabetic;
   //@ private invariant alphabetic_set ==> alphabetic == (('a' <= c && c <= 'z')||('A' <= c && c <='Z'));
   private boolean digit_set = false;
   private boolean digit;
   //@ private invariant digit_set ==> digit == ('0' <= c && c <= '9');
   private boolean uppercase_set = false;
   private boolean uppercase;
   //@ private invariant uppercase_set ==> (uppercase == ('A' <= c && c <= 'Z'));
   private boolean lowercase_set = false;
   private boolean lowercase;
   //@ private invariant lowercase_set ==> (lowercase == ('a' <= c && c <= 'z'));

   private /*@ spec_public @*/ final char c;

   /*@ private normal_behavior
     @   ensures !vowel_set && !alphabetic_set && !digit_set;
     @   ensures !uppercase_set && !lowercase_set;
     @ public normal_behavior
     @   ensures this.c == c; @*/
   public /*@ pure @*/ Alphabet(char c) 
   {
	this.c = c;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set && \result == vowel;
     @ public normal_behavior
     @   	ensures \result == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @    	                      || c == 'i' || c == 'I' || c == 'o'
     @				      || c == 'O' || c == 'u' || c == 'U'); @*/
   public boolean isVowel() 
   {
       setVowel();
       return vowel;
   }

   /*@ private normal_behavior
     @   assignable alphabetic_set, alphabetic;
     @   ensures alphabetic_set && \result == alphabetic; 
     @ public normal_behavior
     @   ensures \result == ('a' <= c && c <= 'z')||('A' <= c && c <='Z'); @*/
   public boolean isAlphabetic() 
   {
	setAlphabetic();
	return alphabetic;
   }

   /*@ private normal_behavior
     @   assignable uppercase_set, uppercase;
     @   ensures uppercase_set && \result == uppercase; 
     @ public normal_behavior
     @   ensures \result == ('A' <= c && c <= 'Z'); @*/
   public boolean isUppercase() 
   {
	setUppercase();
	return uppercase;
   }

   /*@ private normal_behavior
      @   assignable lowercase_set, lowercase;
      @   ensures lowercase_set && \result == lowercase; 
      @ public normal_behavior
      @   ensures \result == ('a' <= c && c <= 'z'); @*/
   public boolean isLowercase() 
   {
       setLowercase();
       return lowercase;
   }

   /*@ private normal_behavior
     @   assignable digit_set, digit;
     @   ensures digit_set && \result == digit; 
     @ public normal_behavior
     @   ensures \result == ('0' <= c && c <= '9'); @*/
   public boolean isDigit() 
   {
	setDigit();
	return digit;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set;
     @   ensures vowel <==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @                     	|| c == 'i' || c == 'I' || c == 'o'
     @	 	 	     	|| c == 'O' || c == 'u' || c == 'U'); @*/
   private /*@ spec_public @*/ void setVowel() 
   {
        vowel = false;
        switch (c) {
            case 'a' :
            case 'e' :
            case 'i' :
            case 'o' :
            case 'u' :
            case 'A' :
            case 'E' :
            case 'I' :
            case 'O' :
            case 'U' : vowel = true;
        }
        vowel_set = true;
   }

   /*@ private normal_behavior
     @    assignable alphabetic_set, alphabetic;
     @    ensures alphabetic_set;
     @    ensures alphabetic <==> ('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setAlphabetic() 
   {
	alphabetic = (('a' <= c && c < 'z')||('A' <= c && c <= 'Z'));	// alphabetic = (('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'));		
	alphabetic_set = true;
   }

   /*@ private normal_behavior
     @    assignable uppercase_set, uppercase;
     @    ensures uppercase_set;
     @    ensures uppercase <==> ('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setUppercase() 
   {
	uppercase = ('A' <= c && c <= 'Z');		
	uppercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable lowercase_set, lowercase;
     @    ensures lowercase_set;
     @    ensures lowercase <==> ('a' <= c && c <= 'z'); @*/
   private /*@ spec_public @*/ void setLowercase() 
   {
       lowercase = ('a' <= c && c <= 'z');
       lowercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable digit_set, digit;
     @    ensures digit_set;
     @    ensures digit <==> ('0' <= c && c <= '9'); @*/
   private /*@ spec_public @*/ void setDigit() 
   {
	digit = ('0' <= c && c <= '9');	
	digit_set = true;
   }

   /*@ private normal_behavior
     @   ensures \result == alphabetic_set; @*/
   public /*@ pure @*/ boolean getAlphabetic_set()
   {
	return alphabetic_set;
   }

   /*@ private normal_behavior
     @   ensures \result == uppercase_set; @*/
   public /*@ pure @*/ boolean getUppercase_set()
   {
	return uppercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == lowercase_set; @*/
   public /*@ pure @*/ boolean getLowercase_set()
   {
	return lowercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == vowel_set; @*/
   public /*@ pure @*/ boolean getVowel_set()
   {
	return vowel_set;
   }

   /*@ private normal_behavior
     @   ensures \result == digit_set; @*/
   public /*@ pure @*/ boolean getDigit_set()
   {
	return digit_set;
   }
   
   /*@ requires 0 <= op && op <= 4;
     @ {|
     @      requires op == 0;
     @      ensures \result[0] ==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' ||
     @		 	         c == 'O' || c == 'u' || c == 'U'); 
     @	    ensures \result[1];
     @ also
     @      requires op == 1;
     @      ensures \result[0] ==> ('A' <= c && c <= 'Z');
     @	    ensures \result[2];
     @ also
     @      requires op == 2;
     @      ensures \result[0] ==> ('a' <= c && c <= 'z');
     @	    ensures \result[3];
     @ also
     @      requires op == 3;
     @      ensures \result[0] ==> ('0' <= c && c <= '9');
     @	    ensures \result[4];
     @ also
     @      requires op == 4;
     @	    ensures \result[5];
     @ |} @*/
   public boolean[] driver(int op) 
   {
	boolean[] result = new boolean[6];
	switch (op) {
		case 0 :
		result[0] = isVowel();
		result[1] = getVowel_set();
		break;
		
		case 1 :
		result[0] = isUppercase();
		result[2] = getUppercase_set();
		break;

		case 2 :
		result[0] = isLowercase();
		result[3] = getLowercase_set();
		break;

		case 3 :
		result[0] = isDigit();
		result[4] = getDigit_set();
		break;

		default :
		result[0] = isAlphabetic();
		result[5] = getAlphabetic_set();
		break;
	}
	return result;
   }
}",Buggy
"public class Alphabet {
   private boolean vowel_set = false;
   private boolean vowel;
   /*@ private invariant vowel_set ==> 
                     (vowel == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
                               || c == 'i' || c == 'I' || c == 'o'
			       || c == 'O' || c == 'u' || c == 'U')); @*/

   private boolean alphabetic_set = false;
   private boolean alphabetic;
   //@ private invariant alphabetic_set ==> alphabetic == (('a' <= c && c <= 'z')||('A' <= c && c <='Z'));
   private boolean digit_set = false;
   private boolean digit;
   //@ private invariant digit_set ==> digit == ('0' <= c && c <= '9');
   private boolean uppercase_set = false;
   private boolean uppercase;
   //@ private invariant uppercase_set ==> (uppercase == ('A' <= c && c <= 'Z'));
   private boolean lowercase_set = false;
   private boolean lowercase;
   //@ private invariant lowercase_set ==> (lowercase == ('a' <= c && c <= 'z'));

   private /*@ spec_public @*/ final char c;

   /*@ private normal_behavior
     @   ensures !vowel_set && !alphabetic_set && !digit_set;
     @   ensures !uppercase_set && !lowercase_set;
     @ public normal_behavior
     @   ensures this.c == c; @*/
   public /*@ pure @*/ Alphabet(char c) 
   {
	this.c = c;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set && \result == vowel;
     @ public normal_behavior
     @   	ensures \result == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @    	                      || c == 'i' || c == 'I' || c == 'o'
     @				      || c == 'O' || c == 'u' || c == 'U'); @*/
   public boolean isVowel() 
   {
       setVowel();
       return vowel;
   }

   /*@ private normal_behavior
     @   assignable alphabetic_set, alphabetic;
     @   ensures alphabetic_set && \result == alphabetic; 
     @ public normal_behavior
     @   ensures \result == ('a' <= c && c <= 'z')||('A' <= c && c <='Z'); @*/
   public boolean isAlphabetic() 
   {
	setAlphabetic();
	return alphabetic;
   }

   /*@ private normal_behavior
     @   assignable uppercase_set, uppercase;
     @   ensures uppercase_set && \result == uppercase; 
     @ public normal_behavior
     @   ensures \result == ('A' <= c && c <= 'Z'); @*/
   public boolean isUppercase() 
   {
	setUppercase();
	return uppercase;
   }

   /*@ private normal_behavior
      @   assignable lowercase_set, lowercase;
      @   ensures lowercase_set && \result == lowercase; 
      @ public normal_behavior
      @   ensures \result == ('a' <= c && c <= 'z'); @*/
   public boolean isLowercase() 
   {
       setLowercase();
       return lowercase;
   }

   /*@ private normal_behavior
     @   assignable digit_set, digit;
     @   ensures digit_set && \result == digit; 
     @ public normal_behavior
     @   ensures \result == ('0' <= c && c <= '9'); @*/
   public boolean isDigit() 
   {
	setDigit();
	return digit;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set;
     @   ensures vowel <==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @                     	|| c == 'i' || c == 'I' || c == 'o'
     @	 	 	     	|| c == 'O' || c == 'u' || c == 'U'); @*/
   private /*@ spec_public @*/ void setVowel() 
   {
        vowel = false;
        switch (c) {
            case 'a' :
            case 'e' :
            case 'i' :
            case 'o' :
            case 'u' :
            case 'A' :
            case 'E' :
            case 'I' :
            case 'O' :
            case 'U' : vowel = true;
        }
        vowel_set = true;
   }

   /*@ private normal_behavior
     @    assignable alphabetic_set, alphabetic;
     @    ensures alphabetic_set;
     @    ensures alphabetic <==> ('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setAlphabetic() 
   {
	alphabetic = (('a' <= c && c <= 'z')||('A' < c && c <= 'Z'));	// alphabetic = (('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'));		
	alphabetic_set = true;
   }

   /*@ private normal_behavior
     @    assignable uppercase_set, uppercase;
     @    ensures uppercase_set;
     @    ensures uppercase <==> ('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setUppercase() 
   {
	uppercase = ('A' <= c && c <= 'Z');		
	uppercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable lowercase_set, lowercase;
     @    ensures lowercase_set;
     @    ensures lowercase <==> ('a' <= c && c <= 'z'); @*/
   private /*@ spec_public @*/ void setLowercase() 
   {
       lowercase = ('a' <= c && c <= 'z');
       lowercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable digit_set, digit;
     @    ensures digit_set;
     @    ensures digit <==> ('0' <= c && c <= '9'); @*/
   private /*@ spec_public @*/ void setDigit() 
   {
	digit = ('0' <= c && c <= '9');	
	digit_set = true;
   }

   /*@ private normal_behavior
     @   ensures \result == alphabetic_set; @*/
   public /*@ pure @*/ boolean getAlphabetic_set()
   {
	return alphabetic_set;
   }

   /*@ private normal_behavior
     @   ensures \result == uppercase_set; @*/
   public /*@ pure @*/ boolean getUppercase_set()
   {
	return uppercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == lowercase_set; @*/
   public /*@ pure @*/ boolean getLowercase_set()
   {
	return lowercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == vowel_set; @*/
   public /*@ pure @*/ boolean getVowel_set()
   {
	return vowel_set;
   }

   /*@ private normal_behavior
     @   ensures \result == digit_set; @*/
   public /*@ pure @*/ boolean getDigit_set()
   {
	return digit_set;
   }
   
   /*@ requires 0 <= op && op <= 4;
     @ {|
     @      requires op == 0;
     @      ensures \result[0] ==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' ||
     @		 	         c == 'O' || c == 'u' || c == 'U'); 
     @	    ensures \result[1];
     @ also
     @      requires op == 1;
     @      ensures \result[0] ==> ('A' <= c && c <= 'Z');
     @	    ensures \result[2];
     @ also
     @      requires op == 2;
     @      ensures \result[0] ==> ('a' <= c && c <= 'z');
     @	    ensures \result[3];
     @ also
     @      requires op == 3;
     @      ensures \result[0] ==> ('0' <= c && c <= '9');
     @	    ensures \result[4];
     @ also
     @      requires op == 4;
     @	    ensures \result[5];
     @ |} @*/
   public boolean[] driver(int op) 
   {
	boolean[] result = new boolean[6];
	switch (op) {
		case 0 :
		result[0] = isVowel();
		result[1] = getVowel_set();
		break;
		
		case 1 :
		result[0] = isUppercase();
		result[2] = getUppercase_set();
		break;

		case 2 :
		result[0] = isLowercase();
		result[3] = getLowercase_set();
		break;

		case 3 :
		result[0] = isDigit();
		result[4] = getDigit_set();
		break;

		default :
		result[0] = isAlphabetic();
		result[5] = getAlphabetic_set();
		break;
	}
	return result;
   }
}",Buggy
"public class Alphabet {
   private boolean vowel_set = false;
   private boolean vowel;
   /*@ private invariant vowel_set ==> 
                     (vowel == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
                               || c == 'i' || c == 'I' || c == 'o'
			       || c == 'O' || c == 'u' || c == 'U')); @*/

   private boolean alphabetic_set = false;
   private boolean alphabetic;
   //@ private invariant alphabetic_set ==> alphabetic == (('a' <= c && c <= 'z')||('A' <= c && c <='Z'));
   private boolean digit_set = false;
   private boolean digit;
   //@ private invariant digit_set ==> digit == ('0' <= c && c <= '9');
   private boolean uppercase_set = false;
   private boolean uppercase;
   //@ private invariant uppercase_set ==> (uppercase == ('A' <= c && c <= 'Z'));
   private boolean lowercase_set = false;
   private boolean lowercase;
   //@ private invariant lowercase_set ==> (lowercase == ('a' <= c && c <= 'z'));

   private /*@ spec_public @*/ final char c;

   /*@ private normal_behavior
     @   ensures !vowel_set && !alphabetic_set && !digit_set;
     @   ensures !uppercase_set && !lowercase_set;
     @ public normal_behavior
     @   ensures this.c == c; @*/
   public /*@ pure @*/ Alphabet(char c) 
   {
	this.c = c;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set && \result == vowel;
     @ public normal_behavior
     @   	ensures \result == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @    	                      || c == 'i' || c == 'I' || c == 'o'
     @				      || c == 'O' || c == 'u' || c == 'U'); @*/
   public boolean isVowel() 
   {
       setVowel();
       return vowel;
   }

   /*@ private normal_behavior
     @   assignable alphabetic_set, alphabetic;
     @   ensures alphabetic_set && \result == alphabetic; 
     @ public normal_behavior
     @   ensures \result == ('a' <= c && c <= 'z')||('A' <= c && c <='Z'); @*/
   public boolean isAlphabetic() 
   {
	setAlphabetic();
	return alphabetic;
   }

   /*@ private normal_behavior
     @   assignable uppercase_set, uppercase;
     @   ensures uppercase_set && \result == uppercase; 
     @ public normal_behavior
     @   ensures \result == ('A' <= c && c <= 'Z'); @*/
   public boolean isUppercase() 
   {
	setUppercase();
	return uppercase;
   }

   /*@ private normal_behavior
      @   assignable lowercase_set, lowercase;
      @   ensures lowercase_set && \result == lowercase; 
      @ public normal_behavior
      @   ensures \result == ('a' <= c && c <= 'z'); @*/
   public boolean isLowercase() 
   {
       setLowercase();
       return lowercase;
   }

   /*@ private normal_behavior
     @   assignable digit_set, digit;
     @   ensures digit_set && \result == digit; 
     @ public normal_behavior
     @   ensures \result == ('0' <= c && c <= '9'); @*/
   public boolean isDigit() 
   {
	setDigit();
	return digit;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set;
     @   ensures vowel <==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @                     	|| c == 'i' || c == 'I' || c == 'o'
     @	 	 	     	|| c == 'O' || c == 'u' || c == 'U'); @*/
   private /*@ spec_public @*/ void setVowel() 
   {
        vowel = false;
        switch (c) {
            case 'a' :
            case 'e' :
            case 'i' :
            case 'o' :
            case 'u' :
            case 'A' :
            case 'E' :
            case 'I' :
            case 'O' :
            case 'U' : vowel = true;
        }
        vowel_set = true;
   }

   /*@ private normal_behavior
     @    assignable alphabetic_set, alphabetic;
     @    ensures alphabetic_set;
     @    ensures alphabetic <==> ('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setAlphabetic() 
   {
	alphabetic = (('a' <= c && c <= 'z')||('A' <= c && c < 'Z'));	// alphabetic = (('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'));		
	alphabetic_set = true;
   }

   /*@ private normal_behavior
     @    assignable uppercase_set, uppercase;
     @    ensures uppercase_set;
     @    ensures uppercase <==> ('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setUppercase() 
   {
	uppercase = ('A' <= c && c <= 'Z');		
	uppercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable lowercase_set, lowercase;
     @    ensures lowercase_set;
     @    ensures lowercase <==> ('a' <= c && c <= 'z'); @*/
   private /*@ spec_public @*/ void setLowercase() 
   {
       lowercase = ('a' <= c && c <= 'z');
       lowercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable digit_set, digit;
     @    ensures digit_set;
     @    ensures digit <==> ('0' <= c && c <= '9'); @*/
   private /*@ spec_public @*/ void setDigit() 
   {
	digit = ('0' <= c && c <= '9');	
	digit_set = true;
   }

   /*@ private normal_behavior
     @   ensures \result == alphabetic_set; @*/
   public /*@ pure @*/ boolean getAlphabetic_set()
   {
	return alphabetic_set;
   }

   /*@ private normal_behavior
     @   ensures \result == uppercase_set; @*/
   public /*@ pure @*/ boolean getUppercase_set()
   {
	return uppercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == lowercase_set; @*/
   public /*@ pure @*/ boolean getLowercase_set()
   {
	return lowercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == vowel_set; @*/
   public /*@ pure @*/ boolean getVowel_set()
   {
	return vowel_set;
   }

   /*@ private normal_behavior
     @   ensures \result == digit_set; @*/
   public /*@ pure @*/ boolean getDigit_set()
   {
	return digit_set;
   }
   
   /*@ requires 0 <= op && op <= 4;
     @ {|
     @      requires op == 0;
     @      ensures \result[0] ==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' ||
     @		 	         c == 'O' || c == 'u' || c == 'U'); 
     @	    ensures \result[1];
     @ also
     @      requires op == 1;
     @      ensures \result[0] ==> ('A' <= c && c <= 'Z');
     @	    ensures \result[2];
     @ also
     @      requires op == 2;
     @      ensures \result[0] ==> ('a' <= c && c <= 'z');
     @	    ensures \result[3];
     @ also
     @      requires op == 3;
     @      ensures \result[0] ==> ('0' <= c && c <= '9');
     @	    ensures \result[4];
     @ also
     @      requires op == 4;
     @	    ensures \result[5];
     @ |} @*/
   public boolean[] driver(int op) 
   {
	boolean[] result = new boolean[6];
	switch (op) {
		case 0 :
		result[0] = isVowel();
		result[1] = getVowel_set();
		break;
		
		case 1 :
		result[0] = isUppercase();
		result[2] = getUppercase_set();
		break;

		case 2 :
		result[0] = isLowercase();
		result[3] = getLowercase_set();
		break;

		case 3 :
		result[0] = isDigit();
		result[4] = getDigit_set();
		break;

		default :
		result[0] = isAlphabetic();
		result[5] = getAlphabetic_set();
		break;
	}
	return result;
   }
}",Buggy
"public class Alphabet {
   private boolean vowel_set = false;
   private boolean vowel;
   /*@ private invariant vowel_set ==> 
                     (vowel == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
                               || c == 'i' || c == 'I' || c == 'o'
			       || c == 'O' || c == 'u' || c == 'U')); @*/

   private boolean alphabetic_set = false;
   private boolean alphabetic;
   //@ private invariant alphabetic_set ==> alphabetic == (('a' <= c && c <= 'z')||('A' <= c && c <='Z'));
   private boolean digit_set = false;
   private boolean digit;
   //@ private invariant digit_set ==> digit == ('0' <= c && c <= '9');
   private boolean uppercase_set = false;
   private boolean uppercase;
   //@ private invariant uppercase_set ==> (uppercase == ('A' <= c && c <= 'Z'));
   private boolean lowercase_set = false;
   private boolean lowercase;
   //@ private invariant lowercase_set ==> (lowercase == ('a' <= c && c <= 'z'));

   private /*@ spec_public @*/ final char c;

   /*@ private normal_behavior
     @   ensures !vowel_set && !alphabetic_set && !digit_set;
     @   ensures !uppercase_set && !lowercase_set;
     @ public normal_behavior
     @   ensures this.c == c; @*/
   public /*@ pure @*/ Alphabet(char c) 
   {
	this.c = c;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set && \result == vowel;
     @ public normal_behavior
     @   	ensures \result == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @    	                      || c == 'i' || c == 'I' || c == 'o'
     @				      || c == 'O' || c == 'u' || c == 'U'); @*/
   public boolean isVowel() 
   {
       setVowel();
       return vowel;
   }

   /*@ private normal_behavior
     @   assignable alphabetic_set, alphabetic;
     @   ensures alphabetic_set && \result == alphabetic; 
     @ public normal_behavior
     @   ensures \result == ('a' <= c && c <= 'z')||('A' <= c && c <='Z'); @*/
   public boolean isAlphabetic() 
   {
	setAlphabetic();
	return alphabetic;
   }

   /*@ private normal_behavior
     @   assignable uppercase_set, uppercase;
     @   ensures uppercase_set && \result == uppercase; 
     @ public normal_behavior
     @   ensures \result == ('A' <= c && c <= 'Z'); @*/
   public boolean isUppercase() 
   {
	setUppercase();
	return uppercase;
   }

   /*@ private normal_behavior
      @   assignable lowercase_set, lowercase;
      @   ensures lowercase_set && \result == lowercase; 
      @ public normal_behavior
      @   ensures \result == ('a' <= c && c <= 'z'); @*/
   public boolean isLowercase() 
   {
       setLowercase();
       return lowercase;
   }

   /*@ private normal_behavior
     @   assignable digit_set, digit;
     @   ensures digit_set && \result == digit; 
     @ public normal_behavior
     @   ensures \result == ('0' <= c && c <= '9'); @*/
   public boolean isDigit() 
   {
	setDigit();
	return digit;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set;
     @   ensures vowel <==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @                     	|| c == 'i' || c == 'I' || c == 'o'
     @	 	 	     	|| c == 'O' || c == 'u' || c == 'U'); @*/
   private /*@ spec_public @*/ void setVowel() 
   {
        vowel = false;
        switch (c) {
            case 'a' :
            case 'e' :
            case 'i' :
            case 'o' :
            case 'u' :
            case 'A' :
            case 'E' :
            case 'I' :
            case 'O' :
            case 'U' : vowel = true;
        }
        vowel_set = true;
   }

   /*@ private normal_behavior
     @    assignable alphabetic_set, alphabetic;
     @    ensures alphabetic_set;
     @    ensures alphabetic <==> ('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setAlphabetic() 
   {
	alphabetic = (('a' > c && c <= 'z')||('A' <= c && c <= 'Z'));	// alphabetic = (('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'));	
	alphabetic_set = true;
   }

   /*@ private normal_behavior
     @    assignable uppercase_set, uppercase;
     @    ensures uppercase_set;
     @    ensures uppercase <==> ('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setUppercase() 
   {
	uppercase = ('A' <= c && c <= 'Z');		
	uppercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable lowercase_set, lowercase;
     @    ensures lowercase_set;
     @    ensures lowercase <==> ('a' <= c && c <= 'z'); @*/
   private /*@ spec_public @*/ void setLowercase() 
   {
       lowercase = ('a' <= c && c <= 'z');
       lowercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable digit_set, digit;
     @    ensures digit_set;
     @    ensures digit <==> ('0' <= c && c <= '9'); @*/
   private /*@ spec_public @*/ void setDigit() 
   {
	digit = ('0' <= c && c <= '9');	
	digit_set = true;
   }

   /*@ private normal_behavior
     @   ensures \result == alphabetic_set; @*/
   public /*@ pure @*/ boolean getAlphabetic_set()
   {
	return alphabetic_set;
   }

   /*@ private normal_behavior
     @   ensures \result == uppercase_set; @*/
   public /*@ pure @*/ boolean getUppercase_set()
   {
	return uppercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == lowercase_set; @*/
   public /*@ pure @*/ boolean getLowercase_set()
   {
	return lowercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == vowel_set; @*/
   public /*@ pure @*/ boolean getVowel_set()
   {
	return vowel_set;
   }

   /*@ private normal_behavior
     @   ensures \result == digit_set; @*/
   public /*@ pure @*/ boolean getDigit_set()
   {
	return digit_set;
   }
   
   /*@ requires 0 <= op && op <= 4;
     @ {|
     @      requires op == 0;
     @      ensures \result[0] ==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' ||
     @		 	         c == 'O' || c == 'u' || c == 'U'); 
     @	    ensures \result[1];
     @ also
     @      requires op == 1;
     @      ensures \result[0] ==> ('A' <= c && c <= 'Z');
     @	    ensures \result[2];
     @ also
     @      requires op == 2;
     @      ensures \result[0] ==> ('a' <= c && c <= 'z');
     @	    ensures \result[3];
     @ also
     @      requires op == 3;
     @      ensures \result[0] ==> ('0' <= c && c <= '9');
     @	    ensures \result[4];
     @ also
     @      requires op == 4;
     @	    ensures \result[5];
     @ |} @*/
   public boolean[] driver(int op) 
   {
	boolean[] result = new boolean[6];
	switch (op) {
		case 0 :
		result[0] = isVowel();
		result[1] = getVowel_set();
		break;
		
		case 1 :
		result[0] = isUppercase();
		result[2] = getUppercase_set();
		break;

		case 2 :
		result[0] = isLowercase();
		result[3] = getLowercase_set();
		break;

		case 3 :
		result[0] = isDigit();
		result[4] = getDigit_set();
		break;

		default :
		result[0] = isAlphabetic();
		result[5] = getAlphabetic_set();
		break;
	}
	return result;
   }
}",Buggy
"public class Alphabet {
   private boolean vowel_set = false;
   private boolean vowel;
   /*@ private invariant vowel_set ==> 
                     (vowel == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
                               || c == 'i' || c == 'I' || c == 'o'
			       || c == 'O' || c == 'u' || c == 'U')); @*/

   private boolean alphabetic_set = false;
   private boolean alphabetic;
   //@ private invariant alphabetic_set ==> alphabetic == (('a' <= c && c <= 'z')||('A' <= c && c <='Z'));
   private boolean digit_set = false;
   private boolean digit;
   //@ private invariant digit_set ==> digit == ('0' <= c && c <= '9');
   private boolean uppercase_set = false;
   private boolean uppercase;
   //@ private invariant uppercase_set ==> (uppercase == ('A' <= c && c <= 'Z'));
   private boolean lowercase_set = false;
   private boolean lowercase;
   //@ private invariant lowercase_set ==> (lowercase == ('a' <= c && c <= 'z'));

   private /*@ spec_public @*/ final char c;

   /*@ private normal_behavior
     @   ensures !vowel_set && !alphabetic_set && !digit_set;
     @   ensures !uppercase_set && !lowercase_set;
     @ public normal_behavior
     @   ensures this.c == c; @*/
   public /*@ pure @*/ Alphabet(char c) 
   {
	this.c = c;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set && \result == vowel;
     @ public normal_behavior
     @   	ensures \result == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @    	                      || c == 'i' || c == 'I' || c == 'o'
     @				      || c == 'O' || c == 'u' || c == 'U'); @*/
   public boolean isVowel() 
   {
       setVowel();
       return vowel;
   }

   /*@ private normal_behavior
     @   assignable alphabetic_set, alphabetic;
     @   ensures alphabetic_set && \result == alphabetic; 
     @ public normal_behavior
     @   ensures \result == ('a' <= c && c <= 'z')||('A' <= c && c <='Z'); @*/
   public boolean isAlphabetic() 
   {
	setAlphabetic();
	return alphabetic;
   }

   /*@ private normal_behavior
     @   assignable uppercase_set, uppercase;
     @   ensures uppercase_set && \result == uppercase; 
     @ public normal_behavior
     @   ensures \result == ('A' <= c && c <= 'Z'); @*/
   public boolean isUppercase() 
   {
	setUppercase();
	return uppercase;
   }

   /*@ private normal_behavior
      @   assignable lowercase_set, lowercase;
      @   ensures lowercase_set && \result == lowercase; 
      @ public normal_behavior
      @   ensures \result == ('a' <= c && c <= 'z'); @*/
   public boolean isLowercase() 
   {
       setLowercase();
       return lowercase;
   }

   /*@ private normal_behavior
     @   assignable digit_set, digit;
     @   ensures digit_set && \result == digit; 
     @ public normal_behavior
     @   ensures \result == ('0' <= c && c <= '9'); @*/
   public boolean isDigit() 
   {
	setDigit();
	return digit;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set;
     @   ensures vowel <==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @                     	|| c == 'i' || c == 'I' || c == 'o'
     @	 	 	     	|| c == 'O' || c == 'u' || c == 'U'); @*/
   private /*@ spec_public @*/ void setVowel() 
   {
        vowel = false;
        switch (c) {
            case 'a' :
            case 'e' :
            case 'i' :
            case 'o' :
            case 'u' :
            case 'A' :
            case 'E' :
            case 'I' :
            case 'O' :
            case 'U' : vowel = true;
        }
        vowel_set = true;
   }

   /*@ private normal_behavior
     @    assignable alphabetic_set, alphabetic;
     @    ensures alphabetic_set;
     @    ensures alphabetic <==> ('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setAlphabetic() 
   {
	alphabetic = (('a' <= c && c > 'z')||('A' <= c && c <= 'Z'));	// alphabetic = (('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'));		
	alphabetic_set = true;
   }

   /*@ private normal_behavior
     @    assignable uppercase_set, uppercase;
     @    ensures uppercase_set;
     @    ensures uppercase <==> ('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setUppercase() 
   {
	uppercase = ('A' <= c && c <= 'Z');		
	uppercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable lowercase_set, lowercase;
     @    ensures lowercase_set;
     @    ensures lowercase <==> ('a' <= c && c <= 'z'); @*/
   private /*@ spec_public @*/ void setLowercase() 
   {
       lowercase = ('a' <= c && c <= 'z');
       lowercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable digit_set, digit;
     @    ensures digit_set;
     @    ensures digit <==> ('0' <= c && c <= '9'); @*/
   private /*@ spec_public @*/ void setDigit() 
   {
	digit = ('0' <= c && c <= '9');	
	digit_set = true;
   }

   /*@ private normal_behavior
     @   ensures \result == alphabetic_set; @*/
   public /*@ pure @*/ boolean getAlphabetic_set()
   {
	return alphabetic_set;
   }

   /*@ private normal_behavior
     @   ensures \result == uppercase_set; @*/
   public /*@ pure @*/ boolean getUppercase_set()
   {
	return uppercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == lowercase_set; @*/
   public /*@ pure @*/ boolean getLowercase_set()
   {
	return lowercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == vowel_set; @*/
   public /*@ pure @*/ boolean getVowel_set()
   {
	return vowel_set;
   }

   /*@ private normal_behavior
     @   ensures \result == digit_set; @*/
   public /*@ pure @*/ boolean getDigit_set()
   {
	return digit_set;
   }
   
   /*@ requires 0 <= op && op <= 4;
     @ {|
     @      requires op == 0;
     @      ensures \result[0] ==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' ||
     @		 	         c == 'O' || c == 'u' || c == 'U'); 
     @	    ensures \result[1];
     @ also
     @      requires op == 1;
     @      ensures \result[0] ==> ('A' <= c && c <= 'Z');
     @	    ensures \result[2];
     @ also
     @      requires op == 2;
     @      ensures \result[0] ==> ('a' <= c && c <= 'z');
     @	    ensures \result[3];
     @ also
     @      requires op == 3;
     @      ensures \result[0] ==> ('0' <= c && c <= '9');
     @	    ensures \result[4];
     @ also
     @      requires op == 4;
     @	    ensures \result[5];
     @ |} @*/
   public boolean[] driver(int op) 
   {
	boolean[] result = new boolean[6];
	switch (op) {
		case 0 :
		result[0] = isVowel();
		result[1] = getVowel_set();
		break;
		
		case 1 :
		result[0] = isUppercase();
		result[2] = getUppercase_set();
		break;

		case 2 :
		result[0] = isLowercase();
		result[3] = getLowercase_set();
		break;

		case 3 :
		result[0] = isDigit();
		result[4] = getDigit_set();
		break;

		default :
		result[0] = isAlphabetic();
		result[5] = getAlphabetic_set();
		break;
	}
	return result;
   }
}",Buggy
"public class Alphabet {
   private boolean vowel_set = false;
   private boolean vowel;
   /*@ private invariant vowel_set ==> 
                     (vowel == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
                               || c == 'i' || c == 'I' || c == 'o'
			       || c == 'O' || c == 'u' || c == 'U')); @*/

   private boolean alphabetic_set = false;
   private boolean alphabetic;
   //@ private invariant alphabetic_set ==> alphabetic == (('a' <= c && c <= 'z')||('A' <= c && c <='Z'));
   private boolean digit_set = false;
   private boolean digit;
   //@ private invariant digit_set ==> digit == ('0' <= c && c <= '9');
   private boolean uppercase_set = false;
   private boolean uppercase;
   //@ private invariant uppercase_set ==> (uppercase == ('A' <= c && c <= 'Z'));
   private boolean lowercase_set = false;
   private boolean lowercase;
   //@ private invariant lowercase_set ==> (lowercase == ('a' <= c && c <= 'z'));

   private /*@ spec_public @*/ final char c;

   /*@ private normal_behavior
     @   ensures !vowel_set && !alphabetic_set && !digit_set;
     @   ensures !uppercase_set && !lowercase_set;
     @ public normal_behavior
     @   ensures this.c == c; @*/
   public /*@ pure @*/ Alphabet(char c) 
   {
	this.c = c;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set && \result == vowel;
     @ public normal_behavior
     @   	ensures \result == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @    	                      || c == 'i' || c == 'I' || c == 'o'
     @				      || c == 'O' || c == 'u' || c == 'U'); @*/
   public boolean isVowel() 
   {
       setVowel();
       return vowel;
   }

   /*@ private normal_behavior
     @   assignable alphabetic_set, alphabetic;
     @   ensures alphabetic_set && \result == alphabetic; 
     @ public normal_behavior
     @   ensures \result == ('a' <= c && c <= 'z')||('A' <= c && c <='Z'); @*/
   public boolean isAlphabetic() 
   {
	setAlphabetic();
	return alphabetic;
   }

   /*@ private normal_behavior
     @   assignable uppercase_set, uppercase;
     @   ensures uppercase_set && \result == uppercase; 
     @ public normal_behavior
     @   ensures \result == ('A' <= c && c <= 'Z'); @*/
   public boolean isUppercase() 
   {
	setUppercase();
	return uppercase;
   }

   /*@ private normal_behavior
      @   assignable lowercase_set, lowercase;
      @   ensures lowercase_set && \result == lowercase; 
      @ public normal_behavior
      @   ensures \result == ('a' <= c && c <= 'z'); @*/
   public boolean isLowercase() 
   {
       setLowercase();
       return lowercase;
   }

   /*@ private normal_behavior
     @   assignable digit_set, digit;
     @   ensures digit_set && \result == digit; 
     @ public normal_behavior
     @   ensures \result == ('0' <= c && c <= '9'); @*/
   public boolean isDigit() 
   {
	setDigit();
	return digit;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set;
     @   ensures vowel <==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @                     	|| c == 'i' || c == 'I' || c == 'o'
     @	 	 	     	|| c == 'O' || c == 'u' || c == 'U'); @*/
   private /*@ spec_public @*/ void setVowel() 
   {
        vowel = false;
        switch (c) {
            case 'a' :
            case 'e' :
            case 'i' :
            case 'o' :
            case 'u' :
            case 'A' :
            case 'E' :
            case 'I' :
            case 'O' :
            case 'U' : vowel = true;
        }
        vowel_set = true;
   }

   /*@ private normal_behavior
     @    assignable alphabetic_set, alphabetic;
     @    ensures alphabetic_set;
     @    ensures alphabetic <==> ('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setAlphabetic() 
   {
	alphabetic = (('a' <= c && c <= 'z')||('A' > c && c <= 'Z'));	// alphabetic = (('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'));		
	alphabetic_set = true;
   }

   /*@ private normal_behavior
     @    assignable uppercase_set, uppercase;
     @    ensures uppercase_set;
     @    ensures uppercase <==> ('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setUppercase() 
   {
	uppercase = ('A' <= c && c <= 'Z');		
	uppercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable lowercase_set, lowercase;
     @    ensures lowercase_set;
     @    ensures lowercase <==> ('a' <= c && c <= 'z'); @*/
   private /*@ spec_public @*/ void setLowercase() 
   {
       lowercase = ('a' <= c && c <= 'z');
       lowercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable digit_set, digit;
     @    ensures digit_set;
     @    ensures digit <==> ('0' <= c && c <= '9'); @*/
   private /*@ spec_public @*/ void setDigit() 
   {
	digit = ('0' <= c && c <= '9');	
	digit_set = true;
   }

   /*@ private normal_behavior
     @   ensures \result == alphabetic_set; @*/
   public /*@ pure @*/ boolean getAlphabetic_set()
   {
	return alphabetic_set;
   }

   /*@ private normal_behavior
     @   ensures \result == uppercase_set; @*/
   public /*@ pure @*/ boolean getUppercase_set()
   {
	return uppercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == lowercase_set; @*/
   public /*@ pure @*/ boolean getLowercase_set()
   {
	return lowercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == vowel_set; @*/
   public /*@ pure @*/ boolean getVowel_set()
   {
	return vowel_set;
   }

   /*@ private normal_behavior
     @   ensures \result == digit_set; @*/
   public /*@ pure @*/ boolean getDigit_set()
   {
	return digit_set;
   }
   
   /*@ requires 0 <= op && op <= 4;
     @ {|
     @      requires op == 0;
     @      ensures \result[0] ==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' ||
     @		 	         c == 'O' || c == 'u' || c == 'U'); 
     @	    ensures \result[1];
     @ also
     @      requires op == 1;
     @      ensures \result[0] ==> ('A' <= c && c <= 'Z');
     @	    ensures \result[2];
     @ also
     @      requires op == 2;
     @      ensures \result[0] ==> ('a' <= c && c <= 'z');
     @	    ensures \result[3];
     @ also
     @      requires op == 3;
     @      ensures \result[0] ==> ('0' <= c && c <= '9');
     @	    ensures \result[4];
     @ also
     @      requires op == 4;
     @	    ensures \result[5];
     @ |} @*/
   public boolean[] driver(int op) 
   {
	boolean[] result = new boolean[6];
	switch (op) {
		case 0 :
		result[0] = isVowel();
		result[1] = getVowel_set();
		break;
		
		case 1 :
		result[0] = isUppercase();
		result[2] = getUppercase_set();
		break;

		case 2 :
		result[0] = isLowercase();
		result[3] = getLowercase_set();
		break;

		case 3 :
		result[0] = isDigit();
		result[4] = getDigit_set();
		break;

		default :
		result[0] = isAlphabetic();
		result[5] = getAlphabetic_set();
		break;
	}
	return result;
   }
}",Buggy
"public class Alphabet {
   private boolean vowel_set = false;
   private boolean vowel;
   /*@ private invariant vowel_set ==> 
                     (vowel == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
                               || c == 'i' || c == 'I' || c == 'o'
			       || c == 'O' || c == 'u' || c == 'U')); @*/

   private boolean alphabetic_set = false;
   private boolean alphabetic;
   //@ private invariant alphabetic_set ==> alphabetic == (('a' <= c && c <= 'z')||('A' <= c && c <='Z'));
   private boolean digit_set = false;
   private boolean digit;
   //@ private invariant digit_set ==> digit == ('0' <= c && c <= '9');
   private boolean uppercase_set = false;
   private boolean uppercase;
   //@ private invariant uppercase_set ==> (uppercase == ('A' <= c && c <= 'Z'));
   private boolean lowercase_set = false;
   private boolean lowercase;
   //@ private invariant lowercase_set ==> (lowercase == ('a' <= c && c <= 'z'));

   private /*@ spec_public @*/ final char c;

   /*@ private normal_behavior
     @   ensures !vowel_set && !alphabetic_set && !digit_set;
     @   ensures !uppercase_set && !lowercase_set;
     @ public normal_behavior
     @   ensures this.c == c; @*/
   public /*@ pure @*/ Alphabet(char c) 
   {
	this.c = c;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set && \result == vowel;
     @ public normal_behavior
     @   	ensures \result == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @    	                      || c == 'i' || c == 'I' || c == 'o'
     @				      || c == 'O' || c == 'u' || c == 'U'); @*/
   public boolean isVowel() 
   {
       setVowel();
       return vowel;
   }

   /*@ private normal_behavior
     @   assignable alphabetic_set, alphabetic;
     @   ensures alphabetic_set && \result == alphabetic; 
     @ public normal_behavior
     @   ensures \result == ('a' <= c && c <= 'z')||('A' <= c && c <='Z'); @*/
   public boolean isAlphabetic() 
   {
	setAlphabetic();
	return alphabetic;
   }

   /*@ private normal_behavior
     @   assignable uppercase_set, uppercase;
     @   ensures uppercase_set && \result == uppercase; 
     @ public normal_behavior
     @   ensures \result == ('A' <= c && c <= 'Z'); @*/
   public boolean isUppercase() 
   {
	setUppercase();
	return uppercase;
   }

   /*@ private normal_behavior
      @   assignable lowercase_set, lowercase;
      @   ensures lowercase_set && \result == lowercase; 
      @ public normal_behavior
      @   ensures \result == ('a' <= c && c <= 'z'); @*/
   public boolean isLowercase() 
   {
       setLowercase();
       return lowercase;
   }

   /*@ private normal_behavior
     @   assignable digit_set, digit;
     @   ensures digit_set && \result == digit; 
     @ public normal_behavior
     @   ensures \result == ('0' <= c && c <= '9'); @*/
   public boolean isDigit() 
   {
	setDigit();
	return digit;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set;
     @   ensures vowel <==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @                     	|| c == 'i' || c == 'I' || c == 'o'
     @	 	 	     	|| c == 'O' || c == 'u' || c == 'U'); @*/
   private /*@ spec_public @*/ void setVowel() 
   {
        vowel = false;
        switch (c) {
            case 'a' :
            case 'e' :
            case 'i' :
            case 'o' :
            case 'u' :
            case 'A' :
            case 'E' :
            case 'I' :
            case 'O' :
            case 'U' : vowel = true;
        }
        vowel_set = true;
   }

   /*@ private normal_behavior
     @    assignable alphabetic_set, alphabetic;
     @    ensures alphabetic_set;
     @    ensures alphabetic <==> ('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setAlphabetic() 
   {
	alphabetic = (('a' <= c && c <= 'z')||('A' <= c && c > 'Z'));	// alphabetic = (('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'));		
	alphabetic_set = true;
   }

   /*@ private normal_behavior
     @    assignable uppercase_set, uppercase;
     @    ensures uppercase_set;
     @    ensures uppercase <==> ('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setUppercase() 
   {
	uppercase = ('A' <= c && c <= 'Z');		
	uppercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable lowercase_set, lowercase;
     @    ensures lowercase_set;
     @    ensures lowercase <==> ('a' <= c && c <= 'z'); @*/
   private /*@ spec_public @*/ void setLowercase() 
   {
       lowercase = ('a' <= c && c <= 'z');
       lowercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable digit_set, digit;
     @    ensures digit_set;
     @    ensures digit <==> ('0' <= c && c <= '9'); @*/
   private /*@ spec_public @*/ void setDigit() 
   {
	digit = ('0' <= c && c <= '9');	
	digit_set = true;
   }

   /*@ private normal_behavior
     @   ensures \result == alphabetic_set; @*/
   public /*@ pure @*/ boolean getAlphabetic_set()
   {
	return alphabetic_set;
   }

   /*@ private normal_behavior
     @   ensures \result == uppercase_set; @*/
   public /*@ pure @*/ boolean getUppercase_set()
   {
	return uppercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == lowercase_set; @*/
   public /*@ pure @*/ boolean getLowercase_set()
   {
	return lowercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == vowel_set; @*/
   public /*@ pure @*/ boolean getVowel_set()
   {
	return vowel_set;
   }

   /*@ private normal_behavior
     @   ensures \result == digit_set; @*/
   public /*@ pure @*/ boolean getDigit_set()
   {
	return digit_set;
   }
   
   /*@ requires 0 <= op && op <= 4;
     @ {|
     @      requires op == 0;
     @      ensures \result[0] ==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' ||
     @		 	         c == 'O' || c == 'u' || c == 'U'); 
     @	    ensures \result[1];
     @ also
     @      requires op == 1;
     @      ensures \result[0] ==> ('A' <= c && c <= 'Z');
     @	    ensures \result[2];
     @ also
     @      requires op == 2;
     @      ensures \result[0] ==> ('a' <= c && c <= 'z');
     @	    ensures \result[3];
     @ also
     @      requires op == 3;
     @      ensures \result[0] ==> ('0' <= c && c <= '9');
     @	    ensures \result[4];
     @ also
     @      requires op == 4;
     @	    ensures \result[5];
     @ |} @*/
   public boolean[] driver(int op) 
   {
	boolean[] result = new boolean[6];
	switch (op) {
		case 0 :
		result[0] = isVowel();
		result[1] = getVowel_set();
		break;
		
		case 1 :
		result[0] = isUppercase();
		result[2] = getUppercase_set();
		break;

		case 2 :
		result[0] = isLowercase();
		result[3] = getLowercase_set();
		break;

		case 3 :
		result[0] = isDigit();
		result[4] = getDigit_set();
		break;

		default :
		result[0] = isAlphabetic();
		result[5] = getAlphabetic_set();
		break;
	}
	return result;
   }
}",Buggy
"public class Alphabet {
   private boolean vowel_set = false;
   private boolean vowel;
   /*@ private invariant vowel_set ==> 
                     (vowel == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
                               || c == 'i' || c == 'I' || c == 'o'
			       || c == 'O' || c == 'u' || c == 'U')); @*/

   private boolean alphabetic_set = false;
   private boolean alphabetic;
   //@ private invariant alphabetic_set ==> alphabetic == (('a' <= c && c <= 'z')||('A' <= c && c <='Z'));
   private boolean digit_set = false;
   private boolean digit;
   //@ private invariant digit_set ==> digit == ('0' <= c && c <= '9');
   private boolean uppercase_set = false;
   private boolean uppercase;
   //@ private invariant uppercase_set ==> (uppercase == ('A' <= c && c <= 'Z'));
   private boolean lowercase_set = false;
   private boolean lowercase;
   //@ private invariant lowercase_set ==> (lowercase == ('a' <= c && c <= 'z'));

   private /*@ spec_public @*/ final char c;

   /*@ private normal_behavior
     @   ensures !vowel_set && !alphabetic_set && !digit_set;
     @   ensures !uppercase_set && !lowercase_set;
     @ public normal_behavior
     @   ensures this.c == c; @*/
   public /*@ pure @*/ Alphabet(char c) 
   {
	this.c = c;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set && \result == vowel;
     @ public normal_behavior
     @   	ensures \result == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @    	                      || c == 'i' || c == 'I' || c == 'o'
     @				      || c == 'O' || c == 'u' || c == 'U'); @*/
   public boolean isVowel() 
   {
       setVowel();
       return vowel;
   }

   /*@ private normal_behavior
     @   assignable alphabetic_set, alphabetic;
     @   ensures alphabetic_set && \result == alphabetic; 
     @ public normal_behavior
     @   ensures \result == ('a' <= c && c <= 'z')||('A' <= c && c <='Z'); @*/
   public boolean isAlphabetic() 
   {
	setAlphabetic();
	return alphabetic;
   }

   /*@ private normal_behavior
     @   assignable uppercase_set, uppercase;
     @   ensures uppercase_set && \result == uppercase; 
     @ public normal_behavior
     @   ensures \result == ('A' <= c && c <= 'Z'); @*/
   public boolean isUppercase() 
   {
	setUppercase();
	return uppercase;
   }

   /*@ private normal_behavior
      @   assignable lowercase_set, lowercase;
      @   ensures lowercase_set && \result == lowercase; 
      @ public normal_behavior
      @   ensures \result == ('a' <= c && c <= 'z'); @*/
   public boolean isLowercase() 
   {
       setLowercase();
       return lowercase;
   }

   /*@ private normal_behavior
     @   assignable digit_set, digit;
     @   ensures digit_set && \result == digit; 
     @ public normal_behavior
     @   ensures \result == ('0' <= c && c <= '9'); @*/
   public boolean isDigit() 
   {
	setDigit();
	return digit;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set;
     @   ensures vowel <==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @                     	|| c == 'i' || c == 'I' || c == 'o'
     @	 	 	     	|| c == 'O' || c == 'u' || c == 'U'); @*/
   private /*@ spec_public @*/ void setVowel() 
   {
        vowel = false;
        switch (c) {
            case 'a' :
            case 'e' :
            case 'i' :
            case 'o' :
            case 'u' :
            case 'A' :
            case 'E' :
            case 'I' :
            case 'O' :
            case 'U' : vowel = true;
        }
        vowel_set = true;
   }

   /*@ private normal_behavior
     @    assignable alphabetic_set, alphabetic;
     @    ensures alphabetic_set;
     @    ensures alphabetic <==> ('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setAlphabetic() 
   {
	alphabetic = (('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'));		
	alphabetic_set = true;
   }

   /*@ private normal_behavior
     @    assignable uppercase_set, uppercase;
     @    ensures uppercase_set;
     @    ensures uppercase <==> ('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setUppercase() 
   {
	uppercase = ('A' < c && c <= 'Z'); // uppercase = ('A' <= c && c <= 'Z');		
	uppercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable lowercase_set, lowercase;
     @    ensures lowercase_set;
     @    ensures lowercase <==> ('a' <= c && c <= 'z'); @*/
   private /*@ spec_public @*/ void setLowercase() 
   {
       lowercase = ('a' <= c && c <= 'z');
       lowercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable digit_set, digit;
     @    ensures digit_set;
     @    ensures digit <==> ('0' <= c && c <= '9'); @*/
   private /*@ spec_public @*/ void setDigit() 
   {
	digit = ('0' <= c && c <= '9');	
	digit_set = true;
   }

   /*@ private normal_behavior
     @   ensures \result == alphabetic_set; @*/
   public /*@ pure @*/ boolean getAlphabetic_set()
   {
	return alphabetic_set;
   }

   /*@ private normal_behavior
     @   ensures \result == uppercase_set; @*/
   public /*@ pure @*/ boolean getUppercase_set()
   {
	return uppercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == lowercase_set; @*/
   public /*@ pure @*/ boolean getLowercase_set()
   {
	return lowercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == vowel_set; @*/
   public /*@ pure @*/ boolean getVowel_set()
   {
	return vowel_set;
   }

   /*@ private normal_behavior
     @   ensures \result == digit_set; @*/
   public /*@ pure @*/ boolean getDigit_set()
   {
	return digit_set;
   }
   
   /*@ requires 0 <= op && op <= 4;
     @ {|
     @      requires op == 0;
     @      ensures \result[0] ==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' ||
     @		 	         c == 'O' || c == 'u' || c == 'U'); 
     @	    ensures \result[1];
     @ also
     @      requires op == 1;
     @      ensures \result[0] ==> ('A' <= c && c <= 'Z');
     @	    ensures \result[2];
     @ also
     @      requires op == 2;
     @      ensures \result[0] ==> ('a' <= c && c <= 'z');
     @	    ensures \result[3];
     @ also
     @      requires op == 3;
     @      ensures \result[0] ==> ('0' <= c && c <= '9');
     @	    ensures \result[4];
     @ also
     @      requires op == 4;
     @	    ensures \result[5];
     @ |} @*/
   public boolean[] driver(int op) 
   {
	boolean[] result = new boolean[6];
	switch (op) {
		case 0 :
		result[0] = isVowel();
		result[1] = getVowel_set();
		break;
		
		case 1 :
		result[0] = isUppercase();
		result[2] = getUppercase_set();
		break;

		case 2 :
		result[0] = isLowercase();
		result[3] = getLowercase_set();
		break;

		case 3 :
		result[0] = isDigit();
		result[4] = getDigit_set();
		break;

		default :
		result[0] = isAlphabetic();
		result[5] = getAlphabetic_set();
		break;
	}
	return result;
   }
}",Buggy
"public class Alphabet {
   private boolean vowel_set = false;
   private boolean vowel;
   /*@ private invariant vowel_set ==> 
                     (vowel == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
                               || c == 'i' || c == 'I' || c == 'o'
			       || c == 'O' || c == 'u' || c == 'U')); @*/

   private boolean alphabetic_set = false;
   private boolean alphabetic;
   //@ private invariant alphabetic_set ==> alphabetic == (('a' <= c && c <= 'z')||('A' <= c && c <='Z'));
   private boolean digit_set = false;
   private boolean digit;
   //@ private invariant digit_set ==> digit == ('0' <= c && c <= '9');
   private boolean uppercase_set = false;
   private boolean uppercase;
   //@ private invariant uppercase_set ==> (uppercase == ('A' <= c && c <= 'Z'));
   private boolean lowercase_set = false;
   private boolean lowercase;
   //@ private invariant lowercase_set ==> (lowercase == ('a' <= c && c <= 'z'));

   private /*@ spec_public @*/ final char c;

   /*@ private normal_behavior
     @   ensures !vowel_set && !alphabetic_set && !digit_set;
     @   ensures !uppercase_set && !lowercase_set;
     @ public normal_behavior
     @   ensures this.c == c; @*/
   public /*@ pure @*/ Alphabet(char c) 
   {
	this.c = c;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set && \result == vowel;
     @ public normal_behavior
     @   	ensures \result == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @    	                      || c == 'i' || c == 'I' || c == 'o'
     @				      || c == 'O' || c == 'u' || c == 'U'); @*/
   public boolean isVowel() 
   {
       setVowel();
       return !vowel; // return vowel;
   }

   /*@ private normal_behavior
     @   assignable alphabetic_set, alphabetic;
     @   ensures alphabetic_set && \result == alphabetic; 
     @ public normal_behavior
     @   ensures \result == ('a' <= c && c <= 'z')||('A' <= c && c <='Z'); @*/
   public boolean isAlphabetic() 
   {
	setAlphabetic();
	return alphabetic;
   }

   /*@ private normal_behavior
     @   assignable uppercase_set, uppercase;
     @   ensures uppercase_set && \result == uppercase; 
     @ public normal_behavior
     @   ensures \result == ('A' <= c && c <= 'Z'); @*/
   public boolean isUppercase() 
   {
	setUppercase();
	return uppercase;
   }

   /*@ private normal_behavior
      @   assignable lowercase_set, lowercase;
      @   ensures lowercase_set && \result == lowercase; 
      @ public normal_behavior
      @   ensures \result == ('a' <= c && c <= 'z'); @*/
   public boolean isLowercase() 
   {
       setLowercase();
       return lowercase;
   }

   /*@ private normal_behavior
     @   assignable digit_set, digit;
     @   ensures digit_set && \result == digit; 
     @ public normal_behavior
     @   ensures \result == ('0' <= c && c <= '9'); @*/
   public boolean isDigit() 
   {
	setDigit();
	return digit;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set;
     @   ensures vowel <==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @                     	|| c == 'i' || c == 'I' || c == 'o'
     @	 	 	     	|| c == 'O' || c == 'u' || c == 'U'); @*/
   private /*@ spec_public @*/ void setVowel() 
   {
        vowel = false;
        switch (c) {
            case 'a' :
            case 'e' :
            case 'i' :
            case 'o' :
            case 'u' :
            case 'A' :
            case 'E' :
            case 'I' :
            case 'O' :
            case 'U' : vowel = true;
        }
        vowel_set = true;
   }

   /*@ private normal_behavior
     @    assignable alphabetic_set, alphabetic;
     @    ensures alphabetic_set;
     @    ensures alphabetic <==> ('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setAlphabetic() 
   {
	alphabetic = (('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'));		
	alphabetic_set = true;
   }

   /*@ private normal_behavior
     @    assignable uppercase_set, uppercase;
     @    ensures uppercase_set;
     @    ensures uppercase <==> ('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setUppercase() 
   {
	uppercase = ('A' <= c && c <= 'Z');		
	uppercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable lowercase_set, lowercase;
     @    ensures lowercase_set;
     @    ensures lowercase <==> ('a' <= c && c <= 'z'); @*/
   private /*@ spec_public @*/ void setLowercase() 
   {
       lowercase = ('a' <= c && c <= 'z');
       lowercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable digit_set, digit;
     @    ensures digit_set;
     @    ensures digit <==> ('0' <= c && c <= '9'); @*/
   private /*@ spec_public @*/ void setDigit() 
   {
	digit = ('0' <= c && c <= '9');	
	digit_set = true;
   }

   /*@ private normal_behavior
     @   ensures \result == alphabetic_set; @*/
   public /*@ pure @*/ boolean getAlphabetic_set()
   {
	return alphabetic_set;
   }

   /*@ private normal_behavior
     @   ensures \result == uppercase_set; @*/
   public /*@ pure @*/ boolean getUppercase_set()
   {
	return uppercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == lowercase_set; @*/
   public /*@ pure @*/ boolean getLowercase_set()
   {
	return lowercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == vowel_set; @*/
   public /*@ pure @*/ boolean getVowel_set()
   {
	return vowel_set;
   }

   /*@ private normal_behavior
     @   ensures \result == digit_set; @*/
   public /*@ pure @*/ boolean getDigit_set()
   {
	return digit_set;
   }
   
   /*@ requires 0 <= op && op <= 4;
     @ {|
     @      requires op == 0;
     @      ensures \result[0] ==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' ||
     @		 	         c == 'O' || c == 'u' || c == 'U'); 
     @	    ensures \result[1];
     @ also
     @      requires op == 1;
     @      ensures \result[0] ==> ('A' <= c && c <= 'Z');
     @	    ensures \result[2];
     @ also
     @      requires op == 2;
     @      ensures \result[0] ==> ('a' <= c && c <= 'z');
     @	    ensures \result[3];
     @ also
     @      requires op == 3;
     @      ensures \result[0] ==> ('0' <= c && c <= '9');
     @	    ensures \result[4];
     @ also
     @      requires op == 4;
     @	    ensures \result[5];
     @ |} @*/
   public boolean[] driver(int op) 
   {
	boolean[] result = new boolean[6];
	switch (op) {
		case 0 :
		result[0] = isVowel();
		result[1] = getVowel_set();
		break;
		
		case 1 :
		result[0] = isUppercase();
		result[2] = getUppercase_set();
		break;

		case 2 :
		result[0] = isLowercase();
		result[3] = getLowercase_set();
		break;

		case 3 :
		result[0] = isDigit();
		result[4] = getDigit_set();
		break;

		default :
		result[0] = isAlphabetic();
		result[5] = getAlphabetic_set();
		break;
	}
	return result;
   }
}",Buggy
"public class Alphabet {
   private boolean vowel_set = false;
   private boolean vowel;
   /*@ private invariant vowel_set ==> 
                     (vowel == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
                               || c == 'i' || c == 'I' || c == 'o'
			       || c == 'O' || c == 'u' || c == 'U')); @*/

   private boolean alphabetic_set = false;
   private boolean alphabetic;
   //@ private invariant alphabetic_set ==> alphabetic == (('a' <= c && c <= 'z')||('A' <= c && c <='Z'));
   private boolean digit_set = false;
   private boolean digit;
   //@ private invariant digit_set ==> digit == ('0' <= c && c <= '9');
   private boolean uppercase_set = false;
   private boolean uppercase;
   //@ private invariant uppercase_set ==> (uppercase == ('A' <= c && c <= 'Z'));
   private boolean lowercase_set = false;
   private boolean lowercase;
   //@ private invariant lowercase_set ==> (lowercase == ('a' <= c && c <= 'z'));

   private /*@ spec_public @*/ final char c;

   /*@ private normal_behavior
     @   ensures !vowel_set && !alphabetic_set && !digit_set;
     @   ensures !uppercase_set && !lowercase_set;
     @ public normal_behavior
     @   ensures this.c == c; @*/
   public /*@ pure @*/ Alphabet(char c) 
   {
	this.c = c;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set && \result == vowel;
     @ public normal_behavior
     @   	ensures \result == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @    	                      || c == 'i' || c == 'I' || c == 'o'
     @				      || c == 'O' || c == 'u' || c == 'U'); @*/
   public boolean isVowel() 
   {
       setVowel();
       return vowel;
   }

   /*@ private normal_behavior
     @   assignable alphabetic_set, alphabetic;
     @   ensures alphabetic_set && \result == alphabetic; 
     @ public normal_behavior
     @   ensures \result == ('a' <= c && c <= 'z')||('A' <= c && c <='Z'); @*/
   public boolean isAlphabetic() 
   {
	setAlphabetic();
	return alphabetic;
   }

   /*@ private normal_behavior
     @   assignable uppercase_set, uppercase;
     @   ensures uppercase_set && \result == uppercase; 
     @ public normal_behavior
     @   ensures \result == ('A' <= c && c <= 'Z'); @*/
   public boolean isUppercase() 
   {
	setUppercase();
	return uppercase;
   }

   /*@ private normal_behavior
      @   assignable lowercase_set, lowercase;
      @   ensures lowercase_set && \result == lowercase; 
      @ public normal_behavior
      @   ensures \result == ('a' <= c && c <= 'z'); @*/
   public boolean isLowercase() 
   {
       setLowercase();
       return lowercase;
   }

   /*@ private normal_behavior
     @   assignable digit_set, digit;
     @   ensures digit_set && \result == digit; 
     @ public normal_behavior
     @   ensures \result == ('0' <= c && c <= '9'); @*/
   public boolean isDigit() 
   {
	setDigit();
	return digit;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set;
     @   ensures vowel <==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @                     	|| c == 'i' || c == 'I' || c == 'o'
     @	 	 	     	|| c == 'O' || c == 'u' || c == 'U'); @*/
   private /*@ spec_public @*/ void setVowel() 
   {
        vowel = false;
        switch (c) {
            case 'a' :
            case 'e' :
            case 'i' :
            case 'o' :
            case 'u' :
            case 'A' :
            case 'E' :
            case 'I' :
            case 'O' :
            case 'U' : vowel = true;
        }
        vowel_set = true;
   }

   /*@ private normal_behavior
     @    assignable alphabetic_set, alphabetic;
     @    ensures alphabetic_set;
     @    ensures alphabetic <==> ('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setAlphabetic() 
   {
	alphabetic = (('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'));		
	alphabetic_set = true;
   }

   /*@ private normal_behavior
     @    assignable uppercase_set, uppercase;
     @    ensures uppercase_set;
     @    ensures uppercase <==> ('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setUppercase() 
   {
	uppercase = ('A' <= c && c < 'Z'); // uppercase = ('A' <= c && c <= 'Z');		
	uppercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable lowercase_set, lowercase;
     @    ensures lowercase_set;
     @    ensures lowercase <==> ('a' <= c && c <= 'z'); @*/
   private /*@ spec_public @*/ void setLowercase() 
   {
       lowercase = ('a' <= c && c <= 'z');
       lowercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable digit_set, digit;
     @    ensures digit_set;
     @    ensures digit <==> ('0' <= c && c <= '9'); @*/
   private /*@ spec_public @*/ void setDigit() 
   {
	digit = ('0' <= c && c <= '9');	
	digit_set = true;
   }

   /*@ private normal_behavior
     @   ensures \result == alphabetic_set; @*/
   public /*@ pure @*/ boolean getAlphabetic_set()
   {
	return alphabetic_set;
   }

   /*@ private normal_behavior
     @   ensures \result == uppercase_set; @*/
   public /*@ pure @*/ boolean getUppercase_set()
   {
	return uppercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == lowercase_set; @*/
   public /*@ pure @*/ boolean getLowercase_set()
   {
	return lowercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == vowel_set; @*/
   public /*@ pure @*/ boolean getVowel_set()
   {
	return vowel_set;
   }

   /*@ private normal_behavior
     @   ensures \result == digit_set; @*/
   public /*@ pure @*/ boolean getDigit_set()
   {
	return digit_set;
   }
   
   /*@ requires 0 <= op && op <= 4;
     @ {|
     @      requires op == 0;
     @      ensures \result[0] ==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' ||
     @		 	         c == 'O' || c == 'u' || c == 'U'); 
     @	    ensures \result[1];
     @ also
     @      requires op == 1;
     @      ensures \result[0] ==> ('A' <= c && c <= 'Z');
     @	    ensures \result[2];
     @ also
     @      requires op == 2;
     @      ensures \result[0] ==> ('a' <= c && c <= 'z');
     @	    ensures \result[3];
     @ also
     @      requires op == 3;
     @      ensures \result[0] ==> ('0' <= c && c <= '9');
     @	    ensures \result[4];
     @ also
     @      requires op == 4;
     @	    ensures \result[5];
     @ |} @*/
   public boolean[] driver(int op) 
   {
	boolean[] result = new boolean[6];
	switch (op) {
		case 0 :
		result[0] = isVowel();
		result[1] = getVowel_set();
		break;
		
		case 1 :
		result[0] = isUppercase();
		result[2] = getUppercase_set();
		break;

		case 2 :
		result[0] = isLowercase();
		result[3] = getLowercase_set();
		break;

		case 3 :
		result[0] = isDigit();
		result[4] = getDigit_set();
		break;

		default :
		result[0] = isAlphabetic();
		result[5] = getAlphabetic_set();
		break;
	}
	return result;
   }
}",Buggy
"public class Alphabet {
   private boolean vowel_set = false;
   private boolean vowel;
   /*@ private invariant vowel_set ==> 
                     (vowel == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
                               || c == 'i' || c == 'I' || c == 'o'
			       || c == 'O' || c == 'u' || c == 'U')); @*/

   private boolean alphabetic_set = false;
   private boolean alphabetic;
   //@ private invariant alphabetic_set ==> alphabetic == (('a' <= c && c <= 'z')||('A' <= c && c <='Z'));
   private boolean digit_set = false;
   private boolean digit;
   //@ private invariant digit_set ==> digit == ('0' <= c && c <= '9');
   private boolean uppercase_set = false;
   private boolean uppercase;
   //@ private invariant uppercase_set ==> (uppercase == ('A' <= c && c <= 'Z'));
   private boolean lowercase_set = false;
   private boolean lowercase;
   //@ private invariant lowercase_set ==> (lowercase == ('a' <= c && c <= 'z'));

   private /*@ spec_public @*/ final char c;

   /*@ private normal_behavior
     @   ensures !vowel_set && !alphabetic_set && !digit_set;
     @   ensures !uppercase_set && !lowercase_set;
     @ public normal_behavior
     @   ensures this.c == c; @*/
   public /*@ pure @*/ Alphabet(char c) 
   {
	this.c = c;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set && \result == vowel;
     @ public normal_behavior
     @   	ensures \result == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @    	                      || c == 'i' || c == 'I' || c == 'o'
     @				      || c == 'O' || c == 'u' || c == 'U'); @*/
   public boolean isVowel() 
   {
       setVowel();
       return vowel;
   }

   /*@ private normal_behavior
     @   assignable alphabetic_set, alphabetic;
     @   ensures alphabetic_set && \result == alphabetic; 
     @ public normal_behavior
     @   ensures \result == ('a' <= c && c <= 'z')||('A' <= c && c <='Z'); @*/
   public boolean isAlphabetic() 
   {
	setAlphabetic();
	return alphabetic;
   }

   /*@ private normal_behavior
     @   assignable uppercase_set, uppercase;
     @   ensures uppercase_set && \result == uppercase; 
     @ public normal_behavior
     @   ensures \result == ('A' <= c && c <= 'Z'); @*/
   public boolean isUppercase() 
   {
	setUppercase();
	return uppercase;
   }

   /*@ private normal_behavior
      @   assignable lowercase_set, lowercase;
      @   ensures lowercase_set && \result == lowercase; 
      @ public normal_behavior
      @   ensures \result == ('a' <= c && c <= 'z'); @*/
   public boolean isLowercase() 
   {
       setLowercase();
       return lowercase;
   }

   /*@ private normal_behavior
     @   assignable digit_set, digit;
     @   ensures digit_set && \result == digit; 
     @ public normal_behavior
     @   ensures \result == ('0' <= c && c <= '9'); @*/
   public boolean isDigit() 
   {
	setDigit();
	return digit;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set;
     @   ensures vowel <==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @                     	|| c == 'i' || c == 'I' || c == 'o'
     @	 	 	     	|| c == 'O' || c == 'u' || c == 'U'); @*/
   private /*@ spec_public @*/ void setVowel() 
   {
        vowel = false;
        switch (c) {
            case 'a' :
            case 'e' :
            case 'i' :
            case 'o' :
            case 'u' :
            case 'A' :
            case 'E' :
            case 'I' :
            case 'O' :
            case 'U' : vowel = true;
        }
        vowel_set = true;
   }

   /*@ private normal_behavior
     @    assignable alphabetic_set, alphabetic;
     @    ensures alphabetic_set;
     @    ensures alphabetic <==> ('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setAlphabetic() 
   {
	alphabetic = (('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'));		
	alphabetic_set = true;
   }

   /*@ private normal_behavior
     @    assignable uppercase_set, uppercase;
     @    ensures uppercase_set;
     @    ensures uppercase <==> ('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setUppercase() 
   {
	uppercase = ('A' > c && c <= 'Z'); // uppercase = ('A' <= c && c <= 'Z');		
	uppercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable lowercase_set, lowercase;
     @    ensures lowercase_set;
     @    ensures lowercase <==> ('a' <= c && c <= 'z'); @*/
   private /*@ spec_public @*/ void setLowercase() 
   {
       lowercase = ('a' <= c && c <= 'z');
       lowercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable digit_set, digit;
     @    ensures digit_set;
     @    ensures digit <==> ('0' <= c && c <= '9'); @*/
   private /*@ spec_public @*/ void setDigit() 
   {
	digit = ('0' <= c && c <= '9');	
	digit_set = true;
   }

   /*@ private normal_behavior
     @   ensures \result == alphabetic_set; @*/
   public /*@ pure @*/ boolean getAlphabetic_set()
   {
	return alphabetic_set;
   }

   /*@ private normal_behavior
     @   ensures \result == uppercase_set; @*/
   public /*@ pure @*/ boolean getUppercase_set()
   {
	return uppercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == lowercase_set; @*/
   public /*@ pure @*/ boolean getLowercase_set()
   {
	return lowercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == vowel_set; @*/
   public /*@ pure @*/ boolean getVowel_set()
   {
	return vowel_set;
   }

   /*@ private normal_behavior
     @   ensures \result == digit_set; @*/
   public /*@ pure @*/ boolean getDigit_set()
   {
	return digit_set;
   }
   
   /*@ requires 0 <= op && op <= 4;
     @ {|
     @      requires op == 0;
     @      ensures \result[0] ==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' ||
     @		 	         c == 'O' || c == 'u' || c == 'U'); 
     @	    ensures \result[1];
     @ also
     @      requires op == 1;
     @      ensures \result[0] ==> ('A' <= c && c <= 'Z');
     @	    ensures \result[2];
     @ also
     @      requires op == 2;
     @      ensures \result[0] ==> ('a' <= c && c <= 'z');
     @	    ensures \result[3];
     @ also
     @      requires op == 3;
     @      ensures \result[0] ==> ('0' <= c && c <= '9');
     @	    ensures \result[4];
     @ also
     @      requires op == 4;
     @	    ensures \result[5];
     @ |} @*/
   public boolean[] driver(int op) 
   {
	boolean[] result = new boolean[6];
	switch (op) {
		case 0 :
		result[0] = isVowel();
		result[1] = getVowel_set();
		break;
		
		case 1 :
		result[0] = isUppercase();
		result[2] = getUppercase_set();
		break;

		case 2 :
		result[0] = isLowercase();
		result[3] = getLowercase_set();
		break;

		case 3 :
		result[0] = isDigit();
		result[4] = getDigit_set();
		break;

		default :
		result[0] = isAlphabetic();
		result[5] = getAlphabetic_set();
		break;
	}
	return result;
   }
}",Buggy
"public class Alphabet {
   private boolean vowel_set = false;
   private boolean vowel;
   /*@ private invariant vowel_set ==> 
                     (vowel == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
                               || c == 'i' || c == 'I' || c == 'o'
			       || c == 'O' || c == 'u' || c == 'U')); @*/

   private boolean alphabetic_set = false;
   private boolean alphabetic;
   //@ private invariant alphabetic_set ==> alphabetic == (('a' <= c && c <= 'z')||('A' <= c && c <='Z'));
   private boolean digit_set = false;
   private boolean digit;
   //@ private invariant digit_set ==> digit == ('0' <= c && c <= '9');
   private boolean uppercase_set = false;
   private boolean uppercase;
   //@ private invariant uppercase_set ==> (uppercase == ('A' <= c && c <= 'Z'));
   private boolean lowercase_set = false;
   private boolean lowercase;
   //@ private invariant lowercase_set ==> (lowercase == ('a' <= c && c <= 'z'));

   private /*@ spec_public @*/ final char c;

   /*@ private normal_behavior
     @   ensures !vowel_set && !alphabetic_set && !digit_set;
     @   ensures !uppercase_set && !lowercase_set;
     @ public normal_behavior
     @   ensures this.c == c; @*/
   public /*@ pure @*/ Alphabet(char c) 
   {
	this.c = c;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set && \result == vowel;
     @ public normal_behavior
     @   	ensures \result == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @    	                      || c == 'i' || c == 'I' || c == 'o'
     @				      || c == 'O' || c == 'u' || c == 'U'); @*/
   public boolean isVowel() 
   {
       setVowel();
       return vowel;
   }

   /*@ private normal_behavior
     @   assignable alphabetic_set, alphabetic;
     @   ensures alphabetic_set && \result == alphabetic; 
     @ public normal_behavior
     @   ensures \result == ('a' <= c && c <= 'z')||('A' <= c && c <='Z'); @*/
   public boolean isAlphabetic() 
   {
	setAlphabetic();
	return alphabetic;
   }

   /*@ private normal_behavior
     @   assignable uppercase_set, uppercase;
     @   ensures uppercase_set && \result == uppercase; 
     @ public normal_behavior
     @   ensures \result == ('A' <= c && c <= 'Z'); @*/
   public boolean isUppercase() 
   {
	setUppercase();
	return uppercase;
   }

   /*@ private normal_behavior
      @   assignable lowercase_set, lowercase;
      @   ensures lowercase_set && \result == lowercase; 
      @ public normal_behavior
      @   ensures \result == ('a' <= c && c <= 'z'); @*/
   public boolean isLowercase() 
   {
       setLowercase();
       return lowercase;
   }

   /*@ private normal_behavior
     @   assignable digit_set, digit;
     @   ensures digit_set && \result == digit; 
     @ public normal_behavior
     @   ensures \result == ('0' <= c && c <= '9'); @*/
   public boolean isDigit() 
   {
	setDigit();
	return digit;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set;
     @   ensures vowel <==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @                     	|| c == 'i' || c == 'I' || c == 'o'
     @	 	 	     	|| c == 'O' || c == 'u' || c == 'U'); @*/
   private /*@ spec_public @*/ void setVowel() 
   {
        vowel = false;
        switch (c) {
            case 'a' :
            case 'e' :
            case 'i' :
            case 'o' :
            case 'u' :
            case 'A' :
            case 'E' :
            case 'I' :
            case 'O' :
            case 'U' : vowel = true;
        }
        vowel_set = true;
   }

   /*@ private normal_behavior
     @    assignable alphabetic_set, alphabetic;
     @    ensures alphabetic_set;
     @    ensures alphabetic <==> ('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setAlphabetic() 
   {
	alphabetic = (('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'));		
	alphabetic_set = true;
   }

   /*@ private normal_behavior
     @    assignable uppercase_set, uppercase;
     @    ensures uppercase_set;
     @    ensures uppercase <==> ('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setUppercase() 
   {
	uppercase = ('A' <= c && c > 'Z'); // uppercase = ('A' <= c && c <= 'Z');		
	uppercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable lowercase_set, lowercase;
     @    ensures lowercase_set;
     @    ensures lowercase <==> ('a' <= c && c <= 'z'); @*/
   private /*@ spec_public @*/ void setLowercase() 
   {
       lowercase = ('a' <= c && c <= 'z');
       lowercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable digit_set, digit;
     @    ensures digit_set;
     @    ensures digit <==> ('0' <= c && c <= '9'); @*/
   private /*@ spec_public @*/ void setDigit() 
   {
	digit = ('0' <= c && c <= '9');	
	digit_set = true;
   }

   /*@ private normal_behavior
     @   ensures \result == alphabetic_set; @*/
   public /*@ pure @*/ boolean getAlphabetic_set()
   {
	return alphabetic_set;
   }

   /*@ private normal_behavior
     @   ensures \result == uppercase_set; @*/
   public /*@ pure @*/ boolean getUppercase_set()
   {
	return uppercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == lowercase_set; @*/
   public /*@ pure @*/ boolean getLowercase_set()
   {
	return lowercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == vowel_set; @*/
   public /*@ pure @*/ boolean getVowel_set()
   {
	return vowel_set;
   }

   /*@ private normal_behavior
     @   ensures \result == digit_set; @*/
   public /*@ pure @*/ boolean getDigit_set()
   {
	return digit_set;
   }
   
   /*@ requires 0 <= op && op <= 4;
     @ {|
     @      requires op == 0;
     @      ensures \result[0] ==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' ||
     @		 	         c == 'O' || c == 'u' || c == 'U'); 
     @	    ensures \result[1];
     @ also
     @      requires op == 1;
     @      ensures \result[0] ==> ('A' <= c && c <= 'Z');
     @	    ensures \result[2];
     @ also
     @      requires op == 2;
     @      ensures \result[0] ==> ('a' <= c && c <= 'z');
     @	    ensures \result[3];
     @ also
     @      requires op == 3;
     @      ensures \result[0] ==> ('0' <= c && c <= '9');
     @	    ensures \result[4];
     @ also
     @      requires op == 4;
     @	    ensures \result[5];
     @ |} @*/
   public boolean[] driver(int op) 
   {
	boolean[] result = new boolean[6];
	switch (op) {
		case 0 :
		result[0] = isVowel();
		result[1] = getVowel_set();
		break;
		
		case 1 :
		result[0] = isUppercase();
		result[2] = getUppercase_set();
		break;

		case 2 :
		result[0] = isLowercase();
		result[3] = getLowercase_set();
		break;

		case 3 :
		result[0] = isDigit();
		result[4] = getDigit_set();
		break;

		default :
		result[0] = isAlphabetic();
		result[5] = getAlphabetic_set();
		break;
	}
	return result;
   }
}",Buggy
"public class Alphabet {
   private boolean vowel_set = false;
   private boolean vowel;
   /*@ private invariant vowel_set ==> 
                     (vowel == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
                               || c == 'i' || c == 'I' || c == 'o'
			       || c == 'O' || c == 'u' || c == 'U')); @*/

   private boolean alphabetic_set = false;
   private boolean alphabetic;
   //@ private invariant alphabetic_set ==> alphabetic == (('a' <= c && c <= 'z')||('A' <= c && c <='Z'));
   private boolean digit_set = false;
   private boolean digit;
   //@ private invariant digit_set ==> digit == ('0' <= c && c <= '9');
   private boolean uppercase_set = false;
   private boolean uppercase;
   //@ private invariant uppercase_set ==> (uppercase == ('A' <= c && c <= 'Z'));
   private boolean lowercase_set = false;
   private boolean lowercase;
   //@ private invariant lowercase_set ==> (lowercase == ('a' <= c && c <= 'z'));

   private /*@ spec_public @*/ final char c;

   /*@ private normal_behavior
     @   ensures !vowel_set && !alphabetic_set && !digit_set;
     @   ensures !uppercase_set && !lowercase_set;
     @ public normal_behavior
     @   ensures this.c == c; @*/
   public /*@ pure @*/ Alphabet(char c) 
   {
	this.c = c;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set && \result == vowel;
     @ public normal_behavior
     @   	ensures \result == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @    	                      || c == 'i' || c == 'I' || c == 'o'
     @				      || c == 'O' || c == 'u' || c == 'U'); @*/
   public boolean isVowel() 
   {
       setVowel();
       return vowel;
   }

   /*@ private normal_behavior
     @   assignable alphabetic_set, alphabetic;
     @   ensures alphabetic_set && \result == alphabetic; 
     @ public normal_behavior
     @   ensures \result == ('a' <= c && c <= 'z')||('A' <= c && c <='Z'); @*/
   public boolean isAlphabetic() 
   {
	setAlphabetic();
	return alphabetic;
   }

   /*@ private normal_behavior
     @   assignable uppercase_set, uppercase;
     @   ensures uppercase_set && \result == uppercase; 
     @ public normal_behavior
     @   ensures \result == ('A' <= c && c <= 'Z'); @*/
   public boolean isUppercase() 
   {
	setUppercase();
	return uppercase;
   }

   /*@ private normal_behavior
      @   assignable lowercase_set, lowercase;
      @   ensures lowercase_set && \result == lowercase; 
      @ public normal_behavior
      @   ensures \result == ('a' <= c && c <= 'z'); @*/
   public boolean isLowercase() 
   {
       setLowercase();
       return lowercase;
   }

   /*@ private normal_behavior
     @   assignable digit_set, digit;
     @   ensures digit_set && \result == digit; 
     @ public normal_behavior
     @   ensures \result == ('0' <= c && c <= '9'); @*/
   public boolean isDigit() 
   {
	setDigit();
	return digit;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set;
     @   ensures vowel <==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @                     	|| c == 'i' || c == 'I' || c == 'o'
     @	 	 	     	|| c == 'O' || c == 'u' || c == 'U'); @*/
   private /*@ spec_public @*/ void setVowel() 
   {
        vowel = false;
        switch (c) {
            case 'a' :
            case 'e' :
            case 'i' :
            case 'o' :
            case 'u' :
            case 'A' :
            case 'E' :
            case 'I' :
            case 'O' :
            case 'U' : vowel = true;
        }
        vowel_set = true;
   }

   /*@ private normal_behavior
     @    assignable alphabetic_set, alphabetic;
     @    ensures alphabetic_set;
     @    ensures alphabetic <==> ('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setAlphabetic() 
   {
	alphabetic = (('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'));		
	alphabetic_set = true;
   }

   /*@ private normal_behavior
     @    assignable uppercase_set, uppercase;
     @    ensures uppercase_set;
     @    ensures uppercase <==> ('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setUppercase() 
   {
	uppercase = ('A' <= c && c <= 'Z');		
	uppercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable lowercase_set, lowercase;
     @    ensures lowercase_set;
     @    ensures lowercase <==> ('a' <= c && c <= 'z'); @*/
   private /*@ spec_public @*/ void setLowercase() 
   {
       lowercase = ('a' < c && c <= 'z'); //  lowercase = ('a' <= c && c <= 'z');
       lowercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable digit_set, digit;
     @    ensures digit_set;
     @    ensures digit <==> ('0' <= c && c <= '9'); @*/
   private /*@ spec_public @*/ void setDigit() 
   {
	digit = ('0' <= c && c <= '9');	
	digit_set = true;
   }

   /*@ private normal_behavior
     @   ensures \result == alphabetic_set; @*/
   public /*@ pure @*/ boolean getAlphabetic_set()
   {
	return alphabetic_set;
   }

   /*@ private normal_behavior
     @   ensures \result == uppercase_set; @*/
   public /*@ pure @*/ boolean getUppercase_set()
   {
	return uppercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == lowercase_set; @*/
   public /*@ pure @*/ boolean getLowercase_set()
   {
	return lowercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == vowel_set; @*/
   public /*@ pure @*/ boolean getVowel_set()
   {
	return vowel_set;
   }

   /*@ private normal_behavior
     @   ensures \result == digit_set; @*/
   public /*@ pure @*/ boolean getDigit_set()
   {
	return digit_set;
   }
   
   /*@ requires 0 <= op && op <= 4;
     @ {|
     @      requires op == 0;
     @      ensures \result[0] ==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' ||
     @		 	         c == 'O' || c == 'u' || c == 'U'); 
     @	    ensures \result[1];
     @ also
     @      requires op == 1;
     @      ensures \result[0] ==> ('A' <= c && c <= 'Z');
     @	    ensures \result[2];
     @ also
     @      requires op == 2;
     @      ensures \result[0] ==> ('a' <= c && c <= 'z');
     @	    ensures \result[3];
     @ also
     @      requires op == 3;
     @      ensures \result[0] ==> ('0' <= c && c <= '9');
     @	    ensures \result[4];
     @ also
     @      requires op == 4;
     @	    ensures \result[5];
     @ |} @*/
   public boolean[] driver(int op) 
   {
	boolean[] result = new boolean[6];
	switch (op) {
		case 0 :
		result[0] = isVowel();
		result[1] = getVowel_set();
		break;
		
		case 1 :
		result[0] = isUppercase();
		result[2] = getUppercase_set();
		break;

		case 2 :
		result[0] = isLowercase();
		result[3] = getLowercase_set();
		break;

		case 3 :
		result[0] = isDigit();
		result[4] = getDigit_set();
		break;

		default :
		result[0] = isAlphabetic();
		result[5] = getAlphabetic_set();
		break;
	}
	return result;
   }
}",Buggy
"public class Alphabet {
   private boolean vowel_set = false;
   private boolean vowel;
   /*@ private invariant vowel_set ==> 
                     (vowel == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
                               || c == 'i' || c == 'I' || c == 'o'
			       || c == 'O' || c == 'u' || c == 'U')); @*/

   private boolean alphabetic_set = false;
   private boolean alphabetic;
   //@ private invariant alphabetic_set ==> alphabetic == (('a' <= c && c <= 'z')||('A' <= c && c <='Z'));
   private boolean digit_set = false;
   private boolean digit;
   //@ private invariant digit_set ==> digit == ('0' <= c && c <= '9');
   private boolean uppercase_set = false;
   private boolean uppercase;
   //@ private invariant uppercase_set ==> (uppercase == ('A' <= c && c <= 'Z'));
   private boolean lowercase_set = false;
   private boolean lowercase;
   //@ private invariant lowercase_set ==> (lowercase == ('a' <= c && c <= 'z'));

   private /*@ spec_public @*/ final char c;

   /*@ private normal_behavior
     @   ensures !vowel_set && !alphabetic_set && !digit_set;
     @   ensures !uppercase_set && !lowercase_set;
     @ public normal_behavior
     @   ensures this.c == c; @*/
   public /*@ pure @*/ Alphabet(char c) 
   {
	this.c = c;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set && \result == vowel;
     @ public normal_behavior
     @   	ensures \result == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @    	                      || c == 'i' || c == 'I' || c == 'o'
     @				      || c == 'O' || c == 'u' || c == 'U'); @*/
   public boolean isVowel() 
   {
       setVowel();
       return vowel;
   }

   /*@ private normal_behavior
     @   assignable alphabetic_set, alphabetic;
     @   ensures alphabetic_set && \result == alphabetic; 
     @ public normal_behavior
     @   ensures \result == ('a' <= c && c <= 'z')||('A' <= c && c <='Z'); @*/
   public boolean isAlphabetic() 
   {
	setAlphabetic();
	return alphabetic;
   }

   /*@ private normal_behavior
     @   assignable uppercase_set, uppercase;
     @   ensures uppercase_set && \result == uppercase; 
     @ public normal_behavior
     @   ensures \result == ('A' <= c && c <= 'Z'); @*/
   public boolean isUppercase() 
   {
	setUppercase();
	return uppercase;
   }

   /*@ private normal_behavior
      @   assignable lowercase_set, lowercase;
      @   ensures lowercase_set && \result == lowercase; 
      @ public normal_behavior
      @   ensures \result == ('a' <= c && c <= 'z'); @*/
   public boolean isLowercase() 
   {
       setLowercase();
       return lowercase;
   }

   /*@ private normal_behavior
     @   assignable digit_set, digit;
     @   ensures digit_set && \result == digit; 
     @ public normal_behavior
     @   ensures \result == ('0' <= c && c <= '9'); @*/
   public boolean isDigit() 
   {
	setDigit();
	return digit;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set;
     @   ensures vowel <==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @                     	|| c == 'i' || c == 'I' || c == 'o'
     @	 	 	     	|| c == 'O' || c == 'u' || c == 'U'); @*/
   private /*@ spec_public @*/ void setVowel() 
   {
        vowel = false;
        switch (c) {
            case 'a' :
            case 'e' :
            case 'i' :
            case 'o' :
            case 'u' :
            case 'A' :
            case 'E' :
            case 'I' :
            case 'O' :
            case 'U' : vowel = true;
        }
        vowel_set = true;
   }

   /*@ private normal_behavior
     @    assignable alphabetic_set, alphabetic;
     @    ensures alphabetic_set;
     @    ensures alphabetic <==> ('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setAlphabetic() 
   {
	alphabetic = (('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'));		
	alphabetic_set = true;
   }

   /*@ private normal_behavior
     @    assignable uppercase_set, uppercase;
     @    ensures uppercase_set;
     @    ensures uppercase <==> ('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setUppercase() 
   {
	uppercase = ('A' <= c && c <= 'Z');		
	uppercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable lowercase_set, lowercase;
     @    ensures lowercase_set;
     @    ensures lowercase <==> ('a' <= c && c <= 'z'); @*/
   private /*@ spec_public @*/ void setLowercase() 
   {
       lowercase = ('a' <= c && c < 'z'); // lowercase = ('a' <= c && c <= 'z');
       lowercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable digit_set, digit;
     @    ensures digit_set;
     @    ensures digit <==> ('0' <= c && c <= '9'); @*/
   private /*@ spec_public @*/ void setDigit() 
   {
	digit = ('0' <= c && c <= '9');	
	digit_set = true;
   }

   /*@ private normal_behavior
     @   ensures \result == alphabetic_set; @*/
   public /*@ pure @*/ boolean getAlphabetic_set()
   {
	return alphabetic_set;
   }

   /*@ private normal_behavior
     @   ensures \result == uppercase_set; @*/
   public /*@ pure @*/ boolean getUppercase_set()
   {
	return uppercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == lowercase_set; @*/
   public /*@ pure @*/ boolean getLowercase_set()
   {
	return lowercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == vowel_set; @*/
   public /*@ pure @*/ boolean getVowel_set()
   {
	return vowel_set;
   }

   /*@ private normal_behavior
     @   ensures \result == digit_set; @*/
   public /*@ pure @*/ boolean getDigit_set()
   {
	return digit_set;
   }
   
   /*@ requires 0 <= op && op <= 4;
     @ {|
     @      requires op == 0;
     @      ensures \result[0] ==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' ||
     @		 	         c == 'O' || c == 'u' || c == 'U'); 
     @	    ensures \result[1];
     @ also
     @      requires op == 1;
     @      ensures \result[0] ==> ('A' <= c && c <= 'Z');
     @	    ensures \result[2];
     @ also
     @      requires op == 2;
     @      ensures \result[0] ==> ('a' <= c && c <= 'z');
     @	    ensures \result[3];
     @ also
     @      requires op == 3;
     @      ensures \result[0] ==> ('0' <= c && c <= '9');
     @	    ensures \result[4];
     @ also
     @      requires op == 4;
     @	    ensures \result[5];
     @ |} @*/
   public boolean[] driver(int op) 
   {
	boolean[] result = new boolean[6];
	switch (op) {
		case 0 :
		result[0] = isVowel();
		result[1] = getVowel_set();
		break;
		
		case 1 :
		result[0] = isUppercase();
		result[2] = getUppercase_set();
		break;

		case 2 :
		result[0] = isLowercase();
		result[3] = getLowercase_set();
		break;

		case 3 :
		result[0] = isDigit();
		result[4] = getDigit_set();
		break;

		default :
		result[0] = isAlphabetic();
		result[5] = getAlphabetic_set();
		break;
	}
	return result;
   }
}",Buggy
"public class Alphabet {
   private boolean vowel_set = false;
   private boolean vowel;
   /*@ private invariant vowel_set ==> 
                     (vowel == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
                               || c == 'i' || c == 'I' || c == 'o'
			       || c == 'O' || c == 'u' || c == 'U')); @*/

   private boolean alphabetic_set = false;
   private boolean alphabetic;
   //@ private invariant alphabetic_set ==> alphabetic == (('a' <= c && c <= 'z')||('A' <= c && c <='Z'));
   private boolean digit_set = false;
   private boolean digit;
   //@ private invariant digit_set ==> digit == ('0' <= c && c <= '9');
   private boolean uppercase_set = false;
   private boolean uppercase;
   //@ private invariant uppercase_set ==> (uppercase == ('A' <= c && c <= 'Z'));
   private boolean lowercase_set = false;
   private boolean lowercase;
   //@ private invariant lowercase_set ==> (lowercase == ('a' <= c && c <= 'z'));

   private /*@ spec_public @*/ final char c;

   /*@ private normal_behavior
     @   ensures !vowel_set && !alphabetic_set && !digit_set;
     @   ensures !uppercase_set && !lowercase_set;
     @ public normal_behavior
     @   ensures this.c == c; @*/
   public /*@ pure @*/ Alphabet(char c) 
   {
	this.c = c;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set && \result == vowel;
     @ public normal_behavior
     @   	ensures \result == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @    	                      || c == 'i' || c == 'I' || c == 'o'
     @				      || c == 'O' || c == 'u' || c == 'U'); @*/
   public boolean isVowel() 
   {
       setVowel();
       return vowel;
   }

   /*@ private normal_behavior
     @   assignable alphabetic_set, alphabetic;
     @   ensures alphabetic_set && \result == alphabetic; 
     @ public normal_behavior
     @   ensures \result == ('a' <= c && c <= 'z')||('A' <= c && c <='Z'); @*/
   public boolean isAlphabetic() 
   {
	setAlphabetic();
	return alphabetic;
   }

   /*@ private normal_behavior
     @   assignable uppercase_set, uppercase;
     @   ensures uppercase_set && \result == uppercase; 
     @ public normal_behavior
     @   ensures \result == ('A' <= c && c <= 'Z'); @*/
   public boolean isUppercase() 
   {
	setUppercase();
	return uppercase;
   }

   /*@ private normal_behavior
      @   assignable lowercase_set, lowercase;
      @   ensures lowercase_set && \result == lowercase; 
      @ public normal_behavior
      @   ensures \result == ('a' <= c && c <= 'z'); @*/
   public boolean isLowercase() 
   {
       setLowercase();
       return lowercase;
   }

   /*@ private normal_behavior
     @   assignable digit_set, digit;
     @   ensures digit_set && \result == digit; 
     @ public normal_behavior
     @   ensures \result == ('0' <= c && c <= '9'); @*/
   public boolean isDigit() 
   {
	setDigit();
	return digit;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set;
     @   ensures vowel <==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @                     	|| c == 'i' || c == 'I' || c == 'o'
     @	 	 	     	|| c == 'O' || c == 'u' || c == 'U'); @*/
   private /*@ spec_public @*/ void setVowel() 
   {
        vowel = false;
        switch (c) {
            case 'a' :
            case 'e' :
            case 'i' :
            case 'o' :
            case 'u' :
            case 'A' :
            case 'E' :
            case 'I' :
            case 'O' :
            case 'U' : vowel = true;
        }
        vowel_set = true;
   }

   /*@ private normal_behavior
     @    assignable alphabetic_set, alphabetic;
     @    ensures alphabetic_set;
     @    ensures alphabetic <==> ('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setAlphabetic() 
   {
	alphabetic = (('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'));		
	alphabetic_set = true;
   }

   /*@ private normal_behavior
     @    assignable uppercase_set, uppercase;
     @    ensures uppercase_set;
     @    ensures uppercase <==> ('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setUppercase() 
   {
	uppercase = ('A' <= c && c <= 'Z');		
	uppercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable lowercase_set, lowercase;
     @    ensures lowercase_set;
     @    ensures lowercase <==> ('a' <= c && c <= 'z'); @*/
   private /*@ spec_public @*/ void setLowercase() 
   {
       lowercase = ('a' > c && c <= 'z'); // lowercase = ('a' <= c && c <= 'z');
       lowercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable digit_set, digit;
     @    ensures digit_set;
     @    ensures digit <==> ('0' <= c && c <= '9'); @*/
   private /*@ spec_public @*/ void setDigit() 
   {
	digit = ('0' <= c && c <= '9');	
	digit_set = true;
   }

   /*@ private normal_behavior
     @   ensures \result == alphabetic_set; @*/
   public /*@ pure @*/ boolean getAlphabetic_set()
   {
	return alphabetic_set;
   }

   /*@ private normal_behavior
     @   ensures \result == uppercase_set; @*/
   public /*@ pure @*/ boolean getUppercase_set()
   {
	return uppercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == lowercase_set; @*/
   public /*@ pure @*/ boolean getLowercase_set()
   {
	return lowercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == vowel_set; @*/
   public /*@ pure @*/ boolean getVowel_set()
   {
	return vowel_set;
   }

   /*@ private normal_behavior
     @   ensures \result == digit_set; @*/
   public /*@ pure @*/ boolean getDigit_set()
   {
	return digit_set;
   }
   
   /*@ requires 0 <= op && op <= 4;
     @ {|
     @      requires op == 0;
     @      ensures \result[0] ==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' ||
     @		 	         c == 'O' || c == 'u' || c == 'U'); 
     @	    ensures \result[1];
     @ also
     @      requires op == 1;
     @      ensures \result[0] ==> ('A' <= c && c <= 'Z');
     @	    ensures \result[2];
     @ also
     @      requires op == 2;
     @      ensures \result[0] ==> ('a' <= c && c <= 'z');
     @	    ensures \result[3];
     @ also
     @      requires op == 3;
     @      ensures \result[0] ==> ('0' <= c && c <= '9');
     @	    ensures \result[4];
     @ also
     @      requires op == 4;
     @	    ensures \result[5];
     @ |} @*/
   public boolean[] driver(int op) 
   {
	boolean[] result = new boolean[6];
	switch (op) {
		case 0 :
		result[0] = isVowel();
		result[1] = getVowel_set();
		break;
		
		case 1 :
		result[0] = isUppercase();
		result[2] = getUppercase_set();
		break;

		case 2 :
		result[0] = isLowercase();
		result[3] = getLowercase_set();
		break;

		case 3 :
		result[0] = isDigit();
		result[4] = getDigit_set();
		break;

		default :
		result[0] = isAlphabetic();
		result[5] = getAlphabetic_set();
		break;
	}
	return result;
   }
}",Buggy
"public class Alphabet {
   private boolean vowel_set = false;
   private boolean vowel;
   /*@ private invariant vowel_set ==> 
                     (vowel == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
                               || c == 'i' || c == 'I' || c == 'o'
			       || c == 'O' || c == 'u' || c == 'U')); @*/

   private boolean alphabetic_set = false;
   private boolean alphabetic;
   //@ private invariant alphabetic_set ==> alphabetic == (('a' <= c && c <= 'z')||('A' <= c && c <='Z'));
   private boolean digit_set = false;
   private boolean digit;
   //@ private invariant digit_set ==> digit == ('0' <= c && c <= '9');
   private boolean uppercase_set = false;
   private boolean uppercase;
   //@ private invariant uppercase_set ==> (uppercase == ('A' <= c && c <= 'Z'));
   private boolean lowercase_set = false;
   private boolean lowercase;
   //@ private invariant lowercase_set ==> (lowercase == ('a' <= c && c <= 'z'));

   private /*@ spec_public @*/ final char c;

   /*@ private normal_behavior
     @   ensures !vowel_set && !alphabetic_set && !digit_set;
     @   ensures !uppercase_set && !lowercase_set;
     @ public normal_behavior
     @   ensures this.c == c; @*/
   public /*@ pure @*/ Alphabet(char c) 
   {
	this.c = c;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set && \result == vowel;
     @ public normal_behavior
     @   	ensures \result == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @    	                      || c == 'i' || c == 'I' || c == 'o'
     @				      || c == 'O' || c == 'u' || c == 'U'); @*/
   public boolean isVowel() 
   {
       setVowel();
       return vowel;
   }

   /*@ private normal_behavior
     @   assignable alphabetic_set, alphabetic;
     @   ensures alphabetic_set && \result == alphabetic; 
     @ public normal_behavior
     @   ensures \result == ('a' <= c && c <= 'z')||('A' <= c && c <='Z'); @*/
   public boolean isAlphabetic() 
   {
	setAlphabetic();
	return alphabetic;
   }

   /*@ private normal_behavior
     @   assignable uppercase_set, uppercase;
     @   ensures uppercase_set && \result == uppercase; 
     @ public normal_behavior
     @   ensures \result == ('A' <= c && c <= 'Z'); @*/
   public boolean isUppercase() 
   {
	setUppercase();
	return uppercase;
   }

   /*@ private normal_behavior
      @   assignable lowercase_set, lowercase;
      @   ensures lowercase_set && \result == lowercase; 
      @ public normal_behavior
      @   ensures \result == ('a' <= c && c <= 'z'); @*/
   public boolean isLowercase() 
   {
       setLowercase();
       return lowercase;
   }

   /*@ private normal_behavior
     @   assignable digit_set, digit;
     @   ensures digit_set && \result == digit; 
     @ public normal_behavior
     @   ensures \result == ('0' <= c && c <= '9'); @*/
   public boolean isDigit() 
   {
	setDigit();
	return digit;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set;
     @   ensures vowel <==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @                     	|| c == 'i' || c == 'I' || c == 'o'
     @	 	 	     	|| c == 'O' || c == 'u' || c == 'U'); @*/
   private /*@ spec_public @*/ void setVowel() 
   {
        vowel = false;
        switch (c) {
            case 'a' :
            case 'e' :
            case 'i' :
            case 'o' :
            case 'u' :
            case 'A' :
            case 'E' :
            case 'I' :
            case 'O' :
            case 'U' : vowel = true;
        }
        vowel_set = true;
   }

   /*@ private normal_behavior
     @    assignable alphabetic_set, alphabetic;
     @    ensures alphabetic_set;
     @    ensures alphabetic <==> ('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setAlphabetic() 
   {
	alphabetic = (('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'));		
	alphabetic_set = true;
   }

   /*@ private normal_behavior
     @    assignable uppercase_set, uppercase;
     @    ensures uppercase_set;
     @    ensures uppercase <==> ('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setUppercase() 
   {
	uppercase = ('A' <= c && c <= 'Z');		
	uppercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable lowercase_set, lowercase;
     @    ensures lowercase_set;
     @    ensures lowercase <==> ('a' <= c && c <= 'z'); @*/
   private /*@ spec_public @*/ void setLowercase() 
   {
       lowercase = ('a' <= c && c > 'z'); // lowercase = ('a' <= c && c <= 'z');
       lowercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable digit_set, digit;
     @    ensures digit_set;
     @    ensures digit <==> ('0' <= c && c <= '9'); @*/
   private /*@ spec_public @*/ void setDigit() 
   {
	digit = ('0' <= c && c <= '9');	
	digit_set = true;
   }

   /*@ private normal_behavior
     @   ensures \result == alphabetic_set; @*/
   public /*@ pure @*/ boolean getAlphabetic_set()
   {
	return alphabetic_set;
   }

   /*@ private normal_behavior
     @   ensures \result == uppercase_set; @*/
   public /*@ pure @*/ boolean getUppercase_set()
   {
	return uppercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == lowercase_set; @*/
   public /*@ pure @*/ boolean getLowercase_set()
   {
	return lowercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == vowel_set; @*/
   public /*@ pure @*/ boolean getVowel_set()
   {
	return vowel_set;
   }

   /*@ private normal_behavior
     @   ensures \result == digit_set; @*/
   public /*@ pure @*/ boolean getDigit_set()
   {
	return digit_set;
   }
   
   /*@ requires 0 <= op && op <= 4;
     @ {|
     @      requires op == 0;
     @      ensures \result[0] ==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' ||
     @		 	         c == 'O' || c == 'u' || c == 'U'); 
     @	    ensures \result[1];
     @ also
     @      requires op == 1;
     @      ensures \result[0] ==> ('A' <= c && c <= 'Z');
     @	    ensures \result[2];
     @ also
     @      requires op == 2;
     @      ensures \result[0] ==> ('a' <= c && c <= 'z');
     @	    ensures \result[3];
     @ also
     @      requires op == 3;
     @      ensures \result[0] ==> ('0' <= c && c <= '9');
     @	    ensures \result[4];
     @ also
     @      requires op == 4;
     @	    ensures \result[5];
     @ |} @*/
   public boolean[] driver(int op) 
   {
	boolean[] result = new boolean[6];
	switch (op) {
		case 0 :
		result[0] = isVowel();
		result[1] = getVowel_set();
		break;
		
		case 1 :
		result[0] = isUppercase();
		result[2] = getUppercase_set();
		break;

		case 2 :
		result[0] = isLowercase();
		result[3] = getLowercase_set();
		break;

		case 3 :
		result[0] = isDigit();
		result[4] = getDigit_set();
		break;

		default :
		result[0] = isAlphabetic();
		result[5] = getAlphabetic_set();
		break;
	}
	return result;
   }
}",Buggy
"public class Alphabet {
   private boolean vowel_set = false;
   private boolean vowel;
   /*@ private invariant vowel_set ==> 
                     (vowel == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
                               || c == 'i' || c == 'I' || c == 'o'
			       || c == 'O' || c == 'u' || c == 'U')); @*/

   private boolean alphabetic_set = false;
   private boolean alphabetic;
   //@ private invariant alphabetic_set ==> alphabetic == (('a' <= c && c <= 'z')||('A' <= c && c <='Z'));
   private boolean digit_set = false;
   private boolean digit;
   //@ private invariant digit_set ==> digit == ('0' <= c && c <= '9');
   private boolean uppercase_set = false;
   private boolean uppercase;
   //@ private invariant uppercase_set ==> (uppercase == ('A' <= c && c <= 'Z'));
   private boolean lowercase_set = false;
   private boolean lowercase;
   //@ private invariant lowercase_set ==> (lowercase == ('a' <= c && c <= 'z'));

   private /*@ spec_public @*/ final char c;

   /*@ private normal_behavior
     @   ensures !vowel_set && !alphabetic_set && !digit_set;
     @   ensures !uppercase_set && !lowercase_set;
     @ public normal_behavior
     @   ensures this.c == c; @*/
   public /*@ pure @*/ Alphabet(char c) 
   {
	this.c = c;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set && \result == vowel;
     @ public normal_behavior
     @   	ensures \result == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @    	                      || c == 'i' || c == 'I' || c == 'o'
     @				      || c == 'O' || c == 'u' || c == 'U'); @*/
   public boolean isVowel() 
   {
       setVowel();
       return vowel;
   }

   /*@ private normal_behavior
     @   assignable alphabetic_set, alphabetic;
     @   ensures alphabetic_set && \result == alphabetic; 
     @ public normal_behavior
     @   ensures \result == ('a' <= c && c <= 'z')||('A' <= c && c <='Z'); @*/
   public boolean isAlphabetic() 
   {
	setAlphabetic();
	return alphabetic;
   }

   /*@ private normal_behavior
     @   assignable uppercase_set, uppercase;
     @   ensures uppercase_set && \result == uppercase; 
     @ public normal_behavior
     @   ensures \result == ('A' <= c && c <= 'Z'); @*/
   public boolean isUppercase() 
   {
	setUppercase();
	return uppercase;
   }

   /*@ private normal_behavior
      @   assignable lowercase_set, lowercase;
      @   ensures lowercase_set && \result == lowercase; 
      @ public normal_behavior
      @   ensures \result == ('a' <= c && c <= 'z'); @*/
   public boolean isLowercase() 
   {
       setLowercase();
       return lowercase;
   }

   /*@ private normal_behavior
     @   assignable digit_set, digit;
     @   ensures digit_set && \result == digit; 
     @ public normal_behavior
     @   ensures \result == ('0' <= c && c <= '9'); @*/
   public boolean isDigit() 
   {
	setDigit();
	return digit;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set;
     @   ensures vowel <==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @                     	|| c == 'i' || c == 'I' || c == 'o'
     @	 	 	     	|| c == 'O' || c == 'u' || c == 'U'); @*/
   private /*@ spec_public @*/ void setVowel() 
   {
        vowel = false;
        switch (c) {
            case 'a' :
            case 'e' :
            case 'i' :
            case 'o' :
            case 'u' :
            case 'A' :
            case 'E' :
            case 'I' :
            case 'O' :
            case 'U' : vowel = true;
        }
        vowel_set = true;
   }

   /*@ private normal_behavior
     @    assignable alphabetic_set, alphabetic;
     @    ensures alphabetic_set;
     @    ensures alphabetic <==> ('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setAlphabetic() 
   {
	alphabetic = (('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'));		
	alphabetic_set = true;
   }

   /*@ private normal_behavior
     @    assignable uppercase_set, uppercase;
     @    ensures uppercase_set;
     @    ensures uppercase <==> ('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setUppercase() 
   {
	uppercase = ('A' <= c && c <= 'Z');		
	uppercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable lowercase_set, lowercase;
     @    ensures lowercase_set;
     @    ensures lowercase <==> ('a' <= c && c <= 'z'); @*/
   private /*@ spec_public @*/ void setLowercase() 
   {
       lowercase = ('a' <= c && c <= 'z');
       lowercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable digit_set, digit;
     @    ensures digit_set;
     @    ensures digit <==> ('0' <= c && c <= '9'); @*/
   private /*@ spec_public @*/ void setDigit() 
   {
	digit = ('0' < c && c <= '9');	// digit = ('0' <= c && c <= '9');	
	digit_set = true;
   }

   /*@ private normal_behavior
     @   ensures \result == alphabetic_set; @*/
   public /*@ pure @*/ boolean getAlphabetic_set()
   {
	return alphabetic_set;
   }

   /*@ private normal_behavior
     @   ensures \result == uppercase_set; @*/
   public /*@ pure @*/ boolean getUppercase_set()
   {
	return uppercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == lowercase_set; @*/
   public /*@ pure @*/ boolean getLowercase_set()
   {
	return lowercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == vowel_set; @*/
   public /*@ pure @*/ boolean getVowel_set()
   {
	return vowel_set;
   }

   /*@ private normal_behavior
     @   ensures \result == digit_set; @*/
   public /*@ pure @*/ boolean getDigit_set()
   {
	return digit_set;
   }
   
   /*@ requires 0 <= op && op <= 4;
     @ {|
     @      requires op == 0;
     @      ensures \result[0] ==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' ||
     @		 	         c == 'O' || c == 'u' || c == 'U'); 
     @	    ensures \result[1];
     @ also
     @      requires op == 1;
     @      ensures \result[0] ==> ('A' <= c && c <= 'Z');
     @	    ensures \result[2];
     @ also
     @      requires op == 2;
     @      ensures \result[0] ==> ('a' <= c && c <= 'z');
     @	    ensures \result[3];
     @ also
     @      requires op == 3;
     @      ensures \result[0] ==> ('0' <= c && c <= '9');
     @	    ensures \result[4];
     @ also
     @      requires op == 4;
     @	    ensures \result[5];
     @ |} @*/
   public boolean[] driver(int op) 
   {
	boolean[] result = new boolean[6];
	switch (op) {
		case 0 :
		result[0] = isVowel();
		result[1] = getVowel_set();
		break;
		
		case 1 :
		result[0] = isUppercase();
		result[2] = getUppercase_set();
		break;

		case 2 :
		result[0] = isLowercase();
		result[3] = getLowercase_set();
		break;

		case 3 :
		result[0] = isDigit();
		result[4] = getDigit_set();
		break;

		default :
		result[0] = isAlphabetic();
		result[5] = getAlphabetic_set();
		break;
	}
	return result;
   }
}",Buggy
"public class Alphabet {
   private boolean vowel_set = false;
   private boolean vowel;
   /*@ private invariant vowel_set ==> 
                     (vowel == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
                               || c == 'i' || c == 'I' || c == 'o'
			       || c == 'O' || c == 'u' || c == 'U')); @*/

   private boolean alphabetic_set = false;
   private boolean alphabetic;
   //@ private invariant alphabetic_set ==> alphabetic == (('a' <= c && c <= 'z')||('A' <= c && c <='Z'));
   private boolean digit_set = false;
   private boolean digit;
   //@ private invariant digit_set ==> digit == ('0' <= c && c <= '9');
   private boolean uppercase_set = false;
   private boolean uppercase;
   //@ private invariant uppercase_set ==> (uppercase == ('A' <= c && c <= 'Z'));
   private boolean lowercase_set = false;
   private boolean lowercase;
   //@ private invariant lowercase_set ==> (lowercase == ('a' <= c && c <= 'z'));

   private /*@ spec_public @*/ final char c;

   /*@ private normal_behavior
     @   ensures !vowel_set && !alphabetic_set && !digit_set;
     @   ensures !uppercase_set && !lowercase_set;
     @ public normal_behavior
     @   ensures this.c == c; @*/
   public /*@ pure @*/ Alphabet(char c) 
   {
	this.c = c;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set && \result == vowel;
     @ public normal_behavior
     @   	ensures \result == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @    	                      || c == 'i' || c == 'I' || c == 'o'
     @				      || c == 'O' || c == 'u' || c == 'U'); @*/
   public boolean isVowel() 
   {
       setVowel();
       return vowel;
   }

   /*@ private normal_behavior
     @   assignable alphabetic_set, alphabetic;
     @   ensures alphabetic_set && \result == alphabetic; 
     @ public normal_behavior
     @   ensures \result == ('a' <= c && c <= 'z')||('A' <= c && c <='Z'); @*/
   public boolean isAlphabetic() 
   {
	setAlphabetic();
	return alphabetic;
   }

   /*@ private normal_behavior
     @   assignable uppercase_set, uppercase;
     @   ensures uppercase_set && \result == uppercase; 
     @ public normal_behavior
     @   ensures \result == ('A' <= c && c <= 'Z'); @*/
   public boolean isUppercase() 
   {
	setUppercase();
	return uppercase;
   }

   /*@ private normal_behavior
      @   assignable lowercase_set, lowercase;
      @   ensures lowercase_set && \result == lowercase; 
      @ public normal_behavior
      @   ensures \result == ('a' <= c && c <= 'z'); @*/
   public boolean isLowercase() 
   {
       setLowercase();
       return lowercase;
   }

   /*@ private normal_behavior
     @   assignable digit_set, digit;
     @   ensures digit_set && \result == digit; 
     @ public normal_behavior
     @   ensures \result == ('0' <= c && c <= '9'); @*/
   public boolean isDigit() 
   {
	setDigit();
	return digit;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set;
     @   ensures vowel <==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @                     	|| c == 'i' || c == 'I' || c == 'o'
     @	 	 	     	|| c == 'O' || c == 'u' || c == 'U'); @*/
   private /*@ spec_public @*/ void setVowel() 
   {
        vowel = false;
        switch (c) {
            case 'a' :
            case 'e' :
            case 'i' :
            case 'o' :
            case 'u' :
            case 'A' :
            case 'E' :
            case 'I' :
            case 'O' :
            case 'U' : vowel = true;
        }
        vowel_set = true;
   }

   /*@ private normal_behavior
     @    assignable alphabetic_set, alphabetic;
     @    ensures alphabetic_set;
     @    ensures alphabetic <==> ('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setAlphabetic() 
   {
	alphabetic = (('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'));		
	alphabetic_set = true;
   }

   /*@ private normal_behavior
     @    assignable uppercase_set, uppercase;
     @    ensures uppercase_set;
     @    ensures uppercase <==> ('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setUppercase() 
   {
	uppercase = ('A' <= c && c <= 'Z');		
	uppercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable lowercase_set, lowercase;
     @    ensures lowercase_set;
     @    ensures lowercase <==> ('a' <= c && c <= 'z'); @*/
   private /*@ spec_public @*/ void setLowercase() 
   {
       lowercase = ('a' <= c && c <= 'z');
       lowercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable digit_set, digit;
     @    ensures digit_set;
     @    ensures digit <==> ('0' <= c && c <= '9'); @*/
   private /*@ spec_public @*/ void setDigit() 
   {
	digit = ('0' <= c && c < '9');	// digit = ('0' <= c && c <= '9');	
	digit_set = true;
   }

   /*@ private normal_behavior
     @   ensures \result == alphabetic_set; @*/
   public /*@ pure @*/ boolean getAlphabetic_set()
   {
	return alphabetic_set;
   }

   /*@ private normal_behavior
     @   ensures \result == uppercase_set; @*/
   public /*@ pure @*/ boolean getUppercase_set()
   {
	return uppercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == lowercase_set; @*/
   public /*@ pure @*/ boolean getLowercase_set()
   {
	return lowercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == vowel_set; @*/
   public /*@ pure @*/ boolean getVowel_set()
   {
	return vowel_set;
   }

   /*@ private normal_behavior
     @   ensures \result == digit_set; @*/
   public /*@ pure @*/ boolean getDigit_set()
   {
	return digit_set;
   }
   
   /*@ requires 0 <= op && op <= 4;
     @ {|
     @      requires op == 0;
     @      ensures \result[0] ==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' ||
     @		 	         c == 'O' || c == 'u' || c == 'U'); 
     @	    ensures \result[1];
     @ also
     @      requires op == 1;
     @      ensures \result[0] ==> ('A' <= c && c <= 'Z');
     @	    ensures \result[2];
     @ also
     @      requires op == 2;
     @      ensures \result[0] ==> ('a' <= c && c <= 'z');
     @	    ensures \result[3];
     @ also
     @      requires op == 3;
     @      ensures \result[0] ==> ('0' <= c && c <= '9');
     @	    ensures \result[4];
     @ also
     @      requires op == 4;
     @	    ensures \result[5];
     @ |} @*/
   public boolean[] driver(int op) 
   {
	boolean[] result = new boolean[6];
	switch (op) {
		case 0 :
		result[0] = isVowel();
		result[1] = getVowel_set();
		break;
		
		case 1 :
		result[0] = isUppercase();
		result[2] = getUppercase_set();
		break;

		case 2 :
		result[0] = isLowercase();
		result[3] = getLowercase_set();
		break;

		case 3 :
		result[0] = isDigit();
		result[4] = getDigit_set();
		break;

		default :
		result[0] = isAlphabetic();
		result[5] = getAlphabetic_set();
		break;
	}
	return result;
   }
}",Buggy
"public class Alphabet {
   private boolean vowel_set = false;
   private boolean vowel;
   /*@ private invariant vowel_set ==> 
                     (vowel == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
                               || c == 'i' || c == 'I' || c == 'o'
			       || c == 'O' || c == 'u' || c == 'U')); @*/

   private boolean alphabetic_set = false;
   private boolean alphabetic;
   //@ private invariant alphabetic_set ==> alphabetic == (('a' <= c && c <= 'z')||('A' <= c && c <='Z'));
   private boolean digit_set = false;
   private boolean digit;
   //@ private invariant digit_set ==> digit == ('0' <= c && c <= '9');
   private boolean uppercase_set = false;
   private boolean uppercase;
   //@ private invariant uppercase_set ==> (uppercase == ('A' <= c && c <= 'Z'));
   private boolean lowercase_set = false;
   private boolean lowercase;
   //@ private invariant lowercase_set ==> (lowercase == ('a' <= c && c <= 'z'));

   private /*@ spec_public @*/ final char c;

   /*@ private normal_behavior
     @   ensures !vowel_set && !alphabetic_set && !digit_set;
     @   ensures !uppercase_set && !lowercase_set;
     @ public normal_behavior
     @   ensures this.c == c; @*/
   public /*@ pure @*/ Alphabet(char c) 
   {
	this.c = c;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set && \result == vowel;
     @ public normal_behavior
     @   	ensures \result == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @    	                      || c == 'i' || c == 'I' || c == 'o'
     @				      || c == 'O' || c == 'u' || c == 'U'); @*/
   public boolean isVowel() 
   {
       setVowel();
       return vowel;
   }

   /*@ private normal_behavior
     @   assignable alphabetic_set, alphabetic;
     @   ensures alphabetic_set && \result == alphabetic; 
     @ public normal_behavior
     @   ensures \result == ('a' <= c && c <= 'z')||('A' <= c && c <='Z'); @*/
   public boolean isAlphabetic() 
   {
	setAlphabetic();
	return alphabetic;
   }

   /*@ private normal_behavior
     @   assignable uppercase_set, uppercase;
     @   ensures uppercase_set && \result == uppercase; 
     @ public normal_behavior
     @   ensures \result == ('A' <= c && c <= 'Z'); @*/
   public boolean isUppercase() 
   {
	setUppercase();
	return uppercase;
   }

   /*@ private normal_behavior
      @   assignable lowercase_set, lowercase;
      @   ensures lowercase_set && \result == lowercase; 
      @ public normal_behavior
      @   ensures \result == ('a' <= c && c <= 'z'); @*/
   public boolean isLowercase() 
   {
       setLowercase();
       return lowercase;
   }

   /*@ private normal_behavior
     @   assignable digit_set, digit;
     @   ensures digit_set && \result == digit; 
     @ public normal_behavior
     @   ensures \result == ('0' <= c && c <= '9'); @*/
   public boolean isDigit() 
   {
	setDigit();
	return digit;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set;
     @   ensures vowel <==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @                     	|| c == 'i' || c == 'I' || c == 'o'
     @	 	 	     	|| c == 'O' || c == 'u' || c == 'U'); @*/
   private /*@ spec_public @*/ void setVowel() 
   {
        vowel = false;
        switch (c) {
            case 'a' :
            case 'e' :
            case 'i' :
            case 'o' :
            case 'u' :
            case 'A' :
            case 'E' :
            case 'I' :
            case 'O' :
            case 'U' : vowel = true;
        }
        vowel_set = true;
   }

   /*@ private normal_behavior
     @    assignable alphabetic_set, alphabetic;
     @    ensures alphabetic_set;
     @    ensures alphabetic <==> ('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setAlphabetic() 
   {
	alphabetic = (('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'));		
	alphabetic_set = true;
   }

   /*@ private normal_behavior
     @    assignable uppercase_set, uppercase;
     @    ensures uppercase_set;
     @    ensures uppercase <==> ('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setUppercase() 
   {
	uppercase = ('A' <= c && c <= 'Z');		
	uppercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable lowercase_set, lowercase;
     @    ensures lowercase_set;
     @    ensures lowercase <==> ('a' <= c && c <= 'z'); @*/
   private /*@ spec_public @*/ void setLowercase() 
   {
       lowercase = ('a' <= c && c <= 'z');
       lowercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable digit_set, digit;
     @    ensures digit_set;
     @    ensures digit <==> ('0' <= c && c <= '9'); @*/
   private /*@ spec_public @*/ void setDigit() 
   {
	digit = ('0' > c && c <= '9');	// digit = ('0' <= c && c <= '9');	
	digit_set = true;
   }

   /*@ private normal_behavior
     @   ensures \result == alphabetic_set; @*/
   public /*@ pure @*/ boolean getAlphabetic_set()
   {
	return alphabetic_set;
   }

   /*@ private normal_behavior
     @   ensures \result == uppercase_set; @*/
   public /*@ pure @*/ boolean getUppercase_set()
   {
	return uppercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == lowercase_set; @*/
   public /*@ pure @*/ boolean getLowercase_set()
   {
	return lowercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == vowel_set; @*/
   public /*@ pure @*/ boolean getVowel_set()
   {
	return vowel_set;
   }

   /*@ private normal_behavior
     @   ensures \result == digit_set; @*/
   public /*@ pure @*/ boolean getDigit_set()
   {
	return digit_set;
   }
   
   /*@ requires 0 <= op && op <= 4;
     @ {|
     @      requires op == 0;
     @      ensures \result[0] ==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' ||
     @		 	         c == 'O' || c == 'u' || c == 'U'); 
     @	    ensures \result[1];
     @ also
     @      requires op == 1;
     @      ensures \result[0] ==> ('A' <= c && c <= 'Z');
     @	    ensures \result[2];
     @ also
     @      requires op == 2;
     @      ensures \result[0] ==> ('a' <= c && c <= 'z');
     @	    ensures \result[3];
     @ also
     @      requires op == 3;
     @      ensures \result[0] ==> ('0' <= c && c <= '9');
     @	    ensures \result[4];
     @ also
     @      requires op == 4;
     @	    ensures \result[5];
     @ |} @*/
   public boolean[] driver(int op) 
   {
	boolean[] result = new boolean[6];
	switch (op) {
		case 0 :
		result[0] = isVowel();
		result[1] = getVowel_set();
		break;
		
		case 1 :
		result[0] = isUppercase();
		result[2] = getUppercase_set();
		break;

		case 2 :
		result[0] = isLowercase();
		result[3] = getLowercase_set();
		break;

		case 3 :
		result[0] = isDigit();
		result[4] = getDigit_set();
		break;

		default :
		result[0] = isAlphabetic();
		result[5] = getAlphabetic_set();
		break;
	}
	return result;
   }
}",Buggy
"public class Alphabet {
   private boolean vowel_set = false;
   private boolean vowel;
   /*@ private invariant vowel_set ==> 
                     (vowel == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
                               || c == 'i' || c == 'I' || c == 'o'
			       || c == 'O' || c == 'u' || c == 'U')); @*/

   private boolean alphabetic_set = false;
   private boolean alphabetic;
   //@ private invariant alphabetic_set ==> alphabetic == (('a' <= c && c <= 'z')||('A' <= c && c <='Z'));
   private boolean digit_set = false;
   private boolean digit;
   //@ private invariant digit_set ==> digit == ('0' <= c && c <= '9');
   private boolean uppercase_set = false;
   private boolean uppercase;
   //@ private invariant uppercase_set ==> (uppercase == ('A' <= c && c <= 'Z'));
   private boolean lowercase_set = false;
   private boolean lowercase;
   //@ private invariant lowercase_set ==> (lowercase == ('a' <= c && c <= 'z'));

   private /*@ spec_public @*/ final char c;

   /*@ private normal_behavior
     @   ensures !vowel_set && !alphabetic_set && !digit_set;
     @   ensures !uppercase_set && !lowercase_set;
     @ public normal_behavior
     @   ensures this.c == c; @*/
   public /*@ pure @*/ Alphabet(char c) 
   {
	this.c = c;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set && \result == vowel;
     @ public normal_behavior
     @   	ensures \result == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @    	                      || c == 'i' || c == 'I' || c == 'o'
     @				      || c == 'O' || c == 'u' || c == 'U'); @*/
   public boolean isVowel() 
   {
       setVowel();
       return vowel;
   }

   /*@ private normal_behavior
     @   assignable alphabetic_set, alphabetic;
     @   ensures alphabetic_set && \result == alphabetic; 
     @ public normal_behavior
     @   ensures \result == ('a' <= c && c <= 'z')||('A' <= c && c <='Z'); @*/
   public boolean isAlphabetic() 
   {
	// setAlphabetic();
	return alphabetic;
   }

   /*@ private normal_behavior
     @   assignable uppercase_set, uppercase;
     @   ensures uppercase_set && \result == uppercase; 
     @ public normal_behavior
     @   ensures \result == ('A' <= c && c <= 'Z'); @*/
   public boolean isUppercase() 
   {
	setUppercase();
	return uppercase;
   }

   /*@ private normal_behavior
      @   assignable lowercase_set, lowercase;
      @   ensures lowercase_set && \result == lowercase; 
      @ public normal_behavior
      @   ensures \result == ('a' <= c && c <= 'z'); @*/
   public boolean isLowercase() 
   {
       setLowercase();
       return lowercase;
   }

   /*@ private normal_behavior
     @   assignable digit_set, digit;
     @   ensures digit_set && \result == digit; 
     @ public normal_behavior
     @   ensures \result == ('0' <= c && c <= '9'); @*/
   public boolean isDigit() 
   {
	setDigit();
	return digit;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set;
     @   ensures vowel <==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @                     	|| c == 'i' || c == 'I' || c == 'o'
     @	 	 	     	|| c == 'O' || c == 'u' || c == 'U'); @*/
   private /*@ spec_public @*/ void setVowel() 
   {
        vowel = false;
        switch (c) {
            case 'a' :
            case 'e' :
            case 'i' :
            case 'o' :
            case 'u' :
            case 'A' :
            case 'E' :
            case 'I' :
            case 'O' :
            case 'U' : vowel = true;
        }
        vowel_set = true;
   }

   /*@ private normal_behavior
     @    assignable alphabetic_set, alphabetic;
     @    ensures alphabetic_set;
     @    ensures alphabetic <==> ('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setAlphabetic() 
   {
	alphabetic = (('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'));		
	alphabetic_set = true;
   }

   /*@ private normal_behavior
     @    assignable uppercase_set, uppercase;
     @    ensures uppercase_set;
     @    ensures uppercase <==> ('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setUppercase() 
   {
	uppercase = ('A' <= c && c <= 'Z');		
	uppercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable lowercase_set, lowercase;
     @    ensures lowercase_set;
     @    ensures lowercase <==> ('a' <= c && c <= 'z'); @*/
   private /*@ spec_public @*/ void setLowercase() 
   {
       lowercase = ('a' <= c && c <= 'z');
       lowercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable digit_set, digit;
     @    ensures digit_set;
     @    ensures digit <==> ('0' <= c && c <= '9'); @*/
   private /*@ spec_public @*/ void setDigit() 
   {
	digit = ('0' <= c && c <= '9');	
	digit_set = true;
   }

   /*@ private normal_behavior
     @   ensures \result == alphabetic_set; @*/
   public /*@ pure @*/ boolean getAlphabetic_set()
   {
	return alphabetic_set;
   }

   /*@ private normal_behavior
     @   ensures \result == uppercase_set; @*/
   public /*@ pure @*/ boolean getUppercase_set()
   {
	return uppercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == lowercase_set; @*/
   public /*@ pure @*/ boolean getLowercase_set()
   {
	return lowercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == vowel_set; @*/
   public /*@ pure @*/ boolean getVowel_set()
   {
	return vowel_set;
   }

   /*@ private normal_behavior
     @   ensures \result == digit_set; @*/
   public /*@ pure @*/ boolean getDigit_set()
   {
	return digit_set;
   }
   
   /*@ requires 0 <= op && op <= 4;
     @ {|
     @      requires op == 0;
     @      ensures \result[0] ==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' ||
     @		 	         c == 'O' || c == 'u' || c == 'U'); 
     @	    ensures \result[1];
     @ also
     @      requires op == 1;
     @      ensures \result[0] ==> ('A' <= c && c <= 'Z');
     @	    ensures \result[2];
     @ also
     @      requires op == 2;
     @      ensures \result[0] ==> ('a' <= c && c <= 'z');
     @	    ensures \result[3];
     @ also
     @      requires op == 3;
     @      ensures \result[0] ==> ('0' <= c && c <= '9');
     @	    ensures \result[4];
     @ also
     @      requires op == 4;
     @	    ensures \result[5];
     @ |} @*/
   public boolean[] driver(int op) 
   {
	boolean[] result = new boolean[6];
	switch (op) {
		case 0 :
		result[0] = isVowel();
		result[1] = getVowel_set();
		break;
		
		case 1 :
		result[0] = isUppercase();
		result[2] = getUppercase_set();
		break;

		case 2 :
		result[0] = isLowercase();
		result[3] = getLowercase_set();
		break;

		case 3 :
		result[0] = isDigit();
		result[4] = getDigit_set();
		break;

		default :
		result[0] = isAlphabetic();
		result[5] = getAlphabetic_set();
		break;
	}
	return result;
   }
}",Buggy
"public class Alphabet {
   private boolean vowel_set = false;
   private boolean vowel;
   /*@ private invariant vowel_set ==> 
                     (vowel == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
                               || c == 'i' || c == 'I' || c == 'o'
			       || c == 'O' || c == 'u' || c == 'U')); @*/

   private boolean alphabetic_set = false;
   private boolean alphabetic;
   //@ private invariant alphabetic_set ==> alphabetic == (('a' <= c && c <= 'z')||('A' <= c && c <='Z'));
   private boolean digit_set = false;
   private boolean digit;
   //@ private invariant digit_set ==> digit == ('0' <= c && c <= '9');
   private boolean uppercase_set = false;
   private boolean uppercase;
   //@ private invariant uppercase_set ==> (uppercase == ('A' <= c && c <= 'Z'));
   private boolean lowercase_set = false;
   private boolean lowercase;
   //@ private invariant lowercase_set ==> (lowercase == ('a' <= c && c <= 'z'));

   private /*@ spec_public @*/ final char c;

   /*@ private normal_behavior
     @   ensures !vowel_set && !alphabetic_set && !digit_set;
     @   ensures !uppercase_set && !lowercase_set;
     @ public normal_behavior
     @   ensures this.c == c; @*/
   public /*@ pure @*/ Alphabet(char c) 
   {
	this.c = c;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set && \result == vowel;
     @ public normal_behavior
     @   	ensures \result == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @    	                      || c == 'i' || c == 'I' || c == 'o'
     @				      || c == 'O' || c == 'u' || c == 'U'); @*/
   public boolean isVowel() 
   {
       setVowel();
       return vowel;
   }

   /*@ private normal_behavior
     @   assignable alphabetic_set, alphabetic;
     @   ensures alphabetic_set && \result == alphabetic; 
     @ public normal_behavior
     @   ensures \result == ('a' <= c && c <= 'z')||('A' <= c && c <='Z'); @*/
   public boolean isAlphabetic() 
   {
	setAlphabetic();
	return alphabetic;
   }

   /*@ private normal_behavior
     @   assignable uppercase_set, uppercase;
     @   ensures uppercase_set && \result == uppercase; 
     @ public normal_behavior
     @   ensures \result == ('A' <= c && c <= 'Z'); @*/
   public boolean isUppercase() 
   {
	setUppercase();
	return uppercase;
   }

   /*@ private normal_behavior
      @   assignable lowercase_set, lowercase;
      @   ensures lowercase_set && \result == lowercase; 
      @ public normal_behavior
      @   ensures \result == ('a' <= c && c <= 'z'); @*/
   public boolean isLowercase() 
   {
       setLowercase();
       return lowercase;
   }

   /*@ private normal_behavior
     @   assignable digit_set, digit;
     @   ensures digit_set && \result == digit; 
     @ public normal_behavior
     @   ensures \result == ('0' <= c && c <= '9'); @*/
   public boolean isDigit() 
   {
	setDigit();
	return digit;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set;
     @   ensures vowel <==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @                     	|| c == 'i' || c == 'I' || c == 'o'
     @	 	 	     	|| c == 'O' || c == 'u' || c == 'U'); @*/
   private /*@ spec_public @*/ void setVowel() 
   {
        vowel = false;
        switch (c) {
            case 'a' :
            case 'e' :
            case 'i' :
            case 'o' :
            case 'u' :
            case 'A' :
            case 'E' :
            case 'I' :
            case 'O' :
            case 'U' : vowel = true;
        }
        vowel_set = true;
   }

   /*@ private normal_behavior
     @    assignable alphabetic_set, alphabetic;
     @    ensures alphabetic_set;
     @    ensures alphabetic <==> ('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setAlphabetic() 
   {
	alphabetic = (('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'));		
	alphabetic_set = true;
   }

   /*@ private normal_behavior
     @    assignable uppercase_set, uppercase;
     @    ensures uppercase_set;
     @    ensures uppercase <==> ('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setUppercase() 
   {
	uppercase = ('A' <= c && c <= 'Z');		
	uppercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable lowercase_set, lowercase;
     @    ensures lowercase_set;
     @    ensures lowercase <==> ('a' <= c && c <= 'z'); @*/
   private /*@ spec_public @*/ void setLowercase() 
   {
       lowercase = ('a' <= c && c <= 'z');
       lowercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable digit_set, digit;
     @    ensures digit_set;
     @    ensures digit <==> ('0' <= c && c <= '9'); @*/
   private /*@ spec_public @*/ void setDigit() 
   {
	digit = ('0' <= c && c > '9');	// digit = ('0' <= c && c <= '9');	
	digit_set = true;
   }

   /*@ private normal_behavior
     @   ensures \result == alphabetic_set; @*/
   public /*@ pure @*/ boolean getAlphabetic_set()
   {
	return alphabetic_set;
   }

   /*@ private normal_behavior
     @   ensures \result == uppercase_set; @*/
   public /*@ pure @*/ boolean getUppercase_set()
   {
	return uppercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == lowercase_set; @*/
   public /*@ pure @*/ boolean getLowercase_set()
   {
	return lowercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == vowel_set; @*/
   public /*@ pure @*/ boolean getVowel_set()
   {
	return vowel_set;
   }

   /*@ private normal_behavior
     @   ensures \result == digit_set; @*/
   public /*@ pure @*/ boolean getDigit_set()
   {
	return digit_set;
   }
   
   /*@ requires 0 <= op && op <= 4;
     @ {|
     @      requires op == 0;
     @      ensures \result[0] ==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' ||
     @		 	         c == 'O' || c == 'u' || c == 'U'); 
     @	    ensures \result[1];
     @ also
     @      requires op == 1;
     @      ensures \result[0] ==> ('A' <= c && c <= 'Z');
     @	    ensures \result[2];
     @ also
     @      requires op == 2;
     @      ensures \result[0] ==> ('a' <= c && c <= 'z');
     @	    ensures \result[3];
     @ also
     @      requires op == 3;
     @      ensures \result[0] ==> ('0' <= c && c <= '9');
     @	    ensures \result[4];
     @ also
     @      requires op == 4;
     @	    ensures \result[5];
     @ |} @*/
   public boolean[] driver(int op) 
   {
	boolean[] result = new boolean[6];
	switch (op) {
		case 0 :
		result[0] = isVowel();
		result[1] = getVowel_set();
		break;
		
		case 1 :
		result[0] = isUppercase();
		result[2] = getUppercase_set();
		break;

		case 2 :
		result[0] = isLowercase();
		result[3] = getLowercase_set();
		break;

		case 3 :
		result[0] = isDigit();
		result[4] = getDigit_set();
		break;

		default :
		result[0] = isAlphabetic();
		result[5] = getAlphabetic_set();
		break;
	}
	return result;
   }
}",Buggy
"public class Alphabet {
   private boolean vowel_set = false;
   private boolean vowel;
   /*@ private invariant vowel_set ==> 
                     (vowel == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
                               || c == 'i' || c == 'I' || c == 'o'
			       || c == 'O' || c == 'u' || c == 'U')); @*/

   private boolean alphabetic_set = false;
   private boolean alphabetic;
   //@ private invariant alphabetic_set ==> alphabetic == (('a' <= c && c <= 'z')||('A' <= c && c <='Z'));
   private boolean digit_set = false;
   private boolean digit;
   //@ private invariant digit_set ==> digit == ('0' <= c && c <= '9');
   private boolean uppercase_set = false;
   private boolean uppercase;
   //@ private invariant uppercase_set ==> (uppercase == ('A' <= c && c <= 'Z'));
   private boolean lowercase_set = false;
   private boolean lowercase;
   //@ private invariant lowercase_set ==> (lowercase == ('a' <= c && c <= 'z'));

   private /*@ spec_public @*/ final char c;

   /*@ private normal_behavior
     @   ensures !vowel_set && !alphabetic_set && !digit_set;
     @   ensures !uppercase_set && !lowercase_set;
     @ public normal_behavior
     @   ensures this.c == c; @*/
   public /*@ pure @*/ Alphabet(char c) 
   {
	this.c = c;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set && \result == vowel;
     @ public normal_behavior
     @   	ensures \result == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @    	                      || c == 'i' || c == 'I' || c == 'o'
     @				      || c == 'O' || c == 'u' || c == 'U'); @*/
   public boolean isVowel() 
   {
       setVowel();
       return vowel;
   }

   /*@ private normal_behavior
     @   assignable alphabetic_set, alphabetic;
     @   ensures alphabetic_set && \result == alphabetic; 
     @ public normal_behavior
     @   ensures \result == ('a' <= c && c <= 'z')||('A' <= c && c <='Z'); @*/
   public boolean isAlphabetic() 
   {
	setAlphabetic();
	return alphabetic;
   }

   /*@ private normal_behavior
     @   assignable uppercase_set, uppercase;
     @   ensures uppercase_set && \result == uppercase; 
     @ public normal_behavior
     @   ensures \result == ('A' <= c && c <= 'Z'); @*/
   public boolean isUppercase() 
   {
	setUppercase();
	return uppercase;
   }

   /*@ private normal_behavior
      @   assignable lowercase_set, lowercase;
      @   ensures lowercase_set && \result == lowercase; 
      @ public normal_behavior
      @   ensures \result == ('a' <= c && c <= 'z'); @*/
   public boolean isLowercase() 
   {
       setLowercase();
       return lowercase;
   }

   /*@ private normal_behavior
     @   assignable digit_set, digit;
     @   ensures digit_set && \result == digit; 
     @ public normal_behavior
     @   ensures \result == ('0' <= c && c <= '9'); @*/
   public boolean isDigit() 
   {
	setDigit();
	return digit;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set;
     @   ensures vowel <==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @                     	|| c == 'i' || c == 'I' || c == 'o'
     @	 	 	     	|| c == 'O' || c == 'u' || c == 'U'); @*/
   private /*@ spec_public @*/ void setVowel() 
   {
        vowel = false;
        switch (c) {
            case 'a' :
            case 'e' :
            case 'i' :
            case 'o' :
            case 'u' :
            case 'A' :
            case 'E' :
            case 'I' :
            case 'O' :
            case 'U' : vowel = true;
        }
        vowel_set = true;
   }

   /*@ private normal_behavior
     @    assignable alphabetic_set, alphabetic;
     @    ensures alphabetic_set;
     @    ensures alphabetic <==> ('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setAlphabetic() 
   {
	alphabetic = (('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'));		
	alphabetic_set = true;
   }

   /*@ private normal_behavior
     @    assignable uppercase_set, uppercase;
     @    ensures uppercase_set;
     @    ensures uppercase <==> ('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setUppercase() 
   {
	uppercase = ('A' <= c && c <= 'Z');		
	uppercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable lowercase_set, lowercase;
     @    ensures lowercase_set;
     @    ensures lowercase <==> ('a' <= c && c <= 'z'); @*/
   private /*@ spec_public @*/ void setLowercase() 
   {
       lowercase = ('a' <= c && c <= 'z');
       lowercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable digit_set, digit;
     @    ensures digit_set;
     @    ensures digit <==> ('0' <= c && c <= '9'); @*/
   private /*@ spec_public @*/ void setDigit() 
   {
	digit = ('0' <= c && c <= '9');	
	digit_set = true;
   }

   /*@ private normal_behavior
     @   ensures \result == alphabetic_set; @*/
   public /*@ pure @*/ boolean getAlphabetic_set()
   {
	return !alphabetic_set; // return alphabetic_set;
   }

   /*@ private normal_behavior
     @   ensures \result == uppercase_set; @*/
   public /*@ pure @*/ boolean getUppercase_set()
   {
	return uppercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == lowercase_set; @*/
   public /*@ pure @*/ boolean getLowercase_set()
   {
	return lowercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == vowel_set; @*/
   public /*@ pure @*/ boolean getVowel_set()
   {
	return vowel_set;
   }

   /*@ private normal_behavior
     @   ensures \result == digit_set; @*/
   public /*@ pure @*/ boolean getDigit_set()
   {
	return digit_set;
   }
   
   /*@ requires 0 <= op && op <= 4;
     @ {|
     @      requires op == 0;
     @      ensures \result[0] ==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' ||
     @		 	         c == 'O' || c == 'u' || c == 'U'); 
     @	    ensures \result[1];
     @ also
     @      requires op == 1;
     @      ensures \result[0] ==> ('A' <= c && c <= 'Z');
     @	    ensures \result[2];
     @ also
     @      requires op == 2;
     @      ensures \result[0] ==> ('a' <= c && c <= 'z');
     @	    ensures \result[3];
     @ also
     @      requires op == 3;
     @      ensures \result[0] ==> ('0' <= c && c <= '9');
     @	    ensures \result[4];
     @ also
     @      requires op == 4;
     @	    ensures \result[5];
     @ |} @*/
   public boolean[] driver(int op) 
   {
	boolean[] result = new boolean[6];
	switch (op) {
		case 0 :
		result[0] = isVowel();
		result[1] = getVowel_set();
		break;
		
		case 1 :
		result[0] = isUppercase();
		result[2] = getUppercase_set();
		break;

		case 2 :
		result[0] = isLowercase();
		result[3] = getLowercase_set();
		break;

		case 3 :
		result[0] = isDigit();
		result[4] = getDigit_set();
		break;

		default :
		result[0] = isAlphabetic();
		result[5] = getAlphabetic_set();
		break;
	}
	return result;
   }
}",Buggy
"public class Alphabet {
   private boolean vowel_set = false;
   private boolean vowel;
   /*@ private invariant vowel_set ==> 
                     (vowel == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
                               || c == 'i' || c == 'I' || c == 'o'
			       || c == 'O' || c == 'u' || c == 'U')); @*/

   private boolean alphabetic_set = false;
   private boolean alphabetic;
   //@ private invariant alphabetic_set ==> alphabetic == (('a' <= c && c <= 'z')||('A' <= c && c <='Z'));
   private boolean digit_set = false;
   private boolean digit;
   //@ private invariant digit_set ==> digit == ('0' <= c && c <= '9');
   private boolean uppercase_set = false;
   private boolean uppercase;
   //@ private invariant uppercase_set ==> (uppercase == ('A' <= c && c <= 'Z'));
   private boolean lowercase_set = false;
   private boolean lowercase;
   //@ private invariant lowercase_set ==> (lowercase == ('a' <= c && c <= 'z'));

   private /*@ spec_public @*/ final char c;

   /*@ private normal_behavior
     @   ensures !vowel_set && !alphabetic_set && !digit_set;
     @   ensures !uppercase_set && !lowercase_set;
     @ public normal_behavior
     @   ensures this.c == c; @*/
   public /*@ pure @*/ Alphabet(char c) 
   {
	this.c = c;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set && \result == vowel;
     @ public normal_behavior
     @   	ensures \result == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @    	                      || c == 'i' || c == 'I' || c == 'o'
     @				      || c == 'O' || c == 'u' || c == 'U'); @*/
   public boolean isVowel() 
   {
       setVowel();
       return vowel;
   }

   /*@ private normal_behavior
     @   assignable alphabetic_set, alphabetic;
     @   ensures alphabetic_set && \result == alphabetic; 
     @ public normal_behavior
     @   ensures \result == ('a' <= c && c <= 'z')||('A' <= c && c <='Z'); @*/
   public boolean isAlphabetic() 
   {
	setAlphabetic();
	return alphabetic;
   }

   /*@ private normal_behavior
     @   assignable uppercase_set, uppercase;
     @   ensures uppercase_set && \result == uppercase; 
     @ public normal_behavior
     @   ensures \result == ('A' <= c && c <= 'Z'); @*/
   public boolean isUppercase() 
   {
	setUppercase();
	return uppercase;
   }

   /*@ private normal_behavior
      @   assignable lowercase_set, lowercase;
      @   ensures lowercase_set && \result == lowercase; 
      @ public normal_behavior
      @   ensures \result == ('a' <= c && c <= 'z'); @*/
   public boolean isLowercase() 
   {
       setLowercase();
       return lowercase;
   }

   /*@ private normal_behavior
     @   assignable digit_set, digit;
     @   ensures digit_set && \result == digit; 
     @ public normal_behavior
     @   ensures \result == ('0' <= c && c <= '9'); @*/
   public boolean isDigit() 
   {
	setDigit();
	return digit;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set;
     @   ensures vowel <==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @                     	|| c == 'i' || c == 'I' || c == 'o'
     @	 	 	     	|| c == 'O' || c == 'u' || c == 'U'); @*/
   private /*@ spec_public @*/ void setVowel() 
   {
        vowel = false;
        switch (c) {
            case 'a' :
            case 'e' :
            case 'i' :
            case 'o' :
            case 'u' :
            case 'A' :
            case 'E' :
            case 'I' :
            case 'O' :
            case 'U' : vowel = true;
        }
        vowel_set = true;
   }

   /*@ private normal_behavior
     @    assignable alphabetic_set, alphabetic;
     @    ensures alphabetic_set;
     @    ensures alphabetic <==> ('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setAlphabetic() 
   {
	alphabetic = (('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'));		
	alphabetic_set = true;
   }

   /*@ private normal_behavior
     @    assignable uppercase_set, uppercase;
     @    ensures uppercase_set;
     @    ensures uppercase <==> ('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setUppercase() 
   {
	uppercase = ('A' <= c && c <= 'Z');		
	uppercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable lowercase_set, lowercase;
     @    ensures lowercase_set;
     @    ensures lowercase <==> ('a' <= c && c <= 'z'); @*/
   private /*@ spec_public @*/ void setLowercase() 
   {
       lowercase = ('a' <= c && c <= 'z');
       lowercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable digit_set, digit;
     @    ensures digit_set;
     @    ensures digit <==> ('0' <= c && c <= '9'); @*/
   private /*@ spec_public @*/ void setDigit() 
   {
	digit = ('0' <= c && c <= '9');	
	digit_set = true;
   }

   /*@ private normal_behavior
     @   ensures \result == alphabetic_set; @*/
   public /*@ pure @*/ boolean getAlphabetic_set()
   {
	return alphabetic_set;
   }

   /*@ private normal_behavior
     @   ensures \result == uppercase_set; @*/
   public /*@ pure @*/ boolean getUppercase_set()
   {
	return !uppercase_set; // return uppercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == lowercase_set; @*/
   public /*@ pure @*/ boolean getLowercase_set()
   {
	return lowercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == vowel_set; @*/
   public /*@ pure @*/ boolean getVowel_set()
   {
	return vowel_set;
   }

   /*@ private normal_behavior
     @   ensures \result == digit_set; @*/
   public /*@ pure @*/ boolean getDigit_set()
   {
	return digit_set;
   }
   
   /*@ requires 0 <= op && op <= 4;
     @ {|
     @      requires op == 0;
     @      ensures \result[0] ==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' ||
     @		 	         c == 'O' || c == 'u' || c == 'U'); 
     @	    ensures \result[1];
     @ also
     @      requires op == 1;
     @      ensures \result[0] ==> ('A' <= c && c <= 'Z');
     @	    ensures \result[2];
     @ also
     @      requires op == 2;
     @      ensures \result[0] ==> ('a' <= c && c <= 'z');
     @	    ensures \result[3];
     @ also
     @      requires op == 3;
     @      ensures \result[0] ==> ('0' <= c && c <= '9');
     @	    ensures \result[4];
     @ also
     @      requires op == 4;
     @	    ensures \result[5];
     @ |} @*/
   public boolean[] driver(int op) 
   {
	boolean[] result = new boolean[6];
	switch (op) {
		case 0 :
		result[0] = isVowel();
		result[1] = getVowel_set();
		break;
		
		case 1 :
		result[0] = isUppercase();
		result[2] = getUppercase_set();
		break;

		case 2 :
		result[0] = isLowercase();
		result[3] = getLowercase_set();
		break;

		case 3 :
		result[0] = isDigit();
		result[4] = getDigit_set();
		break;

		default :
		result[0] = isAlphabetic();
		result[5] = getAlphabetic_set();
		break;
	}
	return result;
   }
}",Buggy
"public class Alphabet {
   private boolean vowel_set = false;
   private boolean vowel;
   /*@ private invariant vowel_set ==> 
                     (vowel == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
                               || c == 'i' || c == 'I' || c == 'o'
			       || c == 'O' || c == 'u' || c == 'U')); @*/

   private boolean alphabetic_set = false;
   private boolean alphabetic;
   //@ private invariant alphabetic_set ==> alphabetic == (('a' <= c && c <= 'z')||('A' <= c && c <='Z'));
   private boolean digit_set = false;
   private boolean digit;
   //@ private invariant digit_set ==> digit == ('0' <= c && c <= '9');
   private boolean uppercase_set = false;
   private boolean uppercase;
   //@ private invariant uppercase_set ==> (uppercase == ('A' <= c && c <= 'Z'));
   private boolean lowercase_set = false;
   private boolean lowercase;
   //@ private invariant lowercase_set ==> (lowercase == ('a' <= c && c <= 'z'));

   private /*@ spec_public @*/ final char c;

   /*@ private normal_behavior
     @   ensures !vowel_set && !alphabetic_set && !digit_set;
     @   ensures !uppercase_set && !lowercase_set;
     @ public normal_behavior
     @   ensures this.c == c; @*/
   public /*@ pure @*/ Alphabet(char c) 
   {
	this.c = c;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set && \result == vowel;
     @ public normal_behavior
     @   	ensures \result == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @    	                      || c == 'i' || c == 'I' || c == 'o'
     @				      || c == 'O' || c == 'u' || c == 'U'); @*/
   public boolean isVowel() 
   {
       setVowel();
       return vowel;
   }

   /*@ private normal_behavior
     @   assignable alphabetic_set, alphabetic;
     @   ensures alphabetic_set && \result == alphabetic; 
     @ public normal_behavior
     @   ensures \result == ('a' <= c && c <= 'z')||('A' <= c && c <='Z'); @*/
   public boolean isAlphabetic() 
   {
	setAlphabetic();
	return alphabetic;
   }

   /*@ private normal_behavior
     @   assignable uppercase_set, uppercase;
     @   ensures uppercase_set && \result == uppercase; 
     @ public normal_behavior
     @   ensures \result == ('A' <= c && c <= 'Z'); @*/
   public boolean isUppercase() 
   {
	setUppercase();
	return uppercase;
   }

   /*@ private normal_behavior
      @   assignable lowercase_set, lowercase;
      @   ensures lowercase_set && \result == lowercase; 
      @ public normal_behavior
      @   ensures \result == ('a' <= c && c <= 'z'); @*/
   public boolean isLowercase() 
   {
       setLowercase();
       return lowercase;
   }

   /*@ private normal_behavior
     @   assignable digit_set, digit;
     @   ensures digit_set && \result == digit; 
     @ public normal_behavior
     @   ensures \result == ('0' <= c && c <= '9'); @*/
   public boolean isDigit() 
   {
	setDigit();
	return digit;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set;
     @   ensures vowel <==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @                     	|| c == 'i' || c == 'I' || c == 'o'
     @	 	 	     	|| c == 'O' || c == 'u' || c == 'U'); @*/
   private /*@ spec_public @*/ void setVowel() 
   {
        vowel = false;
        switch (c) {
            case 'a' :
            case 'e' :
            case 'i' :
            case 'o' :
            case 'u' :
            case 'A' :
            case 'E' :
            case 'I' :
            case 'O' :
            case 'U' : vowel = true;
        }
        vowel_set = true;
   }

   /*@ private normal_behavior
     @    assignable alphabetic_set, alphabetic;
     @    ensures alphabetic_set;
     @    ensures alphabetic <==> ('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setAlphabetic() 
   {
	alphabetic = (('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'));		
	alphabetic_set = true;
   }

   /*@ private normal_behavior
     @    assignable uppercase_set, uppercase;
     @    ensures uppercase_set;
     @    ensures uppercase <==> ('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setUppercase() 
   {
	uppercase = ('A' <= c && c <= 'Z');		
	uppercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable lowercase_set, lowercase;
     @    ensures lowercase_set;
     @    ensures lowercase <==> ('a' <= c && c <= 'z'); @*/
   private /*@ spec_public @*/ void setLowercase() 
   {
       lowercase = ('a' <= c && c <= 'z');
       lowercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable digit_set, digit;
     @    ensures digit_set;
     @    ensures digit <==> ('0' <= c && c <= '9'); @*/
   private /*@ spec_public @*/ void setDigit() 
   {
	digit = ('0' <= c && c <= '9');	
	digit_set = true;
   }

   /*@ private normal_behavior
     @   ensures \result == alphabetic_set; @*/
   public /*@ pure @*/ boolean getAlphabetic_set()
   {
	return alphabetic_set;
   }

   /*@ private normal_behavior
     @   ensures \result == uppercase_set; @*/
   public /*@ pure @*/ boolean getUppercase_set()
   {
	return uppercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == lowercase_set; @*/
   public /*@ pure @*/ boolean getLowercase_set()
   {
	return !lowercase_set; // return lowercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == vowel_set; @*/
   public /*@ pure @*/ boolean getVowel_set()
   {
	return vowel_set;
   }

   /*@ private normal_behavior
     @   ensures \result == digit_set; @*/
   public /*@ pure @*/ boolean getDigit_set()
   {
	return digit_set;
   }
   
   /*@ requires 0 <= op && op <= 4;
     @ {|
     @      requires op == 0;
     @      ensures \result[0] ==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' ||
     @		 	         c == 'O' || c == 'u' || c == 'U'); 
     @	    ensures \result[1];
     @ also
     @      requires op == 1;
     @      ensures \result[0] ==> ('A' <= c && c <= 'Z');
     @	    ensures \result[2];
     @ also
     @      requires op == 2;
     @      ensures \result[0] ==> ('a' <= c && c <= 'z');
     @	    ensures \result[3];
     @ also
     @      requires op == 3;
     @      ensures \result[0] ==> ('0' <= c && c <= '9');
     @	    ensures \result[4];
     @ also
     @      requires op == 4;
     @	    ensures \result[5];
     @ |} @*/
   public boolean[] driver(int op) 
   {
	boolean[] result = new boolean[6];
	switch (op) {
		case 0 :
		result[0] = isVowel();
		result[1] = getVowel_set();
		break;
		
		case 1 :
		result[0] = isUppercase();
		result[2] = getUppercase_set();
		break;

		case 2 :
		result[0] = isLowercase();
		result[3] = getLowercase_set();
		break;

		case 3 :
		result[0] = isDigit();
		result[4] = getDigit_set();
		break;

		default :
		result[0] = isAlphabetic();
		result[5] = getAlphabetic_set();
		break;
	}
	return result;
   }
}",Buggy
"public class Alphabet {
   private boolean vowel_set = false;
   private boolean vowel;
   /*@ private invariant vowel_set ==> 
                     (vowel == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
                               || c == 'i' || c == 'I' || c == 'o'
			       || c == 'O' || c == 'u' || c == 'U')); @*/

   private boolean alphabetic_set = false;
   private boolean alphabetic;
   //@ private invariant alphabetic_set ==> alphabetic == (('a' <= c && c <= 'z')||('A' <= c && c <='Z'));
   private boolean digit_set = false;
   private boolean digit;
   //@ private invariant digit_set ==> digit == ('0' <= c && c <= '9');
   private boolean uppercase_set = false;
   private boolean uppercase;
   //@ private invariant uppercase_set ==> (uppercase == ('A' <= c && c <= 'Z'));
   private boolean lowercase_set = false;
   private boolean lowercase;
   //@ private invariant lowercase_set ==> (lowercase == ('a' <= c && c <= 'z'));

   private /*@ spec_public @*/ final char c;

   /*@ private normal_behavior
     @   ensures !vowel_set && !alphabetic_set && !digit_set;
     @   ensures !uppercase_set && !lowercase_set;
     @ public normal_behavior
     @   ensures this.c == c; @*/
   public /*@ pure @*/ Alphabet(char c) 
   {
	this.c = c;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set && \result == vowel;
     @ public normal_behavior
     @   	ensures \result == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @    	                      || c == 'i' || c == 'I' || c == 'o'
     @				      || c == 'O' || c == 'u' || c == 'U'); @*/
   public boolean isVowel() 
   {
       setVowel();
       return vowel;
   }

   /*@ private normal_behavior
     @   assignable alphabetic_set, alphabetic;
     @   ensures alphabetic_set && \result == alphabetic; 
     @ public normal_behavior
     @   ensures \result == ('a' <= c && c <= 'z')||('A' <= c && c <='Z'); @*/
   public boolean isAlphabetic() 
   {
	setAlphabetic();
	return alphabetic;
   }

   /*@ private normal_behavior
     @   assignable uppercase_set, uppercase;
     @   ensures uppercase_set && \result == uppercase; 
     @ public normal_behavior
     @   ensures \result == ('A' <= c && c <= 'Z'); @*/
   public boolean isUppercase() 
   {
	setUppercase();
	return uppercase;
   }

   /*@ private normal_behavior
      @   assignable lowercase_set, lowercase;
      @   ensures lowercase_set && \result == lowercase; 
      @ public normal_behavior
      @   ensures \result == ('a' <= c && c <= 'z'); @*/
   public boolean isLowercase() 
   {
       setLowercase();
       return lowercase;
   }

   /*@ private normal_behavior
     @   assignable digit_set, digit;
     @   ensures digit_set && \result == digit; 
     @ public normal_behavior
     @   ensures \result == ('0' <= c && c <= '9'); @*/
   public boolean isDigit() 
   {
	setDigit();
	return digit;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set;
     @   ensures vowel <==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @                     	|| c == 'i' || c == 'I' || c == 'o'
     @	 	 	     	|| c == 'O' || c == 'u' || c == 'U'); @*/
   private /*@ spec_public @*/ void setVowel() 
   {
        vowel = false;
        switch (c) {
            case 'a' :
            case 'e' :
            case 'i' :
            case 'o' :
            case 'u' :
            case 'A' :
            case 'E' :
            case 'I' :
            case 'O' :
            case 'U' : vowel = true;
        }
        vowel_set = true;
   }

   /*@ private normal_behavior
     @    assignable alphabetic_set, alphabetic;
     @    ensures alphabetic_set;
     @    ensures alphabetic <==> ('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setAlphabetic() 
   {
	alphabetic = (('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'));		
	alphabetic_set = true;
   }

   /*@ private normal_behavior
     @    assignable uppercase_set, uppercase;
     @    ensures uppercase_set;
     @    ensures uppercase <==> ('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setUppercase() 
   {
	uppercase = ('A' <= c && c <= 'Z');		
	uppercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable lowercase_set, lowercase;
     @    ensures lowercase_set;
     @    ensures lowercase <==> ('a' <= c && c <= 'z'); @*/
   private /*@ spec_public @*/ void setLowercase() 
   {
       lowercase = ('a' <= c && c <= 'z');
       lowercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable digit_set, digit;
     @    ensures digit_set;
     @    ensures digit <==> ('0' <= c && c <= '9'); @*/
   private /*@ spec_public @*/ void setDigit() 
   {
	digit = ('0' <= c && c <= '9');	
	digit_set = true;
   }

   /*@ private normal_behavior
     @   ensures \result == alphabetic_set; @*/
   public /*@ pure @*/ boolean getAlphabetic_set()
   {
	return alphabetic_set;
   }

   /*@ private normal_behavior
     @   ensures \result == uppercase_set; @*/
   public /*@ pure @*/ boolean getUppercase_set()
   {
	return uppercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == lowercase_set; @*/
   public /*@ pure @*/ boolean getLowercase_set()
   {
	return lowercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == vowel_set; @*/
   public /*@ pure @*/ boolean getVowel_set()
   {
	return !vowel_set; // return vowel_set;
   }

   /*@ private normal_behavior
     @   ensures \result == digit_set; @*/
   public /*@ pure @*/ boolean getDigit_set()
   {
	return digit_set;
   }
   
   /*@ requires 0 <= op && op <= 4;
     @ {|
     @      requires op == 0;
     @      ensures \result[0] ==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' ||
     @		 	         c == 'O' || c == 'u' || c == 'U'); 
     @	    ensures \result[1];
     @ also
     @      requires op == 1;
     @      ensures \result[0] ==> ('A' <= c && c <= 'Z');
     @	    ensures \result[2];
     @ also
     @      requires op == 2;
     @      ensures \result[0] ==> ('a' <= c && c <= 'z');
     @	    ensures \result[3];
     @ also
     @      requires op == 3;
     @      ensures \result[0] ==> ('0' <= c && c <= '9');
     @	    ensures \result[4];
     @ also
     @      requires op == 4;
     @	    ensures \result[5];
     @ |} @*/
   public boolean[] driver(int op) 
   {
	boolean[] result = new boolean[6];
	switch (op) {
		case 0 :
		result[0] = isVowel();
		result[1] = getVowel_set();
		break;
		
		case 1 :
		result[0] = isUppercase();
		result[2] = getUppercase_set();
		break;

		case 2 :
		result[0] = isLowercase();
		result[3] = getLowercase_set();
		break;

		case 3 :
		result[0] = isDigit();
		result[4] = getDigit_set();
		break;

		default :
		result[0] = isAlphabetic();
		result[5] = getAlphabetic_set();
		break;
	}
	return result;
   }
}",Buggy
"public class Alphabet {
   private boolean vowel_set = false;
   private boolean vowel;
   /*@ private invariant vowel_set ==> 
                     (vowel == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
                               || c == 'i' || c == 'I' || c == 'o'
			       || c == 'O' || c == 'u' || c == 'U')); @*/

   private boolean alphabetic_set = false;
   private boolean alphabetic;
   //@ private invariant alphabetic_set ==> alphabetic == (('a' <= c && c <= 'z')||('A' <= c && c <='Z'));
   private boolean digit_set = false;
   private boolean digit;
   //@ private invariant digit_set ==> digit == ('0' <= c && c <= '9');
   private boolean uppercase_set = false;
   private boolean uppercase;
   //@ private invariant uppercase_set ==> (uppercase == ('A' <= c && c <= 'Z'));
   private boolean lowercase_set = false;
   private boolean lowercase;
   //@ private invariant lowercase_set ==> (lowercase == ('a' <= c && c <= 'z'));

   private /*@ spec_public @*/ final char c;

   /*@ private normal_behavior
     @   ensures !vowel_set && !alphabetic_set && !digit_set;
     @   ensures !uppercase_set && !lowercase_set;
     @ public normal_behavior
     @   ensures this.c == c; @*/
   public /*@ pure @*/ Alphabet(char c) 
   {
	this.c = c;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set && \result == vowel;
     @ public normal_behavior
     @   	ensures \result == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @    	                      || c == 'i' || c == 'I' || c == 'o'
     @				      || c == 'O' || c == 'u' || c == 'U'); @*/
   public boolean isVowel() 
   {
       setVowel();
       return vowel;
   }

   /*@ private normal_behavior
     @   assignable alphabetic_set, alphabetic;
     @   ensures alphabetic_set && \result == alphabetic; 
     @ public normal_behavior
     @   ensures \result == ('a' <= c && c <= 'z')||('A' <= c && c <='Z'); @*/
   public boolean isAlphabetic() 
   {
	setAlphabetic();
	return alphabetic;
   }

   /*@ private normal_behavior
     @   assignable uppercase_set, uppercase;
     @   ensures uppercase_set && \result == uppercase; 
     @ public normal_behavior
     @   ensures \result == ('A' <= c && c <= 'Z'); @*/
   public boolean isUppercase() 
   {
	setUppercase();
	return uppercase;
   }

   /*@ private normal_behavior
      @   assignable lowercase_set, lowercase;
      @   ensures lowercase_set && \result == lowercase; 
      @ public normal_behavior
      @   ensures \result == ('a' <= c && c <= 'z'); @*/
   public boolean isLowercase() 
   {
       setLowercase();
       return lowercase;
   }

   /*@ private normal_behavior
     @   assignable digit_set, digit;
     @   ensures digit_set && \result == digit; 
     @ public normal_behavior
     @   ensures \result == ('0' <= c && c <= '9'); @*/
   public boolean isDigit() 
   {
	setDigit();
	return digit;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set;
     @   ensures vowel <==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @                     	|| c == 'i' || c == 'I' || c == 'o'
     @	 	 	     	|| c == 'O' || c == 'u' || c == 'U'); @*/
   private /*@ spec_public @*/ void setVowel() 
   {
        vowel = false;
        switch (c) {
            case 'a' :
            case 'e' :
            case 'i' :
            case 'o' :
            case 'u' :
            case 'A' :
            case 'E' :
            case 'I' :
            case 'O' :
            case 'U' : vowel = true;
        }
        vowel_set = true;
   }

   /*@ private normal_behavior
     @    assignable alphabetic_set, alphabetic;
     @    ensures alphabetic_set;
     @    ensures alphabetic <==> ('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setAlphabetic() 
   {
	alphabetic = (('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'));		
	alphabetic_set = true;
   }

   /*@ private normal_behavior
     @    assignable uppercase_set, uppercase;
     @    ensures uppercase_set;
     @    ensures uppercase <==> ('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setUppercase() 
   {
	uppercase = ('A' <= c && c <= 'Z');		
	uppercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable lowercase_set, lowercase;
     @    ensures lowercase_set;
     @    ensures lowercase <==> ('a' <= c && c <= 'z'); @*/
   private /*@ spec_public @*/ void setLowercase() 
   {
       lowercase = ('a' <= c && c <= 'z');
       lowercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable digit_set, digit;
     @    ensures digit_set;
     @    ensures digit <==> ('0' <= c && c <= '9'); @*/
   private /*@ spec_public @*/ void setDigit() 
   {
	digit = ('0' <= c && c <= '9');	
	digit_set = true;
   }

   /*@ private normal_behavior
     @   ensures \result == alphabetic_set; @*/
   public /*@ pure @*/ boolean getAlphabetic_set()
   {
	return alphabetic_set;
   }

   /*@ private normal_behavior
     @   ensures \result == uppercase_set; @*/
   public /*@ pure @*/ boolean getUppercase_set()
   {
	return uppercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == lowercase_set; @*/
   public /*@ pure @*/ boolean getLowercase_set()
   {
	return lowercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == vowel_set; @*/
   public /*@ pure @*/ boolean getVowel_set()
   {
	return vowel_set;
   }

   /*@ private normal_behavior
     @   ensures \result == digit_set; @*/
   public /*@ pure @*/ boolean getDigit_set()
   {
	return !digit_set; // return digit_set;
   } 
   
   /*@ requires 0 <= op && op <= 4;
     @ {|
     @      requires op == 0;
     @      ensures \result[0] ==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' ||
     @		 	         c == 'O' || c == 'u' || c == 'U'); 
     @	    ensures \result[1];
     @ also
     @      requires op == 1;
     @      ensures \result[0] ==> ('A' <= c && c <= 'Z');
     @	    ensures \result[2];
     @ also
     @      requires op == 2;
     @      ensures \result[0] ==> ('a' <= c && c <= 'z');
     @	    ensures \result[3];
     @ also
     @      requires op == 3;
     @      ensures \result[0] ==> ('0' <= c && c <= '9');
     @	    ensures \result[4];
     @ also
     @      requires op == 4;
     @	    ensures \result[5];
     @ |} @*/
   public boolean[] driver(int op) 
   {
	boolean[] result = new boolean[6];
	switch (op) {
		case 0 :
		result[0] = isVowel();
		result[1] = getVowel_set();
		break;
		
		case 1 :
		result[0] = isUppercase();
		result[2] = getUppercase_set();
		break;

		case 2 :
		result[0] = isLowercase();
		result[3] = getLowercase_set();
		break;

		case 3 :
		result[0] = isDigit();
		result[4] = getDigit_set();
		break;

		default :
		result[0] = isAlphabetic();
		result[5] = getAlphabetic_set();
		break;
	}
	return result;
   }
}",Buggy
"public class Alphabet {
   private boolean vowel_set = false;
   private boolean vowel;
   /*@ private invariant vowel_set ==> 
                     (vowel == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
                               || c == 'i' || c == 'I' || c == 'o'
			       || c == 'O' || c == 'u' || c == 'U')); @*/

   private boolean alphabetic_set = false;
   private boolean alphabetic;
   //@ private invariant alphabetic_set ==> alphabetic == (('a' <= c && c <= 'z')||('A' <= c && c <='Z'));
   private boolean digit_set = false;
   private boolean digit;
   //@ private invariant digit_set ==> digit == ('0' <= c && c <= '9');
   private boolean uppercase_set = false;
   private boolean uppercase;
   //@ private invariant uppercase_set ==> (uppercase == ('A' <= c && c <= 'Z'));
   private boolean lowercase_set = false;
   private boolean lowercase;
   //@ private invariant lowercase_set ==> (lowercase == ('a' <= c && c <= 'z'));

   private /*@ spec_public @*/ final char c;

   /*@ private normal_behavior
     @   ensures !vowel_set && !alphabetic_set && !digit_set;
     @   ensures !uppercase_set && !lowercase_set;
     @ public normal_behavior
     @   ensures this.c == c; @*/
   public /*@ pure @*/ Alphabet(char c) 
   {
	this.c = c;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set && \result == vowel;
     @ public normal_behavior
     @   	ensures \result == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @    	                      || c == 'i' || c == 'I' || c == 'o'
     @				      || c == 'O' || c == 'u' || c == 'U'); @*/
   public boolean isVowel() 
   {
       setVowel();
       return vowel;
   }

   /*@ private normal_behavior
     @   assignable alphabetic_set, alphabetic;
     @   ensures alphabetic_set && \result == alphabetic; 
     @ public normal_behavior
     @   ensures \result == ('a' <= c && c <= 'z')||('A' <= c && c <='Z'); @*/
   public boolean isAlphabetic() 
   {
	setAlphabetic();
	return alphabetic;
   }

   /*@ private normal_behavior
     @   assignable uppercase_set, uppercase;
     @   ensures uppercase_set && \result == uppercase; 
     @ public normal_behavior
     @   ensures \result == ('A' <= c && c <= 'Z'); @*/
   public boolean isUppercase() 
   {
	setUppercase();
	return uppercase;
   }

   /*@ private normal_behavior
      @   assignable lowercase_set, lowercase;
      @   ensures lowercase_set && \result == lowercase; 
      @ public normal_behavior
      @   ensures \result == ('a' <= c && c <= 'z'); @*/
   public boolean isLowercase() 
   {
       setLowercase();
       return lowercase;
   }

   /*@ private normal_behavior
     @   assignable digit_set, digit;
     @   ensures digit_set && \result == digit; 
     @ public normal_behavior
     @   ensures \result == ('0' <= c && c <= '9'); @*/
   public boolean isDigit() 
   {
	setDigit();
	return digit;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set;
     @   ensures vowel <==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @                     	|| c == 'i' || c == 'I' || c == 'o'
     @	 	 	     	|| c == 'O' || c == 'u' || c == 'U'); @*/
   private /*@ spec_public @*/ void setVowel() 
   {
        vowel = false;
        switch (c) {
            case 'a' :
            case 'e' :
            case 'i' :
            case 'o' :
            case 'u' :
            case 'A' :
            case 'E' :
            case 'I' :
            case 'O' :
            case 'U' : vowel = true;
        }
        vowel_set = true;
   }

   /*@ private normal_behavior
     @    assignable alphabetic_set, alphabetic;
     @    ensures alphabetic_set;
     @    ensures alphabetic <==> ('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setAlphabetic() 
   {
	alphabetic = (('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'));		
	alphabetic_set = true;
   }

   /*@ private normal_behavior
     @    assignable uppercase_set, uppercase;
     @    ensures uppercase_set;
     @    ensures uppercase <==> ('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setUppercase() 
   {
	uppercase = ('A' <= c && c <= 'Z');		
	uppercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable lowercase_set, lowercase;
     @    ensures lowercase_set;
     @    ensures lowercase <==> ('a' <= c && c <= 'z'); @*/
   private /*@ spec_public @*/ void setLowercase() 
   {
       lowercase = ('a' <= c && c <= 'z');
       lowercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable digit_set, digit;
     @    ensures digit_set;
     @    ensures digit <==> ('0' <= c && c <= '9'); @*/
   private /*@ spec_public @*/ void setDigit() 
   {
	digit = ('0' <= c && c <= '9');	
	digit_set = true;
   }

   /*@ private normal_behavior
     @   ensures \result == alphabetic_set; @*/
   public /*@ pure @*/ boolean getAlphabetic_set()
   {
	return alphabetic_set;
   }

   /*@ private normal_behavior
     @   ensures \result == uppercase_set; @*/
   public /*@ pure @*/ boolean getUppercase_set()
   {
	return uppercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == lowercase_set; @*/
   public /*@ pure @*/ boolean getLowercase_set()
   {
	return lowercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == vowel_set; @*/
   public /*@ pure @*/ boolean getVowel_set()
   {
	return vowel_set;
   }

   /*@ private normal_behavior
     @   ensures \result == digit_set; @*/
   public /*@ pure @*/ boolean getDigit_set()
   {
	return digit_set;
   }
   
   /*@ requires 0 <= op && op <= 4;
     @ {|
     @      requires op == 0;
     @      ensures \result[0] ==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' ||
     @		 	         c == 'O' || c == 'u' || c == 'U'); 
     @	    ensures \result[1];
     @ also
     @      requires op == 1;
     @      ensures \result[0] ==> ('A' <= c && c <= 'Z');
     @	    ensures \result[2];
     @ also
     @      requires op == 2;
     @      ensures \result[0] ==> ('a' <= c && c <= 'z');
     @	    ensures \result[3];
     @ also
     @      requires op == 3;
     @      ensures \result[0] ==> ('0' <= c && c <= '9');
     @	    ensures \result[4];
     @ also
     @      requires op == 4;
     @	    ensures \result[5];
     @ |} @*/
   public boolean[] driver(int op) 
   {
	boolean[] result = new boolean[6];
	switch (op) {
		case 0 :
		result[0] = isVowel();
		result[1] = getVowel_set();
		break;
		
		case 1 :
		result[0] = isUppercase();
		result[2] = getUppercase_set();
		break;

		case 2 :
		result[0] = isLowercase();
		result[3] = getLowercase_set();
		break;

		case 3 :
		result[0] = isDigit();
		result[4] = getDigit_set();
		break;

		default :
		result[0] = isAlphabetic();
		result[5] = getAlphabetic_set();
		break;
	}
	// return result;
	if (result != null)
		return null;
	else throw new IllegalArgumentException(); 
   }
}",Buggy
"public class Alphabet {
   private boolean vowel_set = false;
   private boolean vowel;
   /*@ private invariant vowel_set ==> 
                     (vowel == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
                               || c == 'i' || c == 'I' || c == 'o'
			       || c == 'O' || c == 'u' || c == 'U')); @*/

   private boolean alphabetic_set = false;
   private boolean alphabetic;
   //@ private invariant alphabetic_set ==> alphabetic == (('a' <= c && c <= 'z')||('A' <= c && c <='Z'));
   private boolean digit_set = false;
   private boolean digit;
   //@ private invariant digit_set ==> digit == ('0' <= c && c <= '9');
   private boolean uppercase_set = false;
   private boolean uppercase;
   //@ private invariant uppercase_set ==> (uppercase == ('A' <= c && c <= 'Z'));
   private boolean lowercase_set = false;
   private boolean lowercase;
   //@ private invariant lowercase_set ==> (lowercase == ('a' <= c && c <= 'z'));

   private /*@ spec_public @*/ final char c;

   /*@ private normal_behavior
     @   ensures !vowel_set && !alphabetic_set && !digit_set;
     @   ensures !uppercase_set && !lowercase_set;
     @ public normal_behavior
     @   ensures this.c == c; @*/
   public /*@ pure @*/ Alphabet(char c) 
   {
	this.c = c;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set && \result == vowel;
     @ public normal_behavior
     @   	ensures \result == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @    	                      || c == 'i' || c == 'I' || c == 'o'
     @				      || c == 'O' || c == 'u' || c == 'U'); @*/
   public boolean isVowel() 
   {
       setVowel();
       return vowel;
   }

   /*@ private normal_behavior
     @   assignable alphabetic_set, alphabetic;
     @   ensures alphabetic_set && \result == alphabetic; 
     @ public normal_behavior
     @   ensures \result == ('a' <= c && c <= 'z')||('A' <= c && c <='Z'); @*/
   public boolean isAlphabetic() 
   {
	setAlphabetic();
	return !alphabetic; // return alphabetic;
   }

   /*@ private normal_behavior
     @   assignable uppercase_set, uppercase;
     @   ensures uppercase_set && \result == uppercase; 
     @ public normal_behavior
     @   ensures \result == ('A' <= c && c <= 'Z'); @*/
   public boolean isUppercase() 
   {
	setUppercase();
	return uppercase;
   }

   /*@ private normal_behavior
      @   assignable lowercase_set, lowercase;
      @   ensures lowercase_set && \result == lowercase; 
      @ public normal_behavior
      @   ensures \result == ('a' <= c && c <= 'z'); @*/
   public boolean isLowercase() 
   {
       setLowercase();
       return lowercase;
   }

   /*@ private normal_behavior
     @   assignable digit_set, digit;
     @   ensures digit_set && \result == digit; 
     @ public normal_behavior
     @   ensures \result == ('0' <= c && c <= '9'); @*/
   public boolean isDigit() 
   {
	setDigit();
	return digit;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set;
     @   ensures vowel <==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @                     	|| c == 'i' || c == 'I' || c == 'o'
     @	 	 	     	|| c == 'O' || c == 'u' || c == 'U'); @*/
   private /*@ spec_public @*/ void setVowel() 
   {
        vowel = false;
        switch (c) {
            case 'a' :
            case 'e' :
            case 'i' :
            case 'o' :
            case 'u' :
            case 'A' :
            case 'E' :
            case 'I' :
            case 'O' :
            case 'U' : vowel = true;
        }
        vowel_set = true;
   }

   /*@ private normal_behavior
     @    assignable alphabetic_set, alphabetic;
     @    ensures alphabetic_set;
     @    ensures alphabetic <==> ('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setAlphabetic() 
   {
	alphabetic = (('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'));		
	alphabetic_set = true;
   }

   /*@ private normal_behavior
     @    assignable uppercase_set, uppercase;
     @    ensures uppercase_set;
     @    ensures uppercase <==> ('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setUppercase() 
   {
	uppercase = ('A' <= c && c <= 'Z');		
	uppercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable lowercase_set, lowercase;
     @    ensures lowercase_set;
     @    ensures lowercase <==> ('a' <= c && c <= 'z'); @*/
   private /*@ spec_public @*/ void setLowercase() 
   {
       lowercase = ('a' <= c && c <= 'z');
       lowercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable digit_set, digit;
     @    ensures digit_set;
     @    ensures digit <==> ('0' <= c && c <= '9'); @*/
   private /*@ spec_public @*/ void setDigit() 
   {
	digit = ('0' <= c && c <= '9');	
	digit_set = true;
   }

   /*@ private normal_behavior
     @   ensures \result == alphabetic_set; @*/
   public /*@ pure @*/ boolean getAlphabetic_set()
   {
	return alphabetic_set;
   }

   /*@ private normal_behavior
     @   ensures \result == uppercase_set; @*/
   public /*@ pure @*/ boolean getUppercase_set()
   {
	return uppercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == lowercase_set; @*/
   public /*@ pure @*/ boolean getLowercase_set()
   {
	return lowercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == vowel_set; @*/
   public /*@ pure @*/ boolean getVowel_set()
   {
	return vowel_set;
   }

   /*@ private normal_behavior
     @   ensures \result == digit_set; @*/
   public /*@ pure @*/ boolean getDigit_set()
   {
	return digit_set;
   }
   
   /*@ requires 0 <= op && op <= 4;
     @ {|
     @      requires op == 0;
     @      ensures \result[0] ==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' ||
     @		 	         c == 'O' || c == 'u' || c == 'U'); 
     @	    ensures \result[1];
     @ also
     @      requires op == 1;
     @      ensures \result[0] ==> ('A' <= c && c <= 'Z');
     @	    ensures \result[2];
     @ also
     @      requires op == 2;
     @      ensures \result[0] ==> ('a' <= c && c <= 'z');
     @	    ensures \result[3];
     @ also
     @      requires op == 3;
     @      ensures \result[0] ==> ('0' <= c && c <= '9');
     @	    ensures \result[4];
     @ also
     @      requires op == 4;
     @	    ensures \result[5];
     @ |} @*/
   public boolean[] driver(int op) 
   {
	boolean[] result = new boolean[6];
	switch (op) {
		case 0 :
		result[0] = isVowel();
		result[1] = getVowel_set();
		break;
		
		case 1 :
		result[0] = isUppercase();
		result[2] = getUppercase_set();
		break;

		case 2 :
		result[0] = isLowercase();
		result[3] = getLowercase_set();
		break;

		case 3 :
		result[0] = isDigit();
		result[4] = getDigit_set();
		break;

		default :
		result[0] = isAlphabetic();
		result[5] = getAlphabetic_set();
		break;
	}
	return result;
   }
}",Buggy
"public class Alphabet {
   private boolean vowel_set = false;
   private boolean vowel;
   /*@ private invariant vowel_set ==> 
                     (vowel == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
                               || c == 'i' || c == 'I' || c == 'o'
			       || c == 'O' || c == 'u' || c == 'U')); @*/

   private boolean alphabetic_set = false;
   private boolean alphabetic;
   //@ private invariant alphabetic_set ==> alphabetic == (('a' <= c && c <= 'z')||('A' <= c && c <='Z'));
   private boolean digit_set = false;
   private boolean digit;
   //@ private invariant digit_set ==> digit == ('0' <= c && c <= '9');
   private boolean uppercase_set = false;
   private boolean uppercase;
   //@ private invariant uppercase_set ==> (uppercase == ('A' <= c && c <= 'Z'));
   private boolean lowercase_set = false;
   private boolean lowercase;
   //@ private invariant lowercase_set ==> (lowercase == ('a' <= c && c <= 'z'));

   private /*@ spec_public @*/ final char c;

   /*@ private normal_behavior
     @   ensures !vowel_set && !alphabetic_set && !digit_set;
     @   ensures !uppercase_set && !lowercase_set;
     @ public normal_behavior
     @   ensures this.c == c; @*/
   public /*@ pure @*/ Alphabet(char c) 
   {
	this.c = c;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set && \result == vowel;
     @ public normal_behavior
     @   	ensures \result == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @    	                      || c == 'i' || c == 'I' || c == 'o'
     @				      || c == 'O' || c == 'u' || c == 'U'); @*/
   public boolean isVowel() 
   {
       setVowel();
       return vowel;
   }

   /*@ private normal_behavior
     @   assignable alphabetic_set, alphabetic;
     @   ensures alphabetic_set && \result == alphabetic; 
     @ public normal_behavior
     @   ensures \result == ('a' <= c && c <= 'z')||('A' <= c && c <='Z'); @*/
   public boolean isAlphabetic() 
   {
	setAlphabetic();
	return alphabetic;
   }

   /*@ private normal_behavior
     @   assignable uppercase_set, uppercase;
     @   ensures uppercase_set && \result == uppercase; 
     @ public normal_behavior
     @   ensures \result == ('A' <= c && c <= 'Z'); @*/
   public boolean isUppercase() 
   {
	// setUppercase();
	return uppercase;
   }

   /*@ private normal_behavior
      @   assignable lowercase_set, lowercase;
      @   ensures lowercase_set && \result == lowercase; 
      @ public normal_behavior
      @   ensures \result == ('a' <= c && c <= 'z'); @*/
   public boolean isLowercase() 
   {
       setLowercase();
       return lowercase;
   }

   /*@ private normal_behavior
     @   assignable digit_set, digit;
     @   ensures digit_set && \result == digit; 
     @ public normal_behavior
     @   ensures \result == ('0' <= c && c <= '9'); @*/
   public boolean isDigit() 
   {
	setDigit();
	return digit;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set;
     @   ensures vowel <==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @                     	|| c == 'i' || c == 'I' || c == 'o'
     @	 	 	     	|| c == 'O' || c == 'u' || c == 'U'); @*/
   private /*@ spec_public @*/ void setVowel() 
   {
        vowel = false;
        switch (c) {
            case 'a' :
            case 'e' :
            case 'i' :
            case 'o' :
            case 'u' :
            case 'A' :
            case 'E' :
            case 'I' :
            case 'O' :
            case 'U' : vowel = true;
        }
        vowel_set = true;
   }

   /*@ private normal_behavior
     @    assignable alphabetic_set, alphabetic;
     @    ensures alphabetic_set;
     @    ensures alphabetic <==> ('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setAlphabetic() 
   {
	alphabetic = (('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'));		
	alphabetic_set = true;
   }

   /*@ private normal_behavior
     @    assignable uppercase_set, uppercase;
     @    ensures uppercase_set;
     @    ensures uppercase <==> ('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setUppercase() 
   {
	uppercase = ('A' <= c && c <= 'Z');		
	uppercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable lowercase_set, lowercase;
     @    ensures lowercase_set;
     @    ensures lowercase <==> ('a' <= c && c <= 'z'); @*/
   private /*@ spec_public @*/ void setLowercase() 
   {
       lowercase = ('a' <= c && c <= 'z');
       lowercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable digit_set, digit;
     @    ensures digit_set;
     @    ensures digit <==> ('0' <= c && c <= '9'); @*/
   private /*@ spec_public @*/ void setDigit() 
   {
	digit = ('0' <= c && c <= '9');	
	digit_set = true;
   }

   /*@ private normal_behavior
     @   ensures \result == alphabetic_set; @*/
   public /*@ pure @*/ boolean getAlphabetic_set()
   {
	return alphabetic_set;
   }

   /*@ private normal_behavior
     @   ensures \result == uppercase_set; @*/
   public /*@ pure @*/ boolean getUppercase_set()
   {
	return uppercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == lowercase_set; @*/
   public /*@ pure @*/ boolean getLowercase_set()
   {
	return lowercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == vowel_set; @*/
   public /*@ pure @*/ boolean getVowel_set()
   {
	return vowel_set;
   }

   /*@ private normal_behavior
     @   ensures \result == digit_set; @*/
   public /*@ pure @*/ boolean getDigit_set()
   {
	return digit_set;
   }
   
   /*@ requires 0 <= op && op <= 4;
     @ {|
     @      requires op == 0;
     @      ensures \result[0] ==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' ||
     @		 	         c == 'O' || c == 'u' || c == 'U'); 
     @	    ensures \result[1];
     @ also
     @      requires op == 1;
     @      ensures \result[0] ==> ('A' <= c && c <= 'Z');
     @	    ensures \result[2];
     @ also
     @      requires op == 2;
     @      ensures \result[0] ==> ('a' <= c && c <= 'z');
     @	    ensures \result[3];
     @ also
     @      requires op == 3;
     @      ensures \result[0] ==> ('0' <= c && c <= '9');
     @	    ensures \result[4];
     @ also
     @      requires op == 4;
     @	    ensures \result[5];
     @ |} @*/
   public boolean[] driver(int op) 
   {
	boolean[] result = new boolean[6];
	switch (op) {
		case 0 :
		result[0] = isVowel();
		result[1] = getVowel_set();
		break;
		
		case 1 :
		result[0] = isUppercase();
		result[2] = getUppercase_set();
		break;

		case 2 :
		result[0] = isLowercase();
		result[3] = getLowercase_set();
		break;

		case 3 :
		result[0] = isDigit();
		result[4] = getDigit_set();
		break;

		default :
		result[0] = isAlphabetic();
		result[5] = getAlphabetic_set();
		break;
	}
	return result;
   }
}",Buggy
"public class Alphabet {
   private boolean vowel_set = false;
   private boolean vowel;
   /*@ private invariant vowel_set ==> 
                     (vowel == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
                               || c == 'i' || c == 'I' || c == 'o'
			       || c == 'O' || c == 'u' || c == 'U')); @*/

   private boolean alphabetic_set = false;
   private boolean alphabetic;
   //@ private invariant alphabetic_set ==> alphabetic == (('a' <= c && c <= 'z')||('A' <= c && c <='Z'));
   private boolean digit_set = false;
   private boolean digit;
   //@ private invariant digit_set ==> digit == ('0' <= c && c <= '9');
   private boolean uppercase_set = false;
   private boolean uppercase;
   //@ private invariant uppercase_set ==> (uppercase == ('A' <= c && c <= 'Z'));
   private boolean lowercase_set = false;
   private boolean lowercase;
   //@ private invariant lowercase_set ==> (lowercase == ('a' <= c && c <= 'z'));

   private /*@ spec_public @*/ final char c;

   /*@ private normal_behavior
     @   ensures !vowel_set && !alphabetic_set && !digit_set;
     @   ensures !uppercase_set && !lowercase_set;
     @ public normal_behavior
     @   ensures this.c == c; @*/
   public /*@ pure @*/ Alphabet(char c) 
   {
	this.c = c;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set && \result == vowel;
     @ public normal_behavior
     @   	ensures \result == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @    	                      || c == 'i' || c == 'I' || c == 'o'
     @				      || c == 'O' || c == 'u' || c == 'U'); @*/
   public boolean isVowel() 
   {
       setVowel();
       return vowel;
   }

   /*@ private normal_behavior
     @   assignable alphabetic_set, alphabetic;
     @   ensures alphabetic_set && \result == alphabetic; 
     @ public normal_behavior
     @   ensures \result == ('a' <= c && c <= 'z')||('A' <= c && c <='Z'); @*/
   public boolean isAlphabetic() 
   {
	setAlphabetic();
	return alphabetic;
   }

   /*@ private normal_behavior
     @   assignable uppercase_set, uppercase;
     @   ensures uppercase_set && \result == uppercase; 
     @ public normal_behavior
     @   ensures \result == ('A' <= c && c <= 'Z'); @*/
   public boolean isUppercase() 
   {
	setUppercase();
	return !uppercase; // return uppercase;
   }

   /*@ private normal_behavior
      @   assignable lowercase_set, lowercase;
      @   ensures lowercase_set && \result == lowercase; 
      @ public normal_behavior
      @   ensures \result == ('a' <= c && c <= 'z'); @*/
   public boolean isLowercase() 
   {
       setLowercase();
       return lowercase;
   }

   /*@ private normal_behavior
     @   assignable digit_set, digit;
     @   ensures digit_set && \result == digit; 
     @ public normal_behavior
     @   ensures \result == ('0' <= c && c <= '9'); @*/
   public boolean isDigit() 
   {
	setDigit();
	return digit;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set;
     @   ensures vowel <==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @                     	|| c == 'i' || c == 'I' || c == 'o'
     @	 	 	     	|| c == 'O' || c == 'u' || c == 'U'); @*/
   private /*@ spec_public @*/ void setVowel() 
   {
        vowel = false;
        switch (c) {
            case 'a' :
            case 'e' :
            case 'i' :
            case 'o' :
            case 'u' :
            case 'A' :
            case 'E' :
            case 'I' :
            case 'O' :
            case 'U' : vowel = true;
        }
        vowel_set = true;
   }

   /*@ private normal_behavior
     @    assignable alphabetic_set, alphabetic;
     @    ensures alphabetic_set;
     @    ensures alphabetic <==> ('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setAlphabetic() 
   {
	alphabetic = (('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'));		
	alphabetic_set = true;
   }

   /*@ private normal_behavior
     @    assignable uppercase_set, uppercase;
     @    ensures uppercase_set;
     @    ensures uppercase <==> ('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setUppercase() 
   {
	uppercase = ('A' <= c && c <= 'Z');		
	uppercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable lowercase_set, lowercase;
     @    ensures lowercase_set;
     @    ensures lowercase <==> ('a' <= c && c <= 'z'); @*/
   private /*@ spec_public @*/ void setLowercase() 
   {
       lowercase = ('a' <= c && c <= 'z');
       lowercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable digit_set, digit;
     @    ensures digit_set;
     @    ensures digit <==> ('0' <= c && c <= '9'); @*/
   private /*@ spec_public @*/ void setDigit() 
   {
	digit = ('0' <= c && c <= '9');	
	digit_set = true;
   }

   /*@ private normal_behavior
     @   ensures \result == alphabetic_set; @*/
   public /*@ pure @*/ boolean getAlphabetic_set()
   {
	return alphabetic_set;
   }

   /*@ private normal_behavior
     @   ensures \result == uppercase_set; @*/
   public /*@ pure @*/ boolean getUppercase_set()
   {
	return uppercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == lowercase_set; @*/
   public /*@ pure @*/ boolean getLowercase_set()
   {
	return lowercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == vowel_set; @*/
   public /*@ pure @*/ boolean getVowel_set()
   {
	return vowel_set;
   }

   /*@ private normal_behavior
     @   ensures \result == digit_set; @*/
   public /*@ pure @*/ boolean getDigit_set()
   {
	return digit_set;
   }
   
   /*@ requires 0 <= op && op <= 4;
     @ {|
     @      requires op == 0;
     @      ensures \result[0] ==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' ||
     @		 	         c == 'O' || c == 'u' || c == 'U'); 
     @	    ensures \result[1];
     @ also
     @      requires op == 1;
     @      ensures \result[0] ==> ('A' <= c && c <= 'Z');
     @	    ensures \result[2];
     @ also
     @      requires op == 2;
     @      ensures \result[0] ==> ('a' <= c && c <= 'z');
     @	    ensures \result[3];
     @ also
     @      requires op == 3;
     @      ensures \result[0] ==> ('0' <= c && c <= '9');
     @	    ensures \result[4];
     @ also
     @      requires op == 4;
     @	    ensures \result[5];
     @ |} @*/
   public boolean[] driver(int op) 
   {
	boolean[] result = new boolean[6];
	switch (op) {
		case 0 :
		result[0] = isVowel();
		result[1] = getVowel_set();
		break;
		
		case 1 :
		result[0] = isUppercase();
		result[2] = getUppercase_set();
		break;

		case 2 :
		result[0] = isLowercase();
		result[3] = getLowercase_set();
		break;

		case 3 :
		result[0] = isDigit();
		result[4] = getDigit_set();
		break;

		default :
		result[0] = isAlphabetic();
		result[5] = getAlphabetic_set();
		break;
	}
	return result;
   }
}",Buggy
"public class Alphabet {
   private boolean vowel_set = false;
   private boolean vowel;
   /*@ private invariant vowel_set ==> 
                     (vowel == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
                               || c == 'i' || c == 'I' || c == 'o'
			       || c == 'O' || c == 'u' || c == 'U')); @*/

   private boolean alphabetic_set = false;
   private boolean alphabetic;
   //@ private invariant alphabetic_set ==> alphabetic == (('a' <= c && c <= 'z')||('A' <= c && c <='Z'));
   private boolean digit_set = false;
   private boolean digit;
   //@ private invariant digit_set ==> digit == ('0' <= c && c <= '9');
   private boolean uppercase_set = false;
   private boolean uppercase;
   //@ private invariant uppercase_set ==> (uppercase == ('A' <= c && c <= 'Z'));
   private boolean lowercase_set = false;
   private boolean lowercase;
   //@ private invariant lowercase_set ==> (lowercase == ('a' <= c && c <= 'z'));

   private /*@ spec_public @*/ final char c;

   /*@ private normal_behavior
     @   ensures !vowel_set && !alphabetic_set && !digit_set;
     @   ensures !uppercase_set && !lowercase_set;
     @ public normal_behavior
     @   ensures this.c == c; @*/
   public /*@ pure @*/ Alphabet(char c) 
   {
	this.c = c;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set && \result == vowel;
     @ public normal_behavior
     @   	ensures \result == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @    	                      || c == 'i' || c == 'I' || c == 'o'
     @				      || c == 'O' || c == 'u' || c == 'U'); @*/
   public boolean isVowel() 
   {
       setVowel();
       return vowel;
   }

   /*@ private normal_behavior
     @   assignable alphabetic_set, alphabetic;
     @   ensures alphabetic_set && \result == alphabetic; 
     @ public normal_behavior
     @   ensures \result == ('a' <= c && c <= 'z')||('A' <= c && c <='Z'); @*/
   public boolean isAlphabetic() 
   {
	setAlphabetic();
	return alphabetic;
   }

   /*@ private normal_behavior
     @   assignable uppercase_set, uppercase;
     @   ensures uppercase_set && \result == uppercase; 
     @ public normal_behavior
     @   ensures \result == ('A' <= c && c <= 'Z'); @*/
   public boolean isUppercase() 
   {
	setUppercase();
	return uppercase;
   }

   /*@ private normal_behavior
      @   assignable lowercase_set, lowercase;
      @   ensures lowercase_set && \result == lowercase; 
      @ public normal_behavior
      @   ensures \result == ('a' <= c && c <= 'z'); @*/
   public boolean isLowercase() 
   {
       // setLowercase();
       return lowercase;
   }

   /*@ private normal_behavior
     @   assignable digit_set, digit;
     @   ensures digit_set && \result == digit; 
     @ public normal_behavior
     @   ensures \result == ('0' <= c && c <= '9'); @*/
   public boolean isDigit() 
   {
	setDigit();
	return digit;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set;
     @   ensures vowel <==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @                     	|| c == 'i' || c == 'I' || c == 'o'
     @	 	 	     	|| c == 'O' || c == 'u' || c == 'U'); @*/
   private /*@ spec_public @*/ void setVowel() 
   {
        vowel = false;
        switch (c) {
            case 'a' :
            case 'e' :
            case 'i' :
            case 'o' :
            case 'u' :
            case 'A' :
            case 'E' :
            case 'I' :
            case 'O' :
            case 'U' : vowel = true;
        }
        vowel_set = true;
   }

   /*@ private normal_behavior
     @    assignable alphabetic_set, alphabetic;
     @    ensures alphabetic_set;
     @    ensures alphabetic <==> ('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setAlphabetic() 
   {
	alphabetic = (('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'));		
	alphabetic_set = true;
   }

   /*@ private normal_behavior
     @    assignable uppercase_set, uppercase;
     @    ensures uppercase_set;
     @    ensures uppercase <==> ('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setUppercase() 
   {
	uppercase = ('A' <= c && c <= 'Z');		
	uppercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable lowercase_set, lowercase;
     @    ensures lowercase_set;
     @    ensures lowercase <==> ('a' <= c && c <= 'z'); @*/
   private /*@ spec_public @*/ void setLowercase() 
   {
       lowercase = ('a' <= c && c <= 'z');
       lowercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable digit_set, digit;
     @    ensures digit_set;
     @    ensures digit <==> ('0' <= c && c <= '9'); @*/
   private /*@ spec_public @*/ void setDigit() 
   {
	digit = ('0' <= c && c <= '9');	
	digit_set = true;
   }

   /*@ private normal_behavior
     @   ensures \result == alphabetic_set; @*/
   public /*@ pure @*/ boolean getAlphabetic_set()
   {
	return alphabetic_set;
   }

   /*@ private normal_behavior
     @   ensures \result == uppercase_set; @*/
   public /*@ pure @*/ boolean getUppercase_set()
   {
	return uppercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == lowercase_set; @*/
   public /*@ pure @*/ boolean getLowercase_set()
   {
	return lowercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == vowel_set; @*/
   public /*@ pure @*/ boolean getVowel_set()
   {
	return vowel_set;
   }

   /*@ private normal_behavior
     @   ensures \result == digit_set; @*/
   public /*@ pure @*/ boolean getDigit_set()
   {
	return digit_set;
   }
   
   /*@ requires 0 <= op && op <= 4;
     @ {|
     @      requires op == 0;
     @      ensures \result[0] ==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' ||
     @		 	         c == 'O' || c == 'u' || c == 'U'); 
     @	    ensures \result[1];
     @ also
     @      requires op == 1;
     @      ensures \result[0] ==> ('A' <= c && c <= 'Z');
     @	    ensures \result[2];
     @ also
     @      requires op == 2;
     @      ensures \result[0] ==> ('a' <= c && c <= 'z');
     @	    ensures \result[3];
     @ also
     @      requires op == 3;
     @      ensures \result[0] ==> ('0' <= c && c <= '9');
     @	    ensures \result[4];
     @ also
     @      requires op == 4;
     @	    ensures \result[5];
     @ |} @*/
   public boolean[] driver(int op) 
   {
	boolean[] result = new boolean[6];
	switch (op) {
		case 0 :
		result[0] = isVowel();
		result[1] = getVowel_set();
		break;
		
		case 1 :
		result[0] = isUppercase();
		result[2] = getUppercase_set();
		break;

		case 2 :
		result[0] = isLowercase();
		result[3] = getLowercase_set();
		break;

		case 3 :
		result[0] = isDigit();
		result[4] = getDigit_set();
		break;

		default :
		result[0] = isAlphabetic();
		result[5] = getAlphabetic_set();
		break;
	}
	return result;
   }
}",Buggy
"public class Alphabet {
   private boolean vowel_set = false;
   private boolean vowel;
   /*@ private invariant vowel_set ==> 
                     (vowel == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
                               || c == 'i' || c == 'I' || c == 'o'
			       || c == 'O' || c == 'u' || c == 'U')); @*/

   private boolean alphabetic_set = false;
   private boolean alphabetic;
   //@ private invariant alphabetic_set ==> alphabetic == (('a' <= c && c <= 'z')||('A' <= c && c <='Z'));
   private boolean digit_set = false;
   private boolean digit;
   //@ private invariant digit_set ==> digit == ('0' <= c && c <= '9');
   private boolean uppercase_set = false;
   private boolean uppercase;
   //@ private invariant uppercase_set ==> (uppercase == ('A' <= c && c <= 'Z'));
   private boolean lowercase_set = false;
   private boolean lowercase;
   //@ private invariant lowercase_set ==> (lowercase == ('a' <= c && c <= 'z'));

   private /*@ spec_public @*/ final char c;

   /*@ private normal_behavior
     @   ensures !vowel_set && !alphabetic_set && !digit_set;
     @   ensures !uppercase_set && !lowercase_set;
     @ public normal_behavior
     @   ensures this.c == c; @*/
   public /*@ pure @*/ Alphabet(char c) 
   {
	this.c = c;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set && \result == vowel;
     @ public normal_behavior
     @   	ensures \result == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @    	                      || c == 'i' || c == 'I' || c == 'o'
     @				      || c == 'O' || c == 'u' || c == 'U'); @*/
   public boolean isVowel() 
   {
       setVowel();
       return vowel;
   }

   /*@ private normal_behavior
     @   assignable alphabetic_set, alphabetic;
     @   ensures alphabetic_set && \result == alphabetic; 
     @ public normal_behavior
     @   ensures \result == ('a' <= c && c <= 'z')||('A' <= c && c <='Z'); @*/
   public boolean isAlphabetic() 
   {
	setAlphabetic();
	return alphabetic;
   }

   /*@ private normal_behavior
     @   assignable uppercase_set, uppercase;
     @   ensures uppercase_set && \result == uppercase; 
     @ public normal_behavior
     @   ensures \result == ('A' <= c && c <= 'Z'); @*/
   public boolean isUppercase() 
   {
	setUppercase();
	return uppercase;
   }

   /*@ private normal_behavior
      @   assignable lowercase_set, lowercase;
      @   ensures lowercase_set && \result == lowercase; 
      @ public normal_behavior
      @   ensures \result == ('a' <= c && c <= 'z'); @*/
   public boolean isLowercase() 
   {
       setLowercase();
       return !lowercase; // return lowercase;
   }

   /*@ private normal_behavior
     @   assignable digit_set, digit;
     @   ensures digit_set && \result == digit; 
     @ public normal_behavior
     @   ensures \result == ('0' <= c && c <= '9'); @*/
   public boolean isDigit() 
   {
	setDigit();
	return digit;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set;
     @   ensures vowel <==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @                     	|| c == 'i' || c == 'I' || c == 'o'
     @	 	 	     	|| c == 'O' || c == 'u' || c == 'U'); @*/
   private /*@ spec_public @*/ void setVowel() 
   {
        vowel = false;
        switch (c) {
            case 'a' :
            case 'e' :
            case 'i' :
            case 'o' :
            case 'u' :
            case 'A' :
            case 'E' :
            case 'I' :
            case 'O' :
            case 'U' : vowel = true;
        }
        vowel_set = true;
   }

   /*@ private normal_behavior
     @    assignable alphabetic_set, alphabetic;
     @    ensures alphabetic_set;
     @    ensures alphabetic <==> ('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setAlphabetic() 
   {
	alphabetic = (('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'));		
	alphabetic_set = true;
   }

   /*@ private normal_behavior
     @    assignable uppercase_set, uppercase;
     @    ensures uppercase_set;
     @    ensures uppercase <==> ('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setUppercase() 
   {
	uppercase = ('A' <= c && c <= 'Z');		
	uppercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable lowercase_set, lowercase;
     @    ensures lowercase_set;
     @    ensures lowercase <==> ('a' <= c && c <= 'z'); @*/
   private /*@ spec_public @*/ void setLowercase() 
   {
       lowercase = ('a' <= c && c <= 'z');
       lowercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable digit_set, digit;
     @    ensures digit_set;
     @    ensures digit <==> ('0' <= c && c <= '9'); @*/
   private /*@ spec_public @*/ void setDigit() 
   {
	digit = ('0' <= c && c <= '9');	
	digit_set = true;
   }

   /*@ private normal_behavior
     @   ensures \result == alphabetic_set; @*/
   public /*@ pure @*/ boolean getAlphabetic_set()
   {
	return alphabetic_set;
   }

   /*@ private normal_behavior
     @   ensures \result == uppercase_set; @*/
   public /*@ pure @*/ boolean getUppercase_set()
   {
	return uppercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == lowercase_set; @*/
   public /*@ pure @*/ boolean getLowercase_set()
   {
	return lowercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == vowel_set; @*/
   public /*@ pure @*/ boolean getVowel_set()
   {
	return vowel_set;
   }

   /*@ private normal_behavior
     @   ensures \result == digit_set; @*/
   public /*@ pure @*/ boolean getDigit_set()
   {
	return digit_set;
   }
   
   /*@ requires 0 <= op && op <= 4;
     @ {|
     @      requires op == 0;
     @      ensures \result[0] ==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' ||
     @		 	         c == 'O' || c == 'u' || c == 'U'); 
     @	    ensures \result[1];
     @ also
     @      requires op == 1;
     @      ensures \result[0] ==> ('A' <= c && c <= 'Z');
     @	    ensures \result[2];
     @ also
     @      requires op == 2;
     @      ensures \result[0] ==> ('a' <= c && c <= 'z');
     @	    ensures \result[3];
     @ also
     @      requires op == 3;
     @      ensures \result[0] ==> ('0' <= c && c <= '9');
     @	    ensures \result[4];
     @ also
     @      requires op == 4;
     @	    ensures \result[5];
     @ |} @*/
   public boolean[] driver(int op) 
   {
	boolean[] result = new boolean[6];
	switch (op) {
		case 0 :
		result[0] = isVowel();
		result[1] = getVowel_set();
		break;
		
		case 1 :
		result[0] = isUppercase();
		result[2] = getUppercase_set();
		break;

		case 2 :
		result[0] = isLowercase();
		result[3] = getLowercase_set();
		break;

		case 3 :
		result[0] = isDigit();
		result[4] = getDigit_set();
		break;

		default :
		result[0] = isAlphabetic();
		result[5] = getAlphabetic_set();
		break;
	}
	return result;
   }
}",Buggy
"public class Alphabet {
   private boolean vowel_set = false;
   private boolean vowel;
   /*@ private invariant vowel_set ==> 
                     (vowel == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
                               || c == 'i' || c == 'I' || c == 'o'
			       || c == 'O' || c == 'u' || c == 'U')); @*/

   private boolean alphabetic_set = false;
   private boolean alphabetic;
   //@ private invariant alphabetic_set ==> alphabetic == (('a' <= c && c <= 'z')||('A' <= c && c <='Z'));
   private boolean digit_set = false;
   private boolean digit;
   //@ private invariant digit_set ==> digit == ('0' <= c && c <= '9');
   private boolean uppercase_set = false;
   private boolean uppercase;
   //@ private invariant uppercase_set ==> (uppercase == ('A' <= c && c <= 'Z'));
   private boolean lowercase_set = false;
   private boolean lowercase;
   //@ private invariant lowercase_set ==> (lowercase == ('a' <= c && c <= 'z'));

   private /*@ spec_public @*/ final char c;

   /*@ private normal_behavior
     @   ensures !vowel_set && !alphabetic_set && !digit_set;
     @   ensures !uppercase_set && !lowercase_set;
     @ public normal_behavior
     @   ensures this.c == c; @*/
   public /*@ pure @*/ Alphabet(char c) 
   {
	this.c = c;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set && \result == vowel;
     @ public normal_behavior
     @   	ensures \result == (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @    	                      || c == 'i' || c == 'I' || c == 'o'
     @				      || c == 'O' || c == 'u' || c == 'U'); @*/
   public boolean isVowel() 
   {
       setVowel();
       return vowel;
   }

   /*@ private normal_behavior
     @   assignable alphabetic_set, alphabetic;
     @   ensures alphabetic_set && \result == alphabetic; 
     @ public normal_behavior
     @   ensures \result == ('a' <= c && c <= 'z')||('A' <= c && c <='Z'); @*/
   public boolean isAlphabetic() 
   {
	setAlphabetic();
	return alphabetic;
   }

   /*@ private normal_behavior
     @   assignable uppercase_set, uppercase;
     @   ensures uppercase_set && \result == uppercase; 
     @ public normal_behavior
     @   ensures \result == ('A' <= c && c <= 'Z'); @*/
   public boolean isUppercase() 
   {
	setUppercase();
	return uppercase;
   }

   /*@ private normal_behavior
      @   assignable lowercase_set, lowercase;
      @   ensures lowercase_set && \result == lowercase; 
      @ public normal_behavior
      @   ensures \result == ('a' <= c && c <= 'z'); @*/
   public boolean isLowercase() 
   {
       setLowercase();
       return lowercase;
   }

   /*@ private normal_behavior
     @   assignable digit_set, digit;
     @   ensures digit_set && \result == digit; 
     @ public normal_behavior
     @   ensures \result == ('0' <= c && c <= '9'); @*/
   public boolean isDigit() 
   {
	// setDigit();
	return digit;
   }

   /*@ private normal_behavior
     @   assignable vowel_set, vowel;
     @   ensures vowel_set;
     @   ensures vowel <==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' 
     @                     	|| c == 'i' || c == 'I' || c == 'o'
     @	 	 	     	|| c == 'O' || c == 'u' || c == 'U'); @*/
   private /*@ spec_public @*/ void setVowel() 
   {
        vowel = false;
        switch (c) {
            case 'a' :
            case 'e' :
            case 'i' :
            case 'o' :
            case 'u' :
            case 'A' :
            case 'E' :
            case 'I' :
            case 'O' :
            case 'U' : vowel = true;
        }
        vowel_set = true;
   }

   /*@ private normal_behavior
     @    assignable alphabetic_set, alphabetic;
     @    ensures alphabetic_set;
     @    ensures alphabetic <==> ('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setAlphabetic() 
   {
	alphabetic = (('a' <= c && c <= 'z')||('A' <= c && c <= 'Z'));		
	alphabetic_set = true;
   }

   /*@ private normal_behavior
     @    assignable uppercase_set, uppercase;
     @    ensures uppercase_set;
     @    ensures uppercase <==> ('A' <= c && c <= 'Z'); @*/
   private /*@ spec_public @*/ void setUppercase() 
   {
	uppercase = ('A' <= c && c <= 'Z');		
	uppercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable lowercase_set, lowercase;
     @    ensures lowercase_set;
     @    ensures lowercase <==> ('a' <= c && c <= 'z'); @*/
   private /*@ spec_public @*/ void setLowercase() 
   {
       lowercase = ('a' <= c && c <= 'z');
       lowercase_set = true;
   }

   /*@ private normal_behavior
     @    assignable digit_set, digit;
     @    ensures digit_set;
     @    ensures digit <==> ('0' <= c && c <= '9'); @*/
   private /*@ spec_public @*/ void setDigit() 
   {
	digit = ('0' <= c && c <= '9');	
	digit_set = true;
   }

   /*@ private normal_behavior
     @   ensures \result == alphabetic_set; @*/
   public /*@ pure @*/ boolean getAlphabetic_set()
   {
	return alphabetic_set;
   }

   /*@ private normal_behavior
     @   ensures \result == uppercase_set; @*/
   public /*@ pure @*/ boolean getUppercase_set()
   {
	return uppercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == lowercase_set; @*/
   public /*@ pure @*/ boolean getLowercase_set()
   {
	return lowercase_set;
   }

   /*@ private normal_behavior
     @   ensures \result == vowel_set; @*/
   public /*@ pure @*/ boolean getVowel_set()
   {
	return vowel_set;
   }

   /*@ private normal_behavior
     @   ensures \result == digit_set; @*/
   public /*@ pure @*/ boolean getDigit_set()
   {
	return digit_set;
   }
   
   /*@ requires 0 <= op && op <= 4;
     @ {|
     @      requires op == 0;
     @      ensures \result[0] ==> (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' ||
     @		 	         c == 'O' || c == 'u' || c == 'U'); 
     @	    ensures \result[1];
     @ also
     @      requires op == 1;
     @      ensures \result[0] ==> ('A' <= c && c <= 'Z');
     @	    ensures \result[2];
     @ also
     @      requires op == 2;
     @      ensures \result[0] ==> ('a' <= c && c <= 'z');
     @	    ensures \result[3];
     @ also
     @      requires op == 3;
     @      ensures \result[0] ==> ('0' <= c && c <= '9');
     @	    ensures \result[4];
     @ also
     @      requires op == 4;
     @	    ensures \result[5];
     @ |} @*/
   public boolean[] driver(int op) 
   {
	boolean[] result = new boolean[6];
	switch (op) {
		case 0 :
		result[0] = isVowel();
		result[1] = getVowel_set();
		break;
		
		case 1 :
		result[0] = isUppercase();
		result[2] = getUppercase_set();
		break;

		case 2 :
		result[0] = isLowercase();
		result[3] = getLowercase_set();
		break;

		case 3 :
		result[0] = isDigit();
		result[4] = getDigit_set();
		break;

		default :
		result[0] = isAlphabetic();
		result[5] = getAlphabetic_set();
		break;
	}
	return result;
   }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance > 0){//if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance + _amount) { //if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 > _balance - _amount) { //if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return false;//return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return true;//return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (!isValid(amount)) {//if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance - amount;//balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (!isValid(amount)) {//if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (!isValid(balance, amount)) {//if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance + amount;//balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = amount;//previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance > 0){//if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (!isValid(amount)) {//if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (!isValid(balance, amount)) {//if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance + amount;//balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = amount;//previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance + notEnoughMoneyPenalty;//_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 > _balance) { //if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = notEnoughMoneyPenalty; //previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = balance;//previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount*100)*5; //penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)/5;// penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return (this.balance == 0 ? 1: 0);//return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;//amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (!isValid(amount)) {//if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (!isValid(balance, amount)) { // if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance + amount;//balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = amount; //previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount*100)*5;//penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)/5; //penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty; //amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (!isValid(amount)) {//if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance - amount;//balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return (this.previousTransaction == 0 ? 1 : 0);//return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount*100)*2; //cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)/2;//cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount + cashback; //amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (!isValid(amount)) {//if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (!isValid(balance, amount)) {//if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance + amount;//balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = amount; //previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (!isValid(amount)) { //if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount -= ATMpenalty;//amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (!isValid(balance, amount)) {//if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance + amount;//balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = amount; //previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance < 20000) { //if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance > 20000) {//if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance*100;//interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance < 160000) {//else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance > 160000) { //else if (balance <= 160000) {  
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance*100; //_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest/2;//interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance < 300000) {//else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 <= _amount) {//if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (_amount <= 0) {//if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance > 300000) {//else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance*100;//_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest/3;//interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance*100;//_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest/4; //interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return (interest == 0 ? 1 : 0);//return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			//deposit (amount); removed call is a bug
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			//withdraw (amount); removed call is a bug
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			//checkWithdrawal (amount); bug is a removed call
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			//foreignTransfer(amount); removed call is a bug
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return false; //return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			//withdrawByCashBack(amount); removed call is a bug 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			//foreignDeposit(amount); removed call is a bug
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			//ATMWithdraw(amount); removed call is a bug
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return (result == 0 ? 1 : 0); //return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return true;//return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BankAccount 
{
	int balance;
	int previousTransaction;
        //@ invariant 0 <= balance;

	//@ assignable \everything;
	//@ ensures balance == 0; 
	//@ ensures previousTransaction == 0; 
	BankAccount()
	{
		balance = 0;
		previousTransaction = 0;
	}

	//@ assignable \everything; 
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == 0; 
	BankAccount(int currentBalance)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = 0;
	}

	//@ assignable \everything;
	//@ ensures (currentBalance <= 0) ==> balance == 0; 
	//@ ensures (0 < currentBalance) ==> balance == currentBalance; 
	//@ ensures previousTransaction == _previousTransaction; 
	BankAccount(int currentBalance, int _previousTransaction)
	{
		if (currentBalance <= 0){
			balance = 0;
		} else {		
			balance = currentBalance;
		}
		previousTransaction = _previousTransaction;
	}

	//@ ensures \result == this.balance;
	/*@ spec_public pure @*/ int getBalance() 
	{
		return this.balance;
	}

	//@ ensures \result == this.previousTransaction;
	/*@ spec_public pure @*/ int getPreviousTransaction()
	{
		return this.previousTransaction;
	}
	
	//@ requires 0 < _amount;
	//@ ensures \result;
	
	//@ also

	//@ requires _amount <= 0;
	//@ ensures !\result;
	/*@ spec_public pure @*/  boolean isValid(int _amount)
	{
		if (0 < _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(_amount);
	//@ requires 0 <= _balance;
	//@ {|	
	  //@ requires 0 <= _balance - _amount;
	  //@ ensures \result;
	
	  //@ also

	  //@ requires _balance - _amount < 0;
	  //@ ensures !\result;
	//@ |}
	/*@ spec_public pure @*/ boolean isValid(int _balance, int _amount)
	{
		if (0 < _balance - _amount) {//if (0 <= _balance - _amount) {
			return true;
		} else {
			return false;
		}
	}

	//@ requires isValid(amount);
	//@ requires amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + amount;
	//@ ensures previousTransaction == amount;

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void deposit(int amount)
	{
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		} 
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdraw(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ requires isValid(amount);
	//@ requires isValid(balance, amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - amount;
	//@ ensures previousTransaction == -amount;
	  
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires isValid(balance, 50);  
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - 50;
	//@ ensures previousTransaction == -50;
	
	//@ also

	//@ requires isValid(amount);
	//@ requires !isValid(balance, amount);
	//@ requires !isValid(balance, 50); 
	//@ assignable balance, previousTransaction;
	//@ ensures balance == 0;
	//@ ensures previousTransaction == \old (-balance);

	//@ also

	//@ requires !isValid(amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void checkWithdrawal(int amount)
	{
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
			else {
				int notEnoughMoneyPenalty;
				notEnoughMoneyPenalty = 50;
				int _balance;
				_balance = balance - notEnoughMoneyPenalty;
				if (0 <= _balance) { 
					balance = _balance;
					previousTransaction = -notEnoughMoneyPenalty;
				}
				else {
					previousTransaction = -balance;
					balance = 0;
				}	
			}
		}
	}

	//@ old int _amount =  amount + (amount/100)*5;
	//@ requires _amount <= Integer.MAX_VALUE;
	//@ {|	
	  //@ requires isValid(_amount);
	  //@ requires isValid(balance, _amount);
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - _amount;
	  //@ ensures previousTransaction == -_amount;
	  
	  //@ also 

	  //@ requires isValid(_amount);
	  //@ requires !isValid(balance, _amount);
   	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(_amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void foreignTransfer(int amount)
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount + penalty;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires isValid(_amount);
	//@ requires _amount + balance <= Integer.MAX_VALUE;
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) + _amount;
	//@ ensures previousTransaction == _amount;

	//@ also

	//@ old int _amount = amount - (amount/100)*5;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void foreignDeposit(int amount) 
	{
		int penalty;
		penalty = (amount/100)*5;
		amount = amount - penalty;
		if (isValid(amount)) {
			balance = balance + amount;
			previousTransaction = amount;
		}
	}

	//@ old int _amount = amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires isValid(balance, _amount);
	//@ assignable balance, previousTransaction;
	//@ ensures balance == \old (balance) - _amount;
	//@ ensures previousTransaction == -_amount;
	  
	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires isValid(_amount);
	//@ requires !isValid(balance, _amount); 
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);

	//@ also

	//@ old int _amount =  amount - (amount/100)*2;
	//@ requires !isValid(_amount);
	//@ ensures balance == \old (balance);
	//@ ensures previousTransaction == \old (previousTransaction);
	void withdrawByCashBack(int amount) 
	{
		int cashback; 
		cashback =  (amount/100)*2;
		amount = amount - cashback;
		if (isValid(amount)) {
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
	//@ old int ATMpenalty = 4;
	//@ requires amount + ATMpenalty <= Integer.MAX_VALUE;
	//@ {|
	  //@ requires isValid(amount);
	  //@ requires isValid(balance, (amount + ATMpenalty));
	  //@ assignable balance, previousTransaction;
	  //@ ensures balance == \old (balance) - (amount + ATMpenalty);
	  //@ ensures previousTransaction == -(amount + ATMpenalty);

	  //@ also 

	  //@ requires isValid(amount);
	  //@ requires !isValid(balance, (amount + ATMpenalty));
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);

	  //@ also

	  //@ requires !isValid(amount);
	  //@ ensures balance == \old (balance);
	  //@ ensures previousTransaction == \old (previousTransaction);
	//@ |}
	void ATMWithdraw(int amount)
	{
		int ATMpenalty = 4;
		if (isValid(amount)) {
			amount += ATMpenalty;
			if (isValid(balance, amount)) {
				balance = balance - amount;
				previousTransaction = -amount;
			}
		}
	}
		
	//@ requires balance <= 20000;
	//@ ensures \result == balance/100;

	//@ also

	//@ requires 20000 < balance && balance <= 160000;
	//@ ensures \result == (balance/100)*2;

	//@ also

	//@ requires 160000 < balance && balance <= 300000 ;
	//@ ensures \result == (balance/100)*3;

	//@ also

	//@ requires 300000 < balance && balance <= Integer.MAX_VALUE;
	//@ ensures \result == (balance/100)*4;
	/*@ spec_public pure @*/int interestAfterYear () 
	{
		int interest;
		interest = 0;
		if (balance <= 20000) {
			interest = balance/100;
		} 
		else if (balance <= 160000) { 
			int _interest;
			_interest = balance/100;
			interest = _interest*2;
		}
		else if (balance <= 300000) {
			int _interest;
			_interest = balance/100;
			interest = _interest*3;
		}
		else {
			int _interest;
			_interest = balance/100;
			interest = _interest*4;
		}
		return interest;
	}

	/*@ assignable \everything;
	    requires 0 <= option && option <= 9; 
	    {|
		requires option == 1 && isValid(amount);
	  	requires amount + balance <= Integer.MAX_VALUE;
	  	ensures balance == \old (balance) + amount;
	  	ensures previousTransaction == amount;
		
	 	also

	   	requires option == 2 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	 	ensures \result == balance;
	   	ensures previousTransaction == -amount;

	 	also

	 	requires option == 3 && isValid(amount);
	   	requires isValid(balance, amount);
	   	ensures balance == \old (balance) - amount;
	   	ensures previousTransaction == -amount;

	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires isValid(balance, 50);  
	   	ensures balance == \old (balance) - 50;
	   	ensures previousTransaction == -50;
	
	   	also

	   	requires option == 3 && isValid(amount);
	   	requires !isValid(balance, amount);
	   	requires !isValid(balance, 50); 
	   	ensures balance == 0;
	   	ensures previousTransaction == \old (-balance);

		also 

	 	requires option == 4;
	 	ensures \result == previousTransaction;

	 	also
		
	 	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also
	
	   	old int _amount =  amount + (amount/100)*5;
	 	requires option == 5;
		requires _amount <= Integer.MAX_VALUE;
	   	requires isValid(_amount);
	   	requires !isValid(balance, _amount);
	   	ensures balance == \old (balance);
	        ensures previousTransaction == \old (previousTransaction);  

	 	also

	 	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires isValid(balance, _amount);
	   	ensures balance == \old (balance) - _amount;
	   	ensures previousTransaction == -_amount;

	   	also

	  	old int _amount =  amount - (amount/100)*2;
	   	requires option == 6 && isValid(_amount);
	   	requires !isValid(balance, _amount);
		ensures balance == \old (balance);
		ensures previousTransaction == \old (previousTransaction);  

	 	also

		old int _amount =  amount - (amount/100)*5;
	 	requires option == 7 && isValid(_amount);
	   	requires _amount + balance <= Integer.MAX_VALUE;
	   	ensures balance == \old (balance) + _amount;
	   	ensures previousTransaction == _amount;
		
	 	also

	   	requires option == 8 && balance <= 20000;
	   	ensures \result == balance/100;

	   	also

	   	requires option == 8 && 20000 < balance && balance <= 160000;
	   	ensures \result == (balance/100)*2;

	   	also

	   	requires option == 8 && 160000 < balance && balance <= 300000 ;
	   	ensures \result == (balance/100)*3;

	   	also

	   	requires option == 8 && 300000 < balance && balance <= Integer.MAX_VALUE;
	   	ensures \result == (balance/100)*4;

		also

		requires option == 9;
		old int ATMpenalty = 4;
		requires amount + ATMpenalty <= Integer.MAX_VALUE;
		requires isValid(amount);
		requires 0 <= balance - amount + ATMpenalty;
		requires isValid(balance, (amount + ATMpenalty));
		ensures balance == \old (balance) - (amount + ATMpenalty);
		ensures previousTransaction == -(amount + ATMpenalty);
	 
               also

	       requires option == 0;
               ensures balance == \old (balance);
	       ensures previousTransaction == \old (previousTransaction);
	    |} @*/ 
	int menu(int option, int amount)
	{
		int result;
		result = 0;	
			
		switch(option) 
		{
			case 1:
			deposit(amount);
			result = getBalance();
			break;

			case 2:
			withdraw(amount);
			result = getBalance();
			break;
			
			case 3: 
			checkWithdrawal(amount);
			result = getBalance();
			break;

			case 4:
			result = getPreviousTransaction();
			break;

			case 5: 
			foreignTransfer(amount);
			result = getBalance();
			break;

			case 6:
			withdrawByCashBack(amount); 
	 		result = getBalance();
			break;

			case 7: 
			foreignDeposit(amount);
			result = getBalance();
			break;

			case 8:
			result = interestAfterYear();
			break;

			case 9:
			ATMWithdraw(amount);
			result = getBalance();
			break;

			default:
			result = getBalance();
               		break;
		}
	        return result;
        }
}",Buggy
"public class BinarySearch {
    //@ requires \forall int j; 0 <= j && j < arr.length; \forall int i; 0 <= i && i < j ;arr[i] <= arr[j];
    //@ ensures \result == -1 <==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key);
    //@ ensures 0 <= \result && \result < arr.length ==> arr[\result] == key;
    public static int Binary(int[] arr, int key) {
        if (arr.length != 0) {//if (arr.length == 0) {
            return -1;
        } else {
            int low = 0;
            int high = arr.length;
            int mid =  high / 2;

            //@ maintaining 0 <= low && low <= high  && high <= arr.length && mid == low + (high - low) / 2;
            //@ maintaining (\forall int i; 0 <= i && i < low; arr[i] < key);
            //@ maintaining (\forall int i; high <= i && i < arr.length; key < arr[i]);
            //@ decreases high - low;
            while (low < high && arr[mid] != key) {
                if (arr[mid] < key) {
                    low = mid + 1;
                } else {
                    high = mid;
                }
                mid = low + (high - low) / 2;
            }
            if (low >= high) {
                return -1;
            }
            return mid;
        }
    }
}",Buggy
"public class BinarySearch {
    //@ requires \forall int j; 0 <= j && j < arr.length; \forall int i; 0 <= i && i < j ;arr[i] <= arr[j];
    //@ ensures \result == -1 <==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key);
    //@ ensures 0 <= \result && \result < arr.length ==> arr[\result] == key;
    public static int Binary(int[] arr, int key) {
        if (arr.length == 0) {
            return -1;
        } else {
            int low = 0;
            int high = arr.length;
            int mid =  high / 2;

            //@ maintaining 0 <= low && low <= high  && high <= arr.length && mid == low + (high - low) / 2;
            //@ maintaining (\forall int i; 0 <= i && i < low; arr[i] < key);
            //@ maintaining (\forall int i; high <= i && i < arr.length; key < arr[i]);
            //@ decreases high - low;
            while (low < high && arr[mid] != key) {
                if (arr[mid] < key) {
                    low = mid + 1;
                } else {
                    high = mid;
                }
                mid = low - (high - low) / 2;//mid = low + (high - low) / 2;
            }
            if (low >= high) {
                return -1;
            }
            return mid;
        }
    }
}",Buggy
"public class BinarySearch {
    //@ requires \forall int j; 0 <= j && j < arr.length; \forall int i; 0 <= i && i < j ;arr[i] <= arr[j];
    //@ ensures \result == -1 <==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key);
    //@ ensures 0 <= \result && \result < arr.length ==> arr[\result] == key;
    public static int Binary(int[] arr, int key) {
        if (arr.length == 0) {
            return -1;
        } else {
            int low = 0;
            int high = arr.length;
            int mid =  high / 2;

            //@ maintaining 0 <= low && low <= high  && high <= arr.length && mid == low + (high - low) / 2;
            //@ maintaining (\forall int i; 0 <= i && i < low; arr[i] < key);
            //@ maintaining (\forall int i; high <= i && i < arr.length; key < arr[i]);
            //@ decreases high - low;
            while (low < high && arr[mid] != key) {
                if (arr[mid] < key) {
                    low = mid + 1;
                } else {
                    high = mid;
                }
                mid = low + (high - low) / 2;
            }
            if (low > high) {//if (low >= high) {
                return -1;
            }
            return mid;
        }
    }
}",Buggy
"public class BinarySearch {
    //@ requires \forall int j; 0 <= j && j < arr.length; \forall int i; 0 <= i && i < j ;arr[i] <= arr[j];
    //@ ensures \result == -1 <==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key);
    //@ ensures 0 <= \result && \result < arr.length ==> arr[\result] == key;
    public static int Binary(int[] arr, int key) {
        if (arr.length == 0) {
            return -1;
        } else {
            int low = 0;
            int high = arr.length;
            int mid =  high / 2;

            //@ maintaining 0 <= low && low <= high  && high <= arr.length && mid == low + (high - low) / 2;
            //@ maintaining (\forall int i; 0 <= i && i < low; arr[i] < key);
            //@ maintaining (\forall int i; high <= i && i < arr.length; key < arr[i]);
            //@ decreases high - low;
            while (low < high && arr[mid] != key) {
                if (arr[mid] < key) {
                    low = mid + 1;
                } else {
                    high = mid;
                }
                mid = low + (high - low) / 2;
            }
            if (low < high) {//if (low >= high) {
                return -1;
            }
            return mid;
        }
    }
}",Buggy
"public class BinarySearch {
    //@ requires \forall int j; 0 <= j && j < arr.length; \forall int i; 0 <= i && i < j ;arr[i] <= arr[j];
    //@ ensures \result == -1 <==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key);
    //@ ensures 0 <= \result && \result < arr.length ==> arr[\result] == key;
    public static int Binary(int[] arr, int key) {
        if (arr.length == 0) {
            return 0; // -1;
        } else {
            int low = 0;
            int high = arr.length;
            int mid =  high / 2;

            //@ maintaining 0 <= low && low <= high  && high <= arr.length && mid == low + (high - low) / 2;
            //@ maintaining (\forall int i; 0 <= i && i < low; arr[i] < key);
            //@ maintaining (\forall int i; high <= i && i < arr.length; key < arr[i]);
            //@ decreases high - low;
            while (low < high && arr[mid] != key) {
                if (arr[mid] < key) {
                    low = mid + 1;
                } else {
                    high = mid;
                }
                mid = low + (high - low) / 2;
            }
            if (low >= high) {
                return -1;
            }
            return mid;
        }
    }
}",Buggy
"public class BinarySearch {
    //@ requires \forall int j; 0 <= j && j < arr.length; \forall int i; 0 <= i && i < j ;arr[i] <= arr[j];
    //@ ensures \result == -1 <==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key);
    //@ ensures 0 <= \result && \result < arr.length ==> arr[\result] == key;
    public static int Binary(int[] arr, int key) {
        if (arr.length == 0) {
            return -1;
        } else {
            int low = 0;
            int high = arr.length;
            int mid =  high / 2;

            //@ maintaining 0 <= low && low <= high  && high <= arr.length && mid == low + (high - low) / 2;
            //@ maintaining (\forall int i; 0 <= i && i < low; arr[i] < key);
            //@ maintaining (\forall int i; high <= i && i < arr.length; key < arr[i]);
            //@ decreases high - low;
            while (low < high && arr[mid] != key) {
                if (arr[mid] < key) {
                    low = mid + 1;
                } else {
                    high = mid;
                }
                mid = low + (high - low) / 2;
            }
            if (low >= high) {
                return 0; // -1;
            }
            return mid;
        }
    }
}",Buggy
"public class BinarySearch {
    //@ requires \forall int j; 0 <= j && j < arr.length; \forall int i; 0 <= i && i < j ;arr[i] <= arr[j];
    //@ ensures \result == -1 <==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key);
    //@ ensures 0 <= \result && \result < arr.length ==> arr[\result] == key;
    public static int Binary(int[] arr, int key) {
        if (arr.length == 0) {
            return -1;
        } else {
            int low = 0;
            int high = arr.length;
            int mid =  high / 2;

            //@ maintaining 0 <= low && low <= high  && high <= arr.length && mid == low + (high - low) / 2;
            //@ maintaining (\forall int i; 0 <= i && i < low; arr[i] < key);
            //@ maintaining (\forall int i; high <= i && i < arr.length; key < arr[i]);
            //@ decreases high - low;
            while (low < high && arr[mid] != key) {
                if (arr[mid] < key) {
                    low = mid + 1;
                } else {
                    high = mid;
                }
                mid = low + (high - low) / 2;
            }
            if (low >= high) {
                return -1;
            }
            return (mid == 0 ? 1 : 0);//mid;
        }
    }
}",Buggy
"public class BinarySearch {
    //@ requires \forall int j; 0 <= j && j < arr.length; \forall int i; 0 <= i && i < j ;arr[i] <= arr[j];
    //@ ensures \result == -1 <==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key);
    //@ ensures 0 <= \result && \result < arr.length ==> arr[\result] == key;
    public static int Binary(int[] arr, int key) {
        if (arr.length == 0) {
            return -1;
        } else {
            int low = 0;
            int high = arr.length;
            int mid =  high * 2;//int mid =  high / 2;

            //@ maintaining 0 <= low && low <= high  && high <= arr.length && mid == low + (high - low) / 2;
            //@ maintaining (\forall int i; 0 <= i && i < low; arr[i] < key);
            //@ maintaining (\forall int i; high <= i && i < arr.length; key < arr[i]);
            //@ decreases high - low;
            while (low < high && arr[mid] != key) {
                if (arr[mid] < key) {
                    low = mid + 1;
                } else {
                    high = mid;
                }
                mid = low + (high - low) / 2;
            }
            if (low >= high) {
                return -1;
            }
            return mid;
        }
    }
}",Buggy
"public class BinarySearch {
    //@ requires \forall int j; 0 <= j && j < arr.length; \forall int i; 0 <= i && i < j ;arr[i] <= arr[j];
    //@ ensures \result == -1 <==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key);
    //@ ensures 0 <= \result && \result < arr.length ==> arr[\result] == key;
    public static int Binary(int[] arr, int key) {
        if (arr.length == 0) {
            return -1;
        } else {
            int low = 0;
            int high = arr.length;
            int mid =  high / 2;

            //@ maintaining 0 <= low && low <= high  && high <= arr.length && mid == low + (high - low) / 2;
            //@ maintaining (\forall int i; 0 <= i && i < low; arr[i] < key);
            //@ maintaining (\forall int i; high <= i && i < arr.length; key < arr[i]);
            //@ decreases high - low;
            while (low <= high && arr[mid] != key) {//while (low < high && arr[mid] != key) {
                if (arr[mid] < key) {
                    low = mid + 1;
                } else {
                    high = mid;
                }
                mid = low + (high - low) / 2;
            }
            if (low >= high) {
                return -1;
            }
            return mid;
        }
    }
}",Buggy
"public class BinarySearch {
    //@ requires \forall int j; 0 <= j && j < arr.length; \forall int i; 0 <= i && i < j ;arr[i] <= arr[j];
    //@ ensures \result == -1 <==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key);
    //@ ensures 0 <= \result && \result < arr.length ==> arr[\result] == key;
    public static int Binary(int[] arr, int key) {
        if (arr.length == 0) {
            return -1;
        } else {
            int low = 0;
            int high = arr.length;
            int mid =  high / 2;

            //@ maintaining 0 <= low && low <= high  && high <= arr.length && mid == low + (high - low) / 2;
            //@ maintaining (\forall int i; 0 <= i && i < low; arr[i] < key);
            //@ maintaining (\forall int i; high <= i && i < arr.length; key < arr[i]);
            //@ decreases high - low;
            while (low >= high && arr[mid] != key) {//while (low < high && arr[mid] != key) {
                if (arr[mid] < key) {
                    low = mid + 1;
                } else {
                    high = mid;
                }
                mid = low + (high - low) / 2;
            }
            if (low >= high) {
                return -1;
            }
            return mid;
        }
    }
}",Buggy
"public class BinarySearch {
    //@ requires \forall int j; 0 <= j && j < arr.length; \forall int i; 0 <= i && i < j ;arr[i] <= arr[j];
    //@ ensures \result == -1 <==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key);
    //@ ensures 0 <= \result && \result < arr.length ==> arr[\result] == key;
    public static int Binary(int[] arr, int key) {
        if (arr.length == 0) {
            return -1;
        } else {
            int low = 0;
            int high = arr.length;
            int mid =  high / 2;

            //@ maintaining 0 <= low && low <= high  && high <= arr.length && mid == low + (high - low) / 2;
            //@ maintaining (\forall int i; 0 <= i && i < low; arr[i] < key);
            //@ maintaining (\forall int i; high <= i && i < arr.length; key < arr[i]);
            //@ decreases high - low;
            while (low < high && arr[mid] == key) {//while (low < high && arr[mid] != key) {
                if (arr[mid] < key) {
                    low = mid + 1;
                } else {
                    high = mid;
                }
                mid = low + (high - low) / 2;
            }
            if (low >= high) {
                return -1;
            }
            return mid;
        }
    }
}",Buggy
"public class BinarySearch {
    //@ requires \forall int j; 0 <= j && j < arr.length; \forall int i; 0 <= i && i < j ;arr[i] <= arr[j];
    //@ ensures \result == -1 <==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key);
    //@ ensures 0 <= \result && \result < arr.length ==> arr[\result] == key;
    public static int Binary(int[] arr, int key) {
        if (arr.length == 0) {
            return -1;
        } else {
            int low = 0;
            int high = arr.length;
            int mid =  high / 2;

            //@ maintaining 0 <= low && low <= high  && high <= arr.length && mid == low + (high - low) / 2;
            //@ maintaining (\forall int i; 0 <= i && i < low; arr[i] < key);
            //@ maintaining (\forall int i; high <= i && i < arr.length; key < arr[i]);
            //@ decreases high - low;
            while (low < high && arr[mid] != key) {
                if (arr[mid] >= key) {//if (arr[mid] < key) {
                    low = mid + 1;
                } else {
                    high = mid;
                }
                mid = low + (high - low) / 2;
            }
            if (low >= high) {
                return -1;
            }
            return mid;
        }
    }
}",Buggy
"public class BinarySearch {
    //@ requires \forall int j; 0 <= j && j < arr.length; \forall int i; 0 <= i && i < j ;arr[i] <= arr[j];
    //@ ensures \result == -1 <==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key);
    //@ ensures 0 <= \result && \result < arr.length ==> arr[\result] == key;
    public static int Binary(int[] arr, int key) {
        if (arr.length == 0) {
            return -1;
        } else {
            int low = 0;
            int high = arr.length;
            int mid =  high / 2;

            //@ maintaining 0 <= low && low <= high  && high <= arr.length && mid == low + (high - low) / 2;
            //@ maintaining (\forall int i; 0 <= i && i < low; arr[i] < key);
            //@ maintaining (\forall int i; high <= i && i < arr.length; key < arr[i]);
            //@ decreases high - low;
            while (low < high && arr[mid] != key) {
                if (arr[mid] < key) {
                    low = mid - 1;//low = mid + 1;
                } else {
                    high = mid;
                }
                mid = low + (high - low) / 2;
            }
            if (low >= high) {
                return -1;
            }
            return mid;
        }
    }
}",Buggy
"public class BinarySearch {
    //@ requires \forall int j; 0 <= j && j < arr.length; \forall int i; 0 <= i && i < j ;arr[i] <= arr[j];
    //@ ensures \result == -1 <==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key);
    //@ ensures 0 <= \result && \result < arr.length ==> arr[\result] == key;
    public static int Binary(int[] arr, int key) {
        if (arr.length == 0) {
            return -1;
        } else {
            int low = 0;
            int high = arr.length;
            int mid =  high / 2;

            //@ maintaining 0 <= low && low <= high  && high <= arr.length && mid == low + (high - low) / 2;
            //@ maintaining (\forall int i; 0 <= i && i < low; arr[i] < key);
            //@ maintaining (\forall int i; high <= i && i < arr.length; key < arr[i]);
            //@ decreases high - low;
            while (low < high && arr[mid] != key) {
                if (arr[mid] < key) {
                    low = mid + 1;
                } else {
                    high = mid;
                }
                mid = low + (high + low) / 2;//mid = low + (high - low) / 2;
            }
            if (low >= high) {
                return -1;
            }
            return mid;
        }
    }
}",Buggy
"public class BinarySearch {
    //@ requires \forall int j; 0 <= j && j < arr.length; \forall int i; 0 <= i && i < j ;arr[i] <= arr[j];
    //@ ensures \result == -1 <==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key);
    //@ ensures 0 <= \result && \result < arr.length ==> arr[\result] == key;
    public static int Binary(int[] arr, int key) {
        if (arr.length == 0) {
            return -1;
        } else {
            int low = 0;
            int high = arr.length;
            int mid =  high / 2;

            //@ maintaining 0 <= low && low <= high  && high <= arr.length && mid == low + (high - low) / 2;
            //@ maintaining (\forall int i; 0 <= i && i < low; arr[i] < key);
            //@ maintaining (\forall int i; high <= i && i < arr.length; key < arr[i]);
            //@ decreases high - low;
            while (low < high && arr[mid] != key) {
                if (arr[mid] < key) {
                    low = mid + 1;
                } else {
                    high = mid;
                }
                mid = low + (high - low) * 2;//mid = low + (high - low) / 2;
            }
            if (low >= high) {
                return -1;
            }
            return mid;
        }
    }
}",Buggy
"public class BubbleSort { 
    //@ requires 0 < arr.length;
    //@ ensures \forall int i; 0 <= i && i < \result.length; \forall int j; i <= j && j < \result.length; \result[i] <= \result[j];
    int[] bubbleSort(int arr[]) { 
	SwapInArray s = new SwapInArray();
        int n = arr.length;
	
	//@ maintaining n == arr.length;
	//@ maintaining 0 <= i && i < n; 
	//@ maintaining 0 < i ==> (\forall int k; 0 <= k && k < n-i; arr[k] <= arr[n-i]);
	//@ maintaining  (\forall int t; n-i <= t && t < n; arr[n-i] <= arr[t]);
	//@ maintaining 0 < i ==> (\forall int h; n-i <= h && h < n; (\forall int p; n-i <= p && p < n && p <= h; arr[p] <= arr[h]));
 	//@ decreases n - i;
        for (int i = 0; i < n-1; i--) {// for (int i = 0; i < n-1; i++) {	
	    //@ maintaining 0 <= i && i < n - 1;
	    //@ maintaining 0 <= j && j < n - i;
	    //@ maintaining 0 < j ==> arr[j-1] <= arr[j];
	    //@ maintaining (\forall int k; 0 <= k && k < j; arr[k] <= arr[j]);
	    //@ maintaining 0 < j  && j < n - i ==> (\forall int t; n-i <= t && t < n; arr[j] <= arr[t]);
	    //@ decreases n - j;
            for (int j = 0; j < n-i-1; j++) {
                if (arr[j+1] < arr[j]) {  
		    s.swap(j, j + 1, arr); 
                } 
	    }
	} 
	return arr;
    } 
}",Buggy
"public class SwapInArray {
        /*@ requires 0 <= x && x < array.length && 0 <= y && y < array.length; 
	  @ assignable array[x], array[y]; 
	  @ ensures \old(array[x]) == array[y] && \old(array[y]) == array[x];
	  @ ensures array.length == \old(array.length); @*/
	public void swap(int x, int y,  int array[]) {
	  int temp;     
          temp = array[x];
          array[x] = array[y];
          array[y] = temp;
       }
    }",Buggy
"public class BubbleSort { 
    //@ requires 0 < arr.length;
    //@ ensures \forall int i; 0 <= i && i < \result.length; \forall int j; i <= j && j < \result.length; \result[i] <= \result[j];
    int[] bubbleSort(int arr[]) { 
	SwapInArray s = new SwapInArray();
        int n = arr.length;
	
	//@ maintaining n == arr.length;
	//@ maintaining 0 <= i && i < n; 
	//@ maintaining 0 < i ==> (\forall int k; 0 <= k && k < n-i; arr[k] <= arr[n-i]);
	//@ maintaining  (\forall int t; n-i <= t && t < n; arr[n-i] <= arr[t]);
	//@ maintaining 0 < i ==> (\forall int h; n-i <= h && h < n; (\forall int p; n-i <= p && p < n && p <= h; arr[p] <= arr[h]));
 	//@ decreases n - i;
        for (int i = 0; i < n-1; i++) {	
	    //@ maintaining 0 <= i && i < n - 1;
	    //@ maintaining 0 <= j && j < n - i;
	    //@ maintaining 0 < j ==> arr[j-1] <= arr[j];
	    //@ maintaining (\forall int k; 0 <= k && k < j; arr[k] <= arr[j]);
	    //@ maintaining 0 < j  && j < n - i ==> (\forall int t; n-i <= t && t < n; arr[j] <= arr[t]);
	    //@ decreases n - j;
            for (int j = 0; j < n-i-1; j++) {
                if (arr[j+1] < arr[j]) {  
		    s.swap(j, j - 1, arr); // s.swap(j, j + 1, arr); 
                } 
	    }
	} 
	return arr;
    } 
}",Buggy
"public class SwapInArray {
        /*@ requires 0 <= x && x < array.length && 0 <= y && y < array.length; 
	  @ assignable array[x], array[y]; 
	  @ ensures \old(array[x]) == array[y] && \old(array[y]) == array[x];
	  @ ensures array.length == \old(array.length); @*/
	public void swap(int x, int y,  int array[]) {
	  int temp;     
          temp = array[x];
          array[x] = array[y];
          array[y] = temp;
       }
    }",Buggy
"public class BubbleSort { 
    //@ requires 0 < arr.length;
    //@ ensures \forall int i; 0 <= i && i < \result.length; \forall int j; i <= j && j < \result.length; \result[i] <= \result[j];
    int[] bubbleSort(int arr[]) { 
	SwapInArray s = new SwapInArray();
        int n = arr.length;
	
	//@ maintaining n == arr.length;
	//@ maintaining 0 <= i && i < n; 
	//@ maintaining 0 < i ==> (\forall int k; 0 <= k && k < n-i; arr[k] <= arr[n-i]);
	//@ maintaining  (\forall int t; n-i <= t && t < n; arr[n-i] <= arr[t]);
	//@ maintaining 0 < i ==> (\forall int h; n-i <= h && h < n; (\forall int p; n-i <= p && p < n && p <= h; arr[p] <= arr[h]));
 	//@ decreases n - i;
        for (int i = 0; i < n-1; i++) {	
	    //@ maintaining 0 <= i && i < n - 1;
	    //@ maintaining 0 <= j && j < n - i;
	    //@ maintaining 0 < j ==> arr[j-1] <= arr[j];
	    //@ maintaining (\forall int k; 0 <= k && k < j; arr[k] <= arr[j]);
	    //@ maintaining 0 < j  && j < n - i ==> (\forall int t; n-i <= t && t < n; arr[j] <= arr[t]);
	    //@ decreases n - j;
            for (int j = 0; j < n-i-1; j++) {
                if (arr[j+1] < arr[j]) {  
		    // s.swap(j, j + 1, arr); 
                } 
	    }
	} 
	return arr;
    } 
}",Buggy
"public class SwapInArray {
        /*@ requires 0 <= x && x < array.length && 0 <= y && y < array.length; 
	  @ assignable array[x], array[y]; 
	  @ ensures \old(array[x]) == array[y] && \old(array[y]) == array[x];
	  @ ensures array.length == \old(array.length); @*/
	public void swap(int x, int y,  int array[]) {
	  int temp;     
          temp = array[x];
          array[x] = array[y];
          array[y] = temp;
       }
    }",Buggy
"public class BubbleSort { 
    //@ requires 0 < arr.length;
    //@ ensures \forall int i; 0 <= i && i < \result.length; \forall int j; i <= j && j < \result.length; \result[i] <= \result[j];
    int[] bubbleSort(int arr[]) { 
	SwapInArray s = new SwapInArray();
        int n = arr.length;
	
	//@ maintaining n == arr.length;
	//@ maintaining 0 <= i && i < n; 
	//@ maintaining 0 < i ==> (\forall int k; 0 <= k && k < n-i; arr[k] <= arr[n-i]);
	//@ maintaining  (\forall int t; n-i <= t && t < n; arr[n-i] <= arr[t]);
	//@ maintaining 0 < i ==> (\forall int h; n-i <= h && h < n; (\forall int p; n-i <= p && p < n && p <= h; arr[p] <= arr[h]));
 	//@ decreases n - i;
        for (int i = 0; i < n-1; i++) {	
	    //@ maintaining 0 <= i && i < n - 1;
	    //@ maintaining 0 <= j && j < n - i;
	    //@ maintaining 0 < j ==> arr[j-1] <= arr[j];
	    //@ maintaining (\forall int k; 0 <= k && k < j; arr[k] <= arr[j]);
	    //@ maintaining 0 < j  && j < n - i ==> (\forall int t; n-i <= t && t < n; arr[j] <= arr[t]);
	    //@ decreases n - j;
            for (int j = 0; j < n-i-1; j++) {
                if (arr[j+1] < arr[j]) {  
		    s.swap(j, j + 1, arr); 
                } 
	    }
	} 
	return null; // arr;
    } 
}",Buggy
"public class SwapInArray {
        /*@ requires 0 <= x && x < array.length && 0 <= y && y < array.length; 
	  @ assignable array[x], array[y]; 
	  @ ensures \old(array[x]) == array[y] && \old(array[y]) == array[x];
	  @ ensures array.length == \old(array.length); @*/
	public void swap(int x, int y,  int array[]) {
	  int temp;     
          temp = array[x];
          array[x] = array[y];
          array[y] = temp;
       }
    }",Buggy
"public class BubbleSort { 
    //@ requires 0 < arr.length;
    //@ ensures \forall int i; 0 <= i && i < \result.length; \forall int j; i <= j && j < \result.length; \result[i] <= \result[j];
    int[] bubbleSort(int arr[]) { 
	SwapInArray s = new SwapInArray();
        int n = arr.length;
	
	//@ maintaining n == arr.length;
	//@ maintaining 0 <= i && i < n; 
	//@ maintaining 0 < i ==> (\forall int k; 0 <= k && k < n-i; arr[k] <= arr[n-i]);
	//@ maintaining  (\forall int t; n-i <= t && t < n; arr[n-i] <= arr[t]);
	//@ maintaining 0 < i ==> (\forall int h; n-i <= h && h < n; (\forall int p; n-i <= p && p < n && p <= h; arr[p] <= arr[h]));
 	//@ decreases n - i;
        for (int i = 0; i >= n-1; i++) { // for (int i = 0; i < n-1; i++) {	
	    //@ maintaining 0 <= i && i < n - 1;
	    //@ maintaining 0 <= j && j < n - i;
	    //@ maintaining 0 < j ==> arr[j-1] <= arr[j];
	    //@ maintaining (\forall int k; 0 <= k && k < j; arr[k] <= arr[j]);
	    //@ maintaining 0 < j  && j < n - i ==> (\forall int t; n-i <= t && t < n; arr[j] <= arr[t]);
	    //@ decreases n - j;
            for (int j = 0; j < n-i-1; j++) {
                if (arr[j+1] < arr[j]) {  
		    s.swap(j, j + 1, arr); 
                } 
	    }
	} 
	return arr;
    } 
}",Buggy
"public class SwapInArray {
        /*@ requires 0 <= x && x < array.length && 0 <= y && y < array.length; 
	  @ assignable array[x], array[y]; 
	  @ ensures \old(array[x]) == array[y] && \old(array[y]) == array[x];
	  @ ensures array.length == \old(array.length); @*/
	public void swap(int x, int y,  int array[]) {
	  int temp;     
          temp = array[x];
          array[x] = array[y];
          array[y] = temp;
       }
    }",Buggy
"public class BubbleSort { 
    //@ requires 0 < arr.length;
    //@ ensures \forall int i; 0 <= i && i < \result.length; \forall int j; i <= j && j < \result.length; \result[i] <= \result[j];
    int[] bubbleSort(int arr[]) { 
	SwapInArray s = new SwapInArray();
        int n = arr.length;
	
	//@ maintaining n == arr.length;
	//@ maintaining 0 <= i && i < n; 
	//@ maintaining 0 < i ==> (\forall int k; 0 <= k && k < n-i; arr[k] <= arr[n-i]);
	//@ maintaining  (\forall int t; n-i <= t && t < n; arr[n-i] <= arr[t]);
	//@ maintaining 0 < i ==> (\forall int h; n-i <= h && h < n; (\forall int p; n-i <= p && p < n && p <= h; arr[p] <= arr[h]));
 	//@ decreases n - i;
        for (int i = 0; i < n-1; i++) {	    
	    //@ maintaining 0 <= i && i < n - 1;
	    //@ maintaining 0 <= j && j < n - i;
	    //@ maintaining 0 < j ==> arr[j-1] <= arr[j];
	    //@ maintaining (\forall int k; 0 <= k && k < j; arr[k] <= arr[j]);
	    //@ maintaining 0 < j  && j < n - i ==> (\forall int t; n-i <= t && t < n; arr[j] <= arr[t]);
	    //@ decreases n - j;
            for (int j = 0; j <= n-i-1; j++) { // for (int j = 0; j < n-i-1; j++) {
                if (arr[j+1] < arr[j]) {  
		    s.swap(j, j + 1, arr); 
                } 
	    }
	} 
	return arr;
    } 
}",Buggy
"public class SwapInArray {
        /*@ requires 0 <= x && x < array.length && 0 <= y && y < array.length; 
	  @ assignable array[x], array[y]; 
	  @ ensures \old(array[x]) == array[y] && \old(array[y]) == array[x];
	  @ ensures array.length == \old(array.length); @*/
	public void swap(int x, int y,  int array[]) {
	  int temp;     
          temp = array[x];
          array[x] = array[y];
          array[y] = temp;
       }
    }",Buggy
"public class BubbleSort { 
    //@ requires 0 < arr.length;
    //@ ensures \forall int i; 0 <= i && i < \result.length; \forall int j; i <= j && j < \result.length; \result[i] <= \result[j];
    int[] bubbleSort(int arr[]) { 
	SwapInArray s = new SwapInArray();
        int n = arr.length;
	
	//@ maintaining n == arr.length;
	//@ maintaining 0 <= i && i < n; 
	//@ maintaining 0 < i ==> (\forall int k; 0 <= k && k < n-i; arr[k] <= arr[n-i]);
	//@ maintaining  (\forall int t; n-i <= t && t < n; arr[n-i] <= arr[t]);
	//@ maintaining 0 < i ==> (\forall int h; n-i <= h && h < n; (\forall int p; n-i <= p && p < n && p <= h; arr[p] <= arr[h]));
 	//@ decreases n - i;
        for (int i = 0; i < n-1; i++) {	
	    //@ maintaining 0 <= i && i < n - 1;
	    //@ maintaining 0 <= j && j < n - i;
	    //@ maintaining 0 < j ==> arr[j-1] <= arr[j];
	    //@ maintaining (\forall int k; 0 <= k && k < j; arr[k] <= arr[j]);
	    //@ maintaining 0 < j  && j < n - i ==> (\forall int t; n-i <= t && t < n; arr[j] <= arr[t]);
	    //@ decreases n - j;
            for (int j = 0; j < n-i-1; j--) { // for (int j = 0; j < n-i-1; j++) {
                if (arr[j+1] < arr[j]) {  
		    s.swap(j, j + 1, arr); 
                } 
	    }
	} 
	return arr;
    } 
}",Buggy
"public class SwapInArray {
        /*@ requires 0 <= x && x < array.length && 0 <= y && y < array.length; 
	  @ assignable array[x], array[y]; 
	  @ ensures \old(array[x]) == array[y] && \old(array[y]) == array[x];
	  @ ensures array.length == \old(array.length); @*/
	public void swap(int x, int y,  int array[]) {
	  int temp;     
          temp = array[x];
          array[x] = array[y];
          array[y] = temp;
       }
    }",Buggy
"public class BubbleSort { 
    //@ requires 0 < arr.length;
    //@ ensures \forall int i; 0 <= i && i < \result.length; \forall int j; i <= j && j < \result.length; \result[i] <= \result[j];
    int[] bubbleSort(int arr[]) { 
	SwapInArray s = new SwapInArray();
        int n = arr.length;
	
	//@ maintaining n == arr.length;
	//@ maintaining 0 <= i && i < n; 
	//@ maintaining 0 < i ==> (\forall int k; 0 <= k && k < n-i; arr[k] <= arr[n-i]);
	//@ maintaining  (\forall int t; n-i <= t && t < n; arr[n-i] <= arr[t]);
	//@ maintaining 0 < i ==> (\forall int h; n-i <= h && h < n; (\forall int p; n-i <= p && p < n && p <= h; arr[p] <= arr[h]));
 	//@ decreases n - i;
        for (int i = 0; i < n-1; i++) {	
	    //@ maintaining 0 <= i && i < n - 1;
	    //@ maintaining 0 <= j && j < n - i;
	    //@ maintaining 0 < j ==> arr[j-1] <= arr[j];
	    //@ maintaining (\forall int k; 0 <= k && k < j; arr[k] <= arr[j]);
	    //@ maintaining 0 < j  && j < n - i ==> (\forall int t; n-i <= t && t < n; arr[j] <= arr[t]);
	    //@ decreases n - j;
            for (int j = 0; j < n+i-1; j++) { // for (int j = 0; j < n-i-1; j++) {
                if (arr[j+1] < arr[j]) {  
		    s.swap(j, j + 1, arr); 
                } 
	    }
	} 
	return arr;
    } 
}",Buggy
"public class SwapInArray {
        /*@ requires 0 <= x && x < array.length && 0 <= y && y < array.length; 
	  @ assignable array[x], array[y]; 
	  @ ensures \old(array[x]) == array[y] && \old(array[y]) == array[x];
	  @ ensures array.length == \old(array.length); @*/
	public void swap(int x, int y,  int array[]) {
	  int temp;     
          temp = array[x];
          array[x] = array[y];
          array[y] = temp;
       }
    }",Buggy
"public class BubbleSort { 
    //@ requires 0 < arr.length;
    //@ ensures \forall int i; 0 <= i && i < \result.length; \forall int j; i <= j && j < \result.length; \result[i] <= \result[j];
    int[] bubbleSort(int arr[]) { 
	SwapInArray s = new SwapInArray();
        int n = arr.length;
	
	//@ maintaining n == arr.length;
	//@ maintaining 0 <= i && i < n; 
	//@ maintaining 0 < i ==> (\forall int k; 0 <= k && k < n-i; arr[k] <= arr[n-i]);
	//@ maintaining  (\forall int t; n-i <= t && t < n; arr[n-i] <= arr[t]);
	//@ maintaining 0 < i ==> (\forall int h; n-i <= h && h < n; (\forall int p; n-i <= p && p < n && p <= h; arr[p] <= arr[h]));
 	//@ decreases n - i;
        for (int i = 0; i < n-1; i++) {	
	    //@ maintaining 0 <= i && i < n - 1;
	    //@ maintaining 0 <= j && j < n - i;
	    //@ maintaining 0 < j ==> arr[j-1] <= arr[j];
	    //@ maintaining (\forall int k; 0 <= k && k < j; arr[k] <= arr[j]);
	    //@ maintaining 0 < j  && j < n - i ==> (\forall int t; n-i <= t && t < n; arr[j] <= arr[t]);
	    //@ decreases n - j;
            for (int j = 0; j < n-i+1; j++) { // for (int j = 0; j < n-i-1; j++) {
                if (arr[j+1] < arr[j]) {  
		    s.swap(j, j + 1, arr); 
                } 
	    }
	} 
	return arr;
    } 
}",Buggy
"public class SwapInArray {
        /*@ requires 0 <= x && x < array.length && 0 <= y && y < array.length; 
	  @ assignable array[x], array[y]; 
	  @ ensures \old(array[x]) == array[y] && \old(array[y]) == array[x];
	  @ ensures array.length == \old(array.length); @*/
	public void swap(int x, int y,  int array[]) {
	  int temp;     
          temp = array[x];
          array[x] = array[y];
          array[y] = temp;
       }
    }",Buggy
"public class BubbleSort { 
    //@ requires 0 < arr.length;
    //@ ensures \forall int i; 0 <= i && i < \result.length; \forall int j; i <= j && j < \result.length; \result[i] <= \result[j];
    int[] bubbleSort(int arr[]) { 
	SwapInArray s = new SwapInArray();
        int n = arr.length;
	
	//@ maintaining n == arr.length;
	//@ maintaining 0 <= i && i < n; 
	//@ maintaining 0 < i ==> (\forall int k; 0 <= k && k < n-i; arr[k] <= arr[n-i]);
	//@ maintaining  (\forall int t; n-i <= t && t < n; arr[n-i] <= arr[t]);
	//@ maintaining 0 < i ==> (\forall int h; n-i <= h && h < n; (\forall int p; n-i <= p && p < n && p <= h; arr[p] <= arr[h]));
 	//@ decreases n - i;
        for (int i = 0; i < n-1; i++) {	
	    //@ maintaining 0 <= i && i < n - 1;
	    //@ maintaining 0 <= j && j < n - i;
	    //@ maintaining 0 < j ==> arr[j-1] <= arr[j];
	    //@ maintaining (\forall int k; 0 <= k && k < j; arr[k] <= arr[j]);
	    //@ maintaining 0 < j  && j < n - i ==> (\forall int t; n-i <= t && t < n; arr[j] <= arr[t]);
	    //@ decreases n - j;
            for (int j = 0; j >= n-i-1; j++) { // for (int j = 0; j < n-i-1; j++) {
                if (arr[j+1] < arr[j]) {  
		    s.swap(j, j + 1, arr); 
                } 
	    }
	} 
	return arr;
    } 
}",Buggy
"public class SwapInArray {
        /*@ requires 0 <= x && x < array.length && 0 <= y && y < array.length; 
	  @ assignable array[x], array[y]; 
	  @ ensures \old(array[x]) == array[y] && \old(array[y]) == array[x];
	  @ ensures array.length == \old(array.length); @*/
	public void swap(int x, int y,  int array[]) {
	  int temp;     
          temp = array[x];
          array[x] = array[y];
          array[y] = temp;
       }
    }",Buggy
"public class BubbleSort { 
    //@ requires 0 < arr.length;
    //@ ensures \forall int i; 0 <= i && i < \result.length; \forall int j; i <= j && j < \result.length; \result[i] <= \result[j];
    int[] bubbleSort(int arr[]) { 
	SwapInArray s = new SwapInArray();
        int n = arr.length;
	
	//@ maintaining n == arr.length;
	//@ maintaining 0 <= i && i < n; 
	//@ maintaining 0 < i ==> (\forall int k; 0 <= k && k < n-i; arr[k] <= arr[n-i]);
	//@ maintaining  (\forall int t; n-i <= t && t < n; arr[n-i] <= arr[t]);
	//@ maintaining 0 < i ==> (\forall int h; n-i <= h && h < n; (\forall int p; n-i <= p && p < n && p <= h; arr[p] <= arr[h]));
 	//@ decreases n - i;
        for (int i = 0; i < n-1; i++) {	
	    //@ maintaining 0 <= i && i < n - 1;
	    //@ maintaining 0 <= j && j < n - i;
	    //@ maintaining 0 < j ==> arr[j-1] <= arr[j];
	    //@ maintaining (\forall int k; 0 <= k && k < j; arr[k] <= arr[j]);
	    //@ maintaining 0 < j  && j < n - i ==> (\forall int t; n-i <= t && t < n; arr[j] <= arr[t]);
	    //@ decreases n - j;
            for (int j = 0; j < n-i-1; j++) {
                if (arr[j-1] < arr[j]) { // if (arr[j+1] < arr[j]) {  
		    s.swap(j, j + 1, arr); 
                } 
	    }
	} 
	return arr;
    } 
}",Buggy
"public class SwapInArray {
        /*@ requires 0 <= x && x < array.length && 0 <= y && y < array.length; 
	  @ assignable array[x], array[y]; 
	  @ ensures \old(array[x]) == array[y] && \old(array[y]) == array[x];
	  @ ensures array.length == \old(array.length); @*/
	public void swap(int x, int y,  int array[]) {
	  int temp;     
          temp = array[x];
          array[x] = array[y];
          array[y] = temp;
       }
    }",Buggy
"public class BubbleSort { 
    //@ requires 0 < arr.length;
    //@ ensures \forall int i; 0 <= i && i < \result.length; \forall int j; i <= j && j < \result.length; \result[i] <= \result[j];
    int[] bubbleSort(int arr[]) { 
	SwapInArray s = new SwapInArray();
        int n = arr.length;
	
	//@ maintaining n == arr.length;
	//@ maintaining 0 <= i && i < n; 
	//@ maintaining 0 < i ==> (\forall int k; 0 <= k && k < n-i; arr[k] <= arr[n-i]);
	//@ maintaining  (\forall int t; n-i <= t && t < n; arr[n-i] <= arr[t]);
	//@ maintaining 0 < i ==> (\forall int h; n-i <= h && h < n; (\forall int p; n-i <= p && p < n && p <= h; arr[p] <= arr[h]));
 	//@ decreases n - i;
        for (int i = 0; i < n-1; i++) {	
	    //@ maintaining 0 <= i && i < n - 1;
	    //@ maintaining 0 <= j && j < n - i;
	    //@ maintaining 0 < j ==> arr[j-1] <= arr[j];
	    //@ maintaining (\forall int k; 0 <= k && k < j; arr[k] <= arr[j]);
	    //@ maintaining 0 < j  && j < n - i ==> (\forall int t; n-i <= t && t < n; arr[j] <= arr[t]);
	    //@ decreases n - j;
            for (int j = 0; j < n-i-1; j++) {
                if (arr[j+1] >= arr[j]) { // if (arr[j+1] < arr[j]) {  
		    s.swap(j, j + 1, arr); 
                } 
	    }
	} 
	return arr;
    } 
}",Buggy
"public class SwapInArray {
        /*@ requires 0 <= x && x < array.length && 0 <= y && y < array.length; 
	  @ assignable array[x], array[y]; 
	  @ ensures \old(array[x]) == array[y] && \old(array[y]) == array[x];
	  @ ensures array.length == \old(array.length); @*/
	public void swap(int x, int y,  int array[]) {
	  int temp;     
          temp = array[x];
          array[x] = array[y];
          array[y] = temp;
       }
    }",Buggy
"public class Calculator {
    /*@ requires 37 <= (int)operator && (int)operator <= 47;
      @ {|
      @    requires operator == '+';
      @    requires num1 + num2 <= Integer.MAX_VALUE;
      @    requires Integer.MIN_VALUE <= num1 + num2;
      @    ensures \result == num1 + num2;
      @ also
      @    requires operator == '*'; 
      @    requires num1 * num2 <= Integer.MAX_VALUE;
      @    requires Integer.MIN_VALUE <= num1 * num2;
      @    ensures \result == num1 * num2;
      @ also
      @    requires operator == '-'; 
      @    requires num1 - num2 <= Integer.MAX_VALUE;
      @    requires Integer.MIN_VALUE <= num1 - num2;
      @    ensures \result == num1 - num2;
      @ also
      @    requires operator == '/'; 
      @    requires num2 != 0;
      @    requires num1 / num2 <= Integer.MAX_VALUE;
      @    requires num1 / num2 != Integer.MIN_VALUE;
      @    ensures \result == (num1 / num2);
      @ also
      @    requires operator == '%'; 
      @    requires num2 != 0;
      @    requires num1 % num2 != Integer.MIN_VALUE;
      @    ensures \result == (num1 % num2);
      @ also
      @    requires operator != '+' && operator != '*' && operator != '-' && operator != '/' && operator != '%';
      @    ensures \result == -1;
    |} @*/
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	output = num1 - num2;//output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}",Buggy
"public class Calculator {
    /*@ requires 37 <= (int)operator && (int)operator <= 47;
      @ {|
      @    requires operator == '+';
      @    requires num1 + num2 <= Integer.MAX_VALUE;
      @    requires Integer.MIN_VALUE <= num1 + num2;
      @    ensures \result == num1 + num2;
      @ also
      @    requires operator == '*'; 
      @    requires num1 * num2 <= Integer.MAX_VALUE;
      @    requires Integer.MIN_VALUE <= num1 * num2;
      @    ensures \result == num1 * num2;
      @ also
      @    requires operator == '-'; 
      @    requires num1 - num2 <= Integer.MAX_VALUE;
      @    requires Integer.MIN_VALUE <= num1 - num2;
      @    ensures \result == num1 - num2;
      @ also
      @    requires operator == '/'; 
      @    requires num2 != 0;
      @    requires num1 / num2 <= Integer.MAX_VALUE;
      @    requires num1 / num2 != Integer.MIN_VALUE;
      @    ensures \result == (num1 / num2);
      @ also
      @    requires operator == '%'; 
      @    requires num2 != 0;
      @    requires num1 % num2 != Integer.MIN_VALUE;
      @    ensures \result == (num1 % num2);
      @ also
      @    requires operator != '+' && operator != '*' && operator != '-' && operator != '/' && operator != '%';
      @    ensures \result == -1;
    |} @*/
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 + num2;//output = num1 - num2;
                break;

            case '*':
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}",Buggy
"public class Calculator {
    /*@ requires 37 <= (int)operator && (int)operator <= 47;
      @ {|
      @    requires operator == '+';
      @    requires num1 + num2 <= Integer.MAX_VALUE;
      @    requires Integer.MIN_VALUE <= num1 + num2;
      @    ensures \result == num1 + num2;
      @ also
      @    requires operator == '*'; 
      @    requires num1 * num2 <= Integer.MAX_VALUE;
      @    requires Integer.MIN_VALUE <= num1 * num2;
      @    ensures \result == num1 * num2;
      @ also
      @    requires operator == '-'; 
      @    requires num1 - num2 <= Integer.MAX_VALUE;
      @    requires Integer.MIN_VALUE <= num1 - num2;
      @    ensures \result == num1 - num2;
      @ also
      @    requires operator == '/'; 
      @    requires num2 != 0;
      @    requires num1 / num2 <= Integer.MAX_VALUE;
      @    requires num1 / num2 != Integer.MIN_VALUE;
      @    ensures \result == (num1 / num2);
      @ also
      @    requires operator == '%'; 
      @    requires num2 != 0;
      @    requires num1 % num2 != Integer.MIN_VALUE;
      @    ensures \result == (num1 % num2);
      @ also
      @    requires operator != '+' && operator != '*' && operator != '-' && operator != '/' && operator != '%';
      @    ensures \result == -1;
    |} @*/
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	output = num1 / num2;//output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}",Buggy
"public class Calculator {
    /*@ requires 37 <= (int)operator && (int)operator <= 47;
      @ {|
      @    requires operator == '+';
      @    requires num1 + num2 <= Integer.MAX_VALUE;
      @    requires Integer.MIN_VALUE <= num1 + num2;
      @    ensures \result == num1 + num2;
      @ also
      @    requires operator == '*'; 
      @    requires num1 * num2 <= Integer.MAX_VALUE;
      @    requires Integer.MIN_VALUE <= num1 * num2;
      @    ensures \result == num1 * num2;
      @ also
      @    requires operator == '-'; 
      @    requires num1 - num2 <= Integer.MAX_VALUE;
      @    requires Integer.MIN_VALUE <= num1 - num2;
      @    ensures \result == num1 - num2;
      @ also
      @    requires operator == '/'; 
      @    requires num2 != 0;
      @    requires num1 / num2 <= Integer.MAX_VALUE;
      @    requires num1 / num2 != Integer.MIN_VALUE;
      @    ensures \result == (num1 / num2);
      @ also
      @    requires operator == '%'; 
      @    requires num2 != 0;
      @    requires num1 % num2 != Integer.MIN_VALUE;
      @    ensures \result == (num1 % num2);
      @ also
      @    requires operator != '+' && operator != '*' && operator != '-' && operator != '/' && operator != '%';
      @    ensures \result == -1;
    |} @*/
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 * num2;//output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}",Buggy
"public class Calculator {
    /*@ requires 37 <= (int)operator && (int)operator <= 47;
      @ {|
      @    requires operator == '+';
      @    requires num1 + num2 <= Integer.MAX_VALUE;
      @    requires Integer.MIN_VALUE <= num1 + num2;
      @    ensures \result == num1 + num2;
      @ also
      @    requires operator == '*'; 
      @    requires num1 * num2 <= Integer.MAX_VALUE;
      @    requires Integer.MIN_VALUE <= num1 * num2;
      @    ensures \result == num1 * num2;
      @ also
      @    requires operator == '-'; 
      @    requires num1 - num2 <= Integer.MAX_VALUE;
      @    requires Integer.MIN_VALUE <= num1 - num2;
      @    ensures \result == num1 - num2;
      @ also
      @    requires operator == '/'; 
      @    requires num2 != 0;
      @    requires num1 / num2 <= Integer.MAX_VALUE;
      @    requires num1 / num2 != Integer.MIN_VALUE;
      @    ensures \result == (num1 / num2);
      @ also
      @    requires operator == '%'; 
      @    requires num2 != 0;
      @    requires num1 % num2 != Integer.MIN_VALUE;
      @    ensures \result == (num1 % num2);
      @ also
      @    requires operator != '+' && operator != '*' && operator != '-' && operator != '/' && operator != '%';
      @    ensures \result == -1;
    |} @*/    
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {

        int output;
	
        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 * num2;//output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }
}",Buggy
"public class Calculator {
    /*@ requires 37 <= (int)operator && (int)operator <= 47;
      @ {|
      @    requires operator == '+';
      @    requires num1 + num2 <= Integer.MAX_VALUE;
      @    requires Integer.MIN_VALUE <= num1 + num2;
      @    ensures \result == num1 + num2;
      @ also
      @    requires operator == '*'; 
      @    requires num1 * num2 <= Integer.MAX_VALUE;
      @    requires Integer.MIN_VALUE <= num1 * num2;
      @    ensures \result == num1 * num2;
      @ also
      @    requires operator == '-'; 
      @    requires num1 - num2 <= Integer.MAX_VALUE;
      @    requires Integer.MIN_VALUE <= num1 - num2;
      @    ensures \result == num1 - num2;
      @ also
      @    requires operator == '/'; 
      @    requires num2 != 0;
      @    requires num1 / num2 <= Integer.MAX_VALUE;
      @    requires num1 / num2 != Integer.MIN_VALUE;
      @    ensures \result == (num1 / num2);
      @ also
      @    requires operator == '%'; 
      @    requires num2 != 0;
      @    requires num1 % num2 != Integer.MIN_VALUE;
      @    ensures \result == (num1 % num2);
      @ also
      @    requires operator != '+' && operator != '*' && operator != '-' && operator != '/' && operator != '%';
      @    ensures \result == -1;
    |} @*/
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return 0; // -1;
        }
        return output;
    }
}",Buggy
"public class Calculator {
    /*@ requires 37 <= (int)operator && (int)operator <= 47;
      @ {|
      @    requires operator == '+';
      @    requires num1 + num2 <= Integer.MAX_VALUE;
      @    requires Integer.MIN_VALUE <= num1 + num2;
      @    ensures \result == num1 + num2;
      @ also
      @    requires operator == '*'; 
      @    requires num1 * num2 <= Integer.MAX_VALUE;
      @    requires Integer.MIN_VALUE <= num1 * num2;
      @    ensures \result == num1 * num2;
      @ also
      @    requires operator == '-'; 
      @    requires num1 - num2 <= Integer.MAX_VALUE;
      @    requires Integer.MIN_VALUE <= num1 - num2;
      @    ensures \result == num1 - num2;
      @ also
      @    requires operator == '/'; 
      @    requires num2 != 0;
      @    requires num1 / num2 <= Integer.MAX_VALUE;
      @    requires num1 / num2 != Integer.MIN_VALUE;
      @    ensures \result == (num1 / num2);
      @ also
      @    requires operator == '%'; 
      @    requires num2 != 0;
      @    requires num1 % num2 != Integer.MIN_VALUE;
      @    ensures \result == (num1 % num2);
      @ also
      @    requires operator != '+' && operator != '*' && operator != '-' && operator != '/' && operator != '%';
      @    ensures \result == -1;
    |} @*/
    public /*@ pure @*/ int calculate(int num1, int num2, char operator) {

        int output;
	
        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return (output == 0 ? 1 : 0);//output;
    }
}",Buggy
"public class CombinationPermutation {
	//@ requires 0 <= n && n <= 20 && 0 <= r && r <= n;
	//@ old Factorial fac_spec = new Factorial();
	//@ ensures \result == fac_spec.spec_factorial(n)/(fac_spec.spec_factorial(r) * fac_spec.spec_factorial(n-r));
        private /* pure @*/ long combination(int n, int r) {
		Factorial fac = new Factorial();
		long combin;
		combin = fac.factorial(n) / (fac.factorial(r) * fac.factorial(n+r)); //combin = fac.factorial(n) / (fac.factorial(r) * fac.factorial(n-r));
		return combin;
	}

	//@ requires 0 <= n && n <= 20 && 0 <= r && r <= n;
	//@ old Factorial fac_spec = new Factorial();
	//@ ensures \result == fac_spec.spec_factorial(n)/fac_spec.spec_factorial(n-r);
	private /* pure @*/ long permutation(int n, int r) {
		Factorial fac = new Factorial();
		long permut;
		permut = fac.factorial(n) / fac.factorial(n-r);
		return permut;
	}

	/*@ old Factorial fac_spec = new Factorial();
	  @ requires 0 <= n && n <= 20 && 0 <= r && r <= n; 	
	  @ {|		
	  @	requires flag; 	
	  @ 	ensures \result == fac_spec.spec_factorial(n)/(fac_spec.spec_factorial(r) * fac_spec.spec_factorial(n-r));
	  @ also
	  @	requires !flag;
	  @	ensures \result == fac_spec.spec_factorial(n)/fac_spec.spec_factorial(n-r); |} @*/
	public /* pure @*/ long select(int n, int r, boolean flag) {
		return flag ? combination(n, r) : permutation(n, r);
	}
}",Buggy
"public class Factorial
    {
       //@ requires 0 <= n && n <= 20;
       //@ ensures \result >= 1 && \result <= Long.MAX_VALUE;
       //@ ensures \result == spec_factorial(n);
       public /* pure @*/ long factorial(int n)
       {
          int c;
          long fact = 1;

	  //@ assert spec_factorial(0) == 1;
	   if (n == 0) {         
              return fact;
	   }

          //@ maintaining c >= 1 && c <= n+1;
	  //@ maintaining fact > 0;
	  //@ maintaining fact <= Long.MAX_VALUE; 
	  //@ maintaining spec_factorial(c - 1) == fact;
	  //@ decreases n - c;
          for (c = 1; c <= n; c++) { 
                fact = fact*c;
             }	 

          return fact;
      }

	/*@ 	requires n > 0 && n <= 20;
            	ensures 0 <= \result && \result <= Long.MAX_VALUE;
            	ensures n > 0 ==> \result == n * spec_factorial(n-1);
            also
            	requires n == 0;
            	ensures \result == 1;
        public model function static pure long spec_factorial(int n) { 
	    if (n == 0) {
		 return 1; 
	    }
	    else {
	        assert n * spec_factorial(n-1) <= Long.MAX_VALUE;
		return n * spec_factorial(n-1);
	    }
        }@*/
    }",Buggy
"public class CombinationPermutation {
	//@ requires 0 <= n && n <= 20 && 0 <= r && r <= n;
	//@ old Factorial fac_spec = new Factorial();
	//@ ensures \result == fac_spec.spec_factorial(n)/(fac_spec.spec_factorial(r) * fac_spec.spec_factorial(n-r));
        private /* pure @*/ long combination(int n, int r) {
		Factorial fac = new Factorial();
		long combin;
		combin = fac.factorial(n) / (fac.factorial(r) / fac.factorial(n-r)); //combin = fac.factorial(n) / (fac.factorial(r) * fac.factorial(n-r));
		return combin;
	}

	//@ requires 0 <= n && n <= 20 && 0 <= r && r <= n;
	//@ old Factorial fac_spec = new Factorial();
	//@ ensures \result == fac_spec.spec_factorial(n)/fac_spec.spec_factorial(n-r);
	private /* pure @*/ long permutation(int n, int r) {
		Factorial fac = new Factorial();
		long permut;
		permut = fac.factorial(n) / fac.factorial(n-r);
		return permut;
	}

	/*@ old Factorial fac_spec = new Factorial();
	  @ requires 0 <= n && n <= 20 && 0 <= r && r <= n; 	
	  @ {|		
	  @	requires flag; 	
	  @ 	ensures \result == fac_spec.spec_factorial(n)/(fac_spec.spec_factorial(r) * fac_spec.spec_factorial(n-r));
	  @ also
	  @	requires !flag;
	  @	ensures \result == fac_spec.spec_factorial(n)/fac_spec.spec_factorial(n-r); |} @*/
	public /* pure @*/ long select(int n, int r, boolean flag) {
		return flag ? combination(n, r) : permutation(n, r);
	}
}",Buggy
"public class Factorial
    {
       //@ requires 0 <= n && n <= 20;
       //@ ensures \result >= 1 && \result <= Long.MAX_VALUE;
       //@ ensures \result == spec_factorial(n);
       public /* pure @*/ long factorial(int n)
       {
          int c;
          long fact = 1;

	  //@ assert spec_factorial(0) == 1;
	   if (n == 0) {         
              return fact;
	   }

          //@ maintaining c >= 1 && c <= n+1;
	  //@ maintaining fact > 0;
	  //@ maintaining fact <= Long.MAX_VALUE; 
	  //@ maintaining spec_factorial(c - 1) == fact;
	  //@ decreases n - c;
          for (c = 1; c <= n; c++) { 
                fact = fact*c;
             }	 

          return fact;
      }

	/*@ 	requires n > 0 && n <= 20;
            	ensures 0 <= \result && \result <= Long.MAX_VALUE;
            	ensures n > 0 ==> \result == n * spec_factorial(n-1);
            also
            	requires n == 0;
            	ensures \result == 1;
        public model function static pure long spec_factorial(int n) { 
	    if (n == 0) {
		 return 1; 
	    }
	    else {
	        assert n * spec_factorial(n-1) <= Long.MAX_VALUE;
		return n * spec_factorial(n-1);
	    }
        }@*/
    }",Buggy
"public class CombinationPermutation {
	//@ requires 0 <= n && n <= 20 && 0 <= r && r <= n;
	//@ old Factorial fac_spec = new Factorial();
	//@ ensures \result == fac_spec.spec_factorial(n)/(fac_spec.spec_factorial(r) * fac_spec.spec_factorial(n-r));
        private /* pure @*/ long combination(int n, int r) {
		Factorial fac = new Factorial();
		long combin;
		combin = fac.factorial(n) * (fac.factorial(r) * fac.factorial(n-r)); // combin = fac.factorial(n) / (fac.factorial(r) * fac.factorial(n-r));
		return combin;
	}

	//@ requires 0 <= n && n <= 20 && 0 <= r && r <= n;
	//@ old Factorial fac_spec = new Factorial();
	//@ ensures \result == fac_spec.spec_factorial(n)/fac_spec.spec_factorial(n-r);
	private /* pure @*/ long permutation(int n, int r) {
		Factorial fac = new Factorial();
		long permut;
		permut = fac.factorial(n) / fac.factorial(n-r);
		return permut;
	}

	/*@ old Factorial fac_spec = new Factorial();
	  @ requires 0 <= n && n <= 20 && 0 <= r && r <= n; 	
	  @ {|		
	  @	requires flag; 	
	  @ 	ensures \result == fac_spec.spec_factorial(n)/(fac_spec.spec_factorial(r) * fac_spec.spec_factorial(n-r));
	  @ also
	  @	requires !flag;
	  @	ensures \result == fac_spec.spec_factorial(n)/fac_spec.spec_factorial(n-r); |} @*/
	public /* pure @*/ long select(int n, int r, boolean flag) {
		return flag ? combination(n, r) : permutation(n, r);
	}
}",Buggy
"public class Factorial
    {
       //@ requires 0 <= n && n <= 20;
       //@ ensures \result >= 1 && \result <= Long.MAX_VALUE;
       //@ ensures \result == spec_factorial(n);
       public /* pure @*/ long factorial(int n)
       {
          int c;
          long fact = 1;

	  //@ assert spec_factorial(0) == 1;
	   if (n == 0) {         
              return fact;
	   }

          //@ maintaining c >= 1 && c <= n+1;
	  //@ maintaining fact > 0;
	  //@ maintaining fact <= Long.MAX_VALUE; 
	  //@ maintaining spec_factorial(c - 1) == fact;
	  //@ decreases n - c;
          for (c = 1; c <= n; c++) { 
                fact = fact*c;
             }	 

          return fact;
      }

	/*@ 	requires n > 0 && n <= 20;
            	ensures 0 <= \result && \result <= Long.MAX_VALUE;
            	ensures n > 0 ==> \result == n * spec_factorial(n-1);
            also
            	requires n == 0;
            	ensures \result == 1;
        public model function static pure long spec_factorial(int n) { 
	    if (n == 0) {
		 return 1; 
	    }
	    else {
	        assert n * spec_factorial(n-1) <= Long.MAX_VALUE;
		return n * spec_factorial(n-1);
	    }
        }@*/
    }",Buggy
"public class CombinationPermutation {
	//@ requires 0 <= n && n <= 20 && 0 <= r && r <= n;
	//@ old Factorial fac_spec = new Factorial();
	//@ ensures \result == fac_spec.spec_factorial(n)/(fac_spec.spec_factorial(r) * fac_spec.spec_factorial(n-r));
        private /* pure @*/ long combination(int n, int r) {
		Factorial fac = new Factorial();
		long combin;
		combin = fac.factorial(n) / (fac.factorial(r) * fac.factorial(n-r));
		return (combin+1); //return combin;
	}

	//@ requires 0 <= n && n <= 20 && 0 <= r && r <= n;
	//@ old Factorial fac_spec = new Factorial();
	//@ ensures \result == fac_spec.spec_factorial(n)/fac_spec.spec_factorial(n-r);
	private /* pure @*/ long permutation(int n, int r) {
		Factorial fac = new Factorial();
		long permut;
		permut = fac.factorial(n) / fac.factorial(n-r);
		return permut;
	}

	/*@ old Factorial fac_spec = new Factorial();
	  @ requires 0 <= n && n <= 20 && 0 <= r && r <= n; 	
	  @ {|		
	  @	requires flag; 	
	  @ 	ensures \result == fac_spec.spec_factorial(n)/(fac_spec.spec_factorial(r) * fac_spec.spec_factorial(n-r));
	  @ also
	  @	requires !flag;
	  @	ensures \result == fac_spec.spec_factorial(n)/fac_spec.spec_factorial(n-r); |} @*/
	public /* pure @*/ long select(int n, int r, boolean flag) {
		return flag ? combination(n, r) : permutation(n, r);
	}
}",Buggy
"public class Factorial
    {
       //@ requires 0 <= n && n <= 20;
       //@ ensures \result >= 1 && \result <= Long.MAX_VALUE;
       //@ ensures \result == spec_factorial(n);
       public /* pure @*/ long factorial(int n)
       {
          int c;
          long fact = 1;

	  //@ assert spec_factorial(0) == 1;
	   if (n == 0) {         
              return fact;
	   }

          //@ maintaining c >= 1 && c <= n+1;
	  //@ maintaining fact > 0;
	  //@ maintaining fact <= Long.MAX_VALUE; 
	  //@ maintaining spec_factorial(c - 1) == fact;
	  //@ decreases n - c;
          for (c = 1; c <= n; c++) { 
                fact = fact*c;
             }	 

          return fact;
      }

	/*@ 	requires n > 0 && n <= 20;
            	ensures 0 <= \result && \result <= Long.MAX_VALUE;
            	ensures n > 0 ==> \result == n * spec_factorial(n-1);
            also
            	requires n == 0;
            	ensures \result == 1;
        public model function static pure long spec_factorial(int n) { 
	    if (n == 0) {
		 return 1; 
	    }
	    else {
	        assert n * spec_factorial(n-1) <= Long.MAX_VALUE;
		return n * spec_factorial(n-1);
	    }
        }@*/
    }",Buggy
"public class CombinationPermutation {
	//@ requires 0 <= n && n <= 20 && 0 <= r && r <= n;
	//@ old Factorial fac_spec = new Factorial();
	//@ ensures \result == fac_spec.spec_factorial(n)/(fac_spec.spec_factorial(r) * fac_spec.spec_factorial(n-r));
        private /* pure @*/ long combination(int n, int r) {
		Factorial fac = new Factorial();
		long combin;
		combin = fac.factorial(n) / (fac.factorial(r) * fac.factorial(n-r));
		return combin;
	}

	//@ requires 0 <= n && n <= 20 && 0 <= r && r <= n;
	//@ old Factorial fac_spec = new Factorial();
	//@ ensures \result == fac_spec.spec_factorial(n)/fac_spec.spec_factorial(n-r);
	private /* pure @*/ long permutation(int n, int r) {
		Factorial fac = new Factorial();
		long permut;
		permut = fac.factorial(n) / fac.factorial(n+r);//permut = fac.factorial(n) / fac.factorial(n-r);
		return permut;
	}

	/*@ old Factorial fac_spec = new Factorial();
	  @ requires 0 <= n && n <= 20 && 0 <= r && r <= n; 	
	  @ {|		
	  @	requires flag; 	
	  @ 	ensures \result == fac_spec.spec_factorial(n)/(fac_spec.spec_factorial(r) * fac_spec.spec_factorial(n-r));
	  @ also
	  @	requires !flag;
	  @	ensures \result == fac_spec.spec_factorial(n)/fac_spec.spec_factorial(n-r); |} @*/
	public /* pure @*/ long select(int n, int r, boolean flag) {
		return flag ? combination(n, r) : permutation(n, r);
	}
}",Buggy
"public class Factorial
    {
       //@ requires 0 <= n && n <= 20;
       //@ ensures \result >= 1 && \result <= Long.MAX_VALUE;
       //@ ensures \result == spec_factorial(n);
       public /* pure @*/ long factorial(int n)
       {
          int c;
          long fact = 1;

	  //@ assert spec_factorial(0) == 1;
	   if (n == 0) {         
              return fact;
	   }

          //@ maintaining c >= 1 && c <= n+1;
	  //@ maintaining fact > 0;
	  //@ maintaining fact <= Long.MAX_VALUE; 
	  //@ maintaining spec_factorial(c - 1) == fact;
	  //@ decreases n - c;
          for (c = 1; c <= n; c++) { 
                fact = fact*c;
             }	 

          return fact;
      }

	/*@ 	requires n > 0 && n <= 20;
            	ensures 0 <= \result && \result <= Long.MAX_VALUE;
            	ensures n > 0 ==> \result == n * spec_factorial(n-1);
            also
            	requires n == 0;
            	ensures \result == 1;
        public model function static pure long spec_factorial(int n) { 
	    if (n == 0) {
		 return 1; 
	    }
	    else {
	        assert n * spec_factorial(n-1) <= Long.MAX_VALUE;
		return n * spec_factorial(n-1);
	    }
        }@*/
    }",Buggy
"public class CombinationPermutation {
	//@ requires 0 <= n && n <= 20 && 0 <= r && r <= n;
	//@ old Factorial fac_spec = new Factorial();
	//@ ensures \result == fac_spec.spec_factorial(n)/(fac_spec.spec_factorial(r) * fac_spec.spec_factorial(n-r));
        private /* pure @*/ long combination(int n, int r) {
		Factorial fac = new Factorial();
		long combin;
		combin = fac.factorial(n) / (fac.factorial(r) * fac.factorial(n-r));
		return combin;
	}

	//@ requires 0 <= n && n <= 20 && 0 <= r && r <= n;
	//@ old Factorial fac_spec = new Factorial();
	//@ ensures \result == fac_spec.spec_factorial(n)/fac_spec.spec_factorial(n-r);
	private /* pure @*/ long permutation(int n, int r) {
		Factorial fac = new Factorial();
		long permut;
		permut = fac.factorial(n) * fac.factorial(n-r);//permut = fac.factorial(n) / fac.factorial(n-r);
		return permut;
	}

	/*@ old Factorial fac_spec = new Factorial();
	  @ requires 0 <= n && n <= 20 && 0 <= r && r <= n; 	
	  @ {|		
	  @	requires flag; 	
	  @ 	ensures \result == fac_spec.spec_factorial(n)/(fac_spec.spec_factorial(r) * fac_spec.spec_factorial(n-r));
	  @ also
	  @	requires !flag;
	  @	ensures \result == fac_spec.spec_factorial(n)/fac_spec.spec_factorial(n-r); |} @*/
	public /* pure @*/ long select(int n, int r, boolean flag) {
		return flag ? combination(n, r) : permutation(n, r);
	}
}",Buggy
"public class Factorial
    {
       //@ requires 0 <= n && n <= 20;
       //@ ensures \result >= 1 && \result <= Long.MAX_VALUE;
       //@ ensures \result == spec_factorial(n);
       public /* pure @*/ long factorial(int n)
       {
          int c;
          long fact = 1;

	  //@ assert spec_factorial(0) == 1;
	   if (n == 0) {         
              return fact;
	   }

          //@ maintaining c >= 1 && c <= n+1;
	  //@ maintaining fact > 0;
	  //@ maintaining fact <= Long.MAX_VALUE; 
	  //@ maintaining spec_factorial(c - 1) == fact;
	  //@ decreases n - c;
          for (c = 1; c <= n; c++) { 
                fact = fact*c;
             }	 

          return fact;
      }

	/*@ 	requires n > 0 && n <= 20;
            	ensures 0 <= \result && \result <= Long.MAX_VALUE;
            	ensures n > 0 ==> \result == n * spec_factorial(n-1);
            also
            	requires n == 0;
            	ensures \result == 1;
        public model function static pure long spec_factorial(int n) { 
	    if (n == 0) {
		 return 1; 
	    }
	    else {
	        assert n * spec_factorial(n-1) <= Long.MAX_VALUE;
		return n * spec_factorial(n-1);
	    }
        }@*/
    }",Buggy
"public class CombinationPermutation {
	//@ requires 0 <= n && n <= 20 && 0 <= r && r <= n;
	//@ old Factorial fac_spec = new Factorial();
	//@ ensures \result == fac_spec.spec_factorial(n)/(fac_spec.spec_factorial(r) * fac_spec.spec_factorial(n-r));
        private /* pure @*/ long combination(int n, int r) {
		Factorial fac = new Factorial();
		long combin;
		combin = fac.factorial(n) / (fac.factorial(r) * fac.factorial(n-r));
		return combin;
	}

	//@ requires 0 <= n && n <= 20 && 0 <= r && r <= n;
	//@ old Factorial fac_spec = new Factorial();
	//@ ensures \result == fac_spec.spec_factorial(n)/fac_spec.spec_factorial(n-r);
	private /* pure @*/ long permutation(int n, int r) {
		Factorial fac = new Factorial();
		long permut;
		permut = fac.factorial(n) / fac.factorial(n-r);
		return (permut+1); //return permut;
	}

	/*@ old Factorial fac_spec = new Factorial();
	  @ requires 0 <= n && n <= 20 && 0 <= r && r <= n; 	
	  @ {|		
	  @	requires flag; 	
	  @ 	ensures \result == fac_spec.spec_factorial(n)/(fac_spec.spec_factorial(r) * fac_spec.spec_factorial(n-r));
	  @ also
	  @	requires !flag;
	  @	ensures \result == fac_spec.spec_factorial(n)/fac_spec.spec_factorial(n-r); |} @*/
	public /* pure @*/ long select(int n, int r, boolean flag) {
		return flag ? combination(n, r) : permutation(n, r);
	}
}",Buggy
"public class Factorial
    {
       //@ requires 0 <= n && n <= 20;
       //@ ensures \result >= 1 && \result <= Long.MAX_VALUE;
       //@ ensures \result == spec_factorial(n);
       public /* pure @*/ long factorial(int n)
       {
          int c;
          long fact = 1;

	  //@ assert spec_factorial(0) == 1;
	   if (n == 0) {         
              return fact;
	   }

          //@ maintaining c >= 1 && c <= n+1;
	  //@ maintaining fact > 0;
	  //@ maintaining fact <= Long.MAX_VALUE; 
	  //@ maintaining spec_factorial(c - 1) == fact;
	  //@ decreases n - c;
          for (c = 1; c <= n; c++) { 
                fact = fact*c;
             }	 

          return fact;
      }

	/*@ 	requires n > 0 && n <= 20;
            	ensures 0 <= \result && \result <= Long.MAX_VALUE;
            	ensures n > 0 ==> \result == n * spec_factorial(n-1);
            also
            	requires n == 0;
            	ensures \result == 1;
        public model function static pure long spec_factorial(int n) { 
	    if (n == 0) {
		 return 1; 
	    }
	    else {
	        assert n * spec_factorial(n-1) <= Long.MAX_VALUE;
		return n * spec_factorial(n-1);
	    }
        }@*/
    }",Buggy
"public class CombinationPermutation {
	//@ requires 0 <= n && n <= 20 && 0 <= r && r <= n;
	//@ old Factorial fac_spec = new Factorial();
	//@ ensures \result == fac_spec.spec_factorial(n)/(fac_spec.spec_factorial(r) * fac_spec.spec_factorial(n-r));
        private /* pure @*/ long combination(int n, int r) {
		Factorial fac = new Factorial();
		long combin;
		combin = fac.factorial(n) / (fac.factorial(r) * fac.factorial(n-r));
		return combin;
	}

	//@ requires 0 <= n && n <= 20 && 0 <= r && r <= n;
	//@ old Factorial fac_spec = new Factorial();
	//@ ensures \result == fac_spec.spec_factorial(n)/fac_spec.spec_factorial(n-r);
	private /* pure @*/ long permutation(int n, int r) {
		Factorial fac = new Factorial();
		long permut;
		permut = fac.factorial(n) / fac.factorial(n-r);
		return permut;
	}

	/*@ old Factorial fac_spec = new Factorial();
	  @ requires 0 <= n && n <= 20 && 0 <= r && r <= n; 	
	  @ {|		
	  @	requires flag; 	
	  @ 	ensures \result == fac_spec.spec_factorial(n)/(fac_spec.spec_factorial(r) * fac_spec.spec_factorial(n-r));
	  @ also
	  @	requires !flag;
	  @	ensures \result == fac_spec.spec_factorial(n)/fac_spec.spec_factorial(n-r); |} @*/
	public /* pure @*/ long select(int n, int r, boolean flag) {
		return !flag ? combination(n, r) : permutation(n, r); //return flag ? combination(n, r) : permutation(n, r);
	}
}",Buggy
"public class Factorial
    {
       //@ requires 0 <= n && n <= 20;
       //@ ensures \result >= 1 && \result <= Long.MAX_VALUE;
       //@ ensures \result == spec_factorial(n);
       public /* pure @*/ long factorial(int n)
       {
          int c;
          long fact = 1;

	  //@ assert spec_factorial(0) == 1;
	   if (n == 0) {         
              return fact;
	   }

          //@ maintaining c >= 1 && c <= n+1;
	  //@ maintaining fact > 0;
	  //@ maintaining fact <= Long.MAX_VALUE; 
	  //@ maintaining spec_factorial(c - 1) == fact;
	  //@ decreases n - c;
          for (c = 1; c <= n; c++) { 
                fact = fact*c;
             }	 

          return fact;
      }

	/*@ 	requires n > 0 && n <= 20;
            	ensures 0 <= \result && \result <= Long.MAX_VALUE;
            	ensures n > 0 ==> \result == n * spec_factorial(n-1);
            also
            	requires n == 0;
            	ensures \result == 1;
        public model function static pure long spec_factorial(int n) { 
	    if (n == 0) {
		 return 1; 
	    }
	    else {
	        assert n * spec_factorial(n-1) <= Long.MAX_VALUE;
		return n * spec_factorial(n-1);
	    }
        }@*/
    }",Buggy
"public class CombinationPermutation {
	//@ requires 0 <= n && n <= 20 && 0 <= r && r <= n;
	//@ old Factorial fac_spec = new Factorial();
	//@ ensures \result == fac_spec.spec_factorial(n)/(fac_spec.spec_factorial(r) * fac_spec.spec_factorial(n-r));
        private /* pure @*/ long combination(int n, int r) {
		Factorial fac = new Factorial();
		long combin;
		combin = fac.factorial(n) / (fac.factorial(r) * fac.factorial(n-r));
		return combin;
	}

	//@ requires 0 <= n && n <= 20 && 0 <= r && r <= n;
	//@ old Factorial fac_spec = new Factorial();
	//@ ensures \result == fac_spec.spec_factorial(n)/fac_spec.spec_factorial(n-r);
	private /* pure @*/ long permutation(int n, int r) {
		Factorial fac = new Factorial();
		long permut;
		permut = fac.factorial(n) / fac.factorial(n-r);
		return permut;
	}

	/*@ old Factorial fac_spec = new Factorial();
	  @ requires 0 <= n && n <= 20 && 0 <= r && r <= n; 	
	  @ {|		
	  @	requires flag; 	
	  @ 	ensures \result == fac_spec.spec_factorial(n)/(fac_spec.spec_factorial(r) * fac_spec.spec_factorial(n-r));
	  @ also
	  @	requires !flag;
	  @	ensures \result == fac_spec.spec_factorial(n)/fac_spec.spec_factorial(n-r); |} @*/
	public /* pure @*/ long select(int n, int r, boolean flag) {
		return (flag ? combination(n, r) : permutation(n, r))+1;//return flag ? combination(n, r) : permutation(n, r);
	}
}",Buggy
"public class Factorial
    {
       //@ requires 0 <= n && n <= 20;
       //@ ensures \result >= 1 && \result <= Long.MAX_VALUE;
       //@ ensures \result == spec_factorial(n);
       public /* pure @*/ long factorial(int n)
       {
          int c;
          long fact = 1;

	  //@ assert spec_factorial(0) == 1;
	   if (n == 0) {         
              return fact;
	   }

          //@ maintaining c >= 1 && c <= n+1;
	  //@ maintaining fact > 0;
	  //@ maintaining fact <= Long.MAX_VALUE; 
	  //@ maintaining spec_factorial(c - 1) == fact;
	  //@ decreases n - c;
          for (c = 1; c <= n; c++) { 
                fact = fact*c;
             }	 

          return fact;
      }

	/*@ 	requires n > 0 && n <= 20;
            	ensures 0 <= \result && \result <= Long.MAX_VALUE;
            	ensures n > 0 ==> \result == n * spec_factorial(n-1);
            also
            	requires n == 0;
            	ensures \result == 1;
        public model function static pure long spec_factorial(int n) { 
	    if (n == 0) {
		 return 1; 
	    }
	    else {
	        assert n * spec_factorial(n-1) <= Long.MAX_VALUE;
		return n * spec_factorial(n-1);
	    }
        }@*/
    }",Buggy
"public class CopyArray {
    //@ requires 0 < a.length && 0 < b.length;
    //@ requires 0 <= iBegin && 0 <= iEnd && iBegin <= iEnd;
    //@ requires iBegin < a.length && iBegin < b.length && iEnd < a.length && iEnd < b.length;
    //@ ensures (\forall int i; iBegin <= i && i < iEnd; a[i] == b[i]);
    public static void CopyArray(int[] b, int iBegin, int iEnd, int[] a) {
        int k = iBegin;
        //@ maintaining iBegin <= k && k <= iEnd;
        //@ maintaining (\forall int i; iBegin <= i && i < k; a[i] == b[i]);
        //@ decreases iEnd  - k;
        while (iEnd - k >= 0) {//while (iEnd - k > 0) {
            a[k] = b[k];
            k = k + 1 ;
        }
    }
}",Buggy
"public class CopyArray {
    //@ requires 0 < a.length && 0 < b.length;
    //@ requires 0 <= iBegin && 0 <= iEnd && iBegin <= iEnd;
    //@ requires iBegin < a.length && iBegin < b.length && iEnd < a.length && iEnd < b.length;
    //@ ensures (\forall int i; iBegin <= i && i < iEnd; a[i] == b[i]);
    public static void CopyArray(int[] b, int iBegin, int iEnd, int[] a) {
        int k = iBegin;
        //@ maintaining iBegin <= k && k <= iEnd;
        //@ maintaining (\forall int i; iBegin <= i && i < k; a[i] == b[i]);
        //@ decreases iEnd  - k;
        while (iEnd + k > 0) {//while (iEnd - k > 0) {
            a[k] = b[k];
            k = k + 1 ;
        }
    }
}",Buggy
"public class CopyArray {
    //@ requires 0 < a.length && 0 < b.length;
    //@ requires 0 <= iBegin && 0 <= iEnd && iBegin <= iEnd;
    //@ requires iBegin < a.length && iBegin < b.length && iEnd < a.length && iEnd < b.length;
    //@ ensures (\forall int i; iBegin <= i && i < iEnd; a[i] == b[i]);
    public static void CopyArray(int[] b, int iBegin, int iEnd, int[] a) {
        int k = iBegin;
        //@ maintaining iBegin <= k && k <= iEnd;
        //@ maintaining (\forall int i; iBegin <= i && i < k; a[i] == b[i]);
        //@ decreases iEnd  - k;
        while (iEnd - k <= 0) {//while (iEnd - k > 0) {
            a[k] = b[k];
            k = k + 1 ;
        }
    }
}",Buggy
"public class CopyArray {
    //@ requires 0 < a.length && 0 < b.length;
    //@ requires 0 <= iBegin && 0 <= iEnd && iBegin <= iEnd;
    //@ requires iBegin < a.length && iBegin < b.length && iEnd < a.length && iEnd < b.length;
    //@ ensures (\forall int i; iBegin <= i && i < iEnd; a[i] == b[i]);
    public static void CopyArray(int[] b, int iBegin, int iEnd, int[] a) {
        int k = iBegin;
        //@ maintaining iBegin <= k && k <= iEnd;
        //@ maintaining (\forall int i; iBegin <= i && i < k; a[i] == b[i]);
        //@ decreases iEnd  - k;
        while (iEnd - k > 0) {
            a[k] = b[k];
            k = k - 1 ;//k = k + 1 ;
        }
    }
}",Buggy
"public class Factorial
    {
       //@ requires 0 <= n && n <= 20;
       //@ ensures \result >= 1 && \result <= Long.MAX_VALUE;
       //@ ensures \result == spec_factorial(n);
       public /*@ pure @*/ long factorial(int n)
       {
          int c;
          long fact = 1;

	  //@ assert spec_factorial(0) == 1;
	   if (n != 0) { // if (n == 0) {          
              return fact;
	   }

          //@ maintaining c >= 1 && c <= n+1;
	  //@ maintaining fact > 0;
	  //@ maintaining fact <= Long.MAX_VALUE; 
	  //@ maintaining spec_factorial(c - 1) == fact;
	  //@ decreases n - c;
          for (c = 1; c <= n; c++) { 
                fact = fact*c;
             }	 

          return fact;
     }

	/*@ 	requires n > 0 && n <= 20;
            	ensures 0 <= \result && \result <= Long.MAX_VALUE;
            	ensures n > 0 ==> \result == n * spec_factorial(n-1);
            also
           	requires n == 0;
            	ensures \result == 1;
        public model function static pure long spec_factorial(int n) { 
	    if (n == 0) {
		 return 1; 
	    }
	    else {
	        assert n * spec_factorial(n-1) <= Long.MAX_VALUE;
		return n * spec_factorial(n-1);
	    }
        }@*/
    }",Buggy
"public class Factorial
    {
       //@ requires 0 <= n && n <= 20;
       //@ ensures \result >= 1 && \result <= Long.MAX_VALUE;
       //@ ensures \result == spec_factorial(n);
       public /*@ pure @*/ long factorial(int n)
       {
          int c;
          long fact = 1;

	  //@ assert spec_factorial(0) == 1;
	   if (n == 0) {         
              return fact;
	   }

          //@ maintaining c >= 1 && c <= n+1;
	  //@ maintaining fact > 0;
	  //@ maintaining fact <= Long.MAX_VALUE; 
	  //@ maintaining spec_factorial(c - 1) == fact;
	  //@ decreases n - c;
          for (c = 1; c < n; c++) {//for (c = 1; c <= n; c++) {
                fact = fact*c;
             }	 

          return fact;
     }

	/*@ 	requires n > 0 && n <= 20;
            	ensures 0 <= \result && \result <= Long.MAX_VALUE;
            	ensures n > 0 ==> \result == n * spec_factorial(n-1);
            also
            	requires n == 0;
            	ensures \result == 1;
        public model function static pure long spec_factorial(int n) { 
	    if (n == 0) {
		 return 1; 
	    }
	    else {
	        assert n * spec_factorial(n-1) <= Long.MAX_VALUE;
		return n * spec_factorial(n-1);
	    }
        }@*/
    }",Buggy
"public class Factorial
    {
       //@ requires 0 <= n && n <= 20;
       //@ ensures \result >= 1 && \result <= Long.MAX_VALUE;
       //@ ensures \result == spec_factorial(n);
       public /*@ pure @*/ long factorial(int n)
       {
          int c;
          long fact = 1;

	  //@ assert spec_factorial(0) == 1;
	   if (n == 0) {          
              return fact;
	   }

          //@ maintaining c >= 1 && c <= n+1;
	  //@ maintaining fact > 0;
	  //@ maintaining fact <= Long.MAX_VALUE; 
	  //@ maintaining spec_factorial(c - 1) == fact;
	  //@ decreases n - c;
          for (c = 1; c <= n; c--) {//for (c = 1; c <= n; c++) {
                fact = fact*c;
             }	 

          return fact;
     }

	/*@ 	requires n > 0 && n <= 20;
            	ensures 0 <= \result && \result <= Long.MAX_VALUE;
            	ensures n > 0 ==> \result == n * spec_factorial(n-1);
            also
            	requires n == 0;
            	ensures \result == 1;
        public model function static pure long spec_factorial(int n) { 
	    if (n == 0) {
		 return 1; 
	    }
	    else {
	        assert n * spec_factorial(n-1) <= Long.MAX_VALUE;
		return n * spec_factorial(n-1);
	    }
        }@*/
     }",Buggy
"public class Factorial
    {
       //@ requires 0 <= n && n <= 20;
       //@ ensures \result >= 1 && \result <= Long.MAX_VALUE;
       //@ ensures \result == spec_factorial(n);
       public /*@ pure @*/ long factorial(int n)
       {
          int c;
          long fact = 1;

	  //@ assert spec_factorial(0) == 1;
	   if (n == 0) {         
              return fact;
	   }

          //@ maintaining c >= 1 && c <= n+1;
	  //@ maintaining fact > 0;
	  //@ maintaining fact <= Long.MAX_VALUE; 
	  //@ maintaining spec_factorial(c - 1) == fact;
	  //@ decreases n - c;
          for (c = 1; c > n; c++) {//for (c = 1; c <= n; c++) {
                fact = fact*c;
             }	 

          return fact;
     }

	/*@ 	requires n > 0 && n <= 20;
            	ensures 0 <= \result && \result <= Long.MAX_VALUE;
            	ensures n > 0 ==> \result == n * spec_factorial(n-1);
            also
            	requires n == 0;
            	ensures \result == 1;
        public model function static pure long spec_factorial(int n) { 
	    if (n == 0) {
		 return 1; 
	    }
	    else {
	        assert n * spec_factorial(n-1) <= Long.MAX_VALUE;
		return n * spec_factorial(n-1);
	    }
        }@*/
     }",Buggy
"public class Factorial
    {
       //@ requires 0 <= n && n <= 20;
       //@ ensures \result >= 1 && \result <= Long.MAX_VALUE;
       //@ ensures \result == spec_factorial(n);
       public /*@ pure @*/ long factorial(int n)
       {
          int c;
          long fact = 1;

	  //@ assert spec_factorial(0) == 1;
	   if (n == 0) {         
              return fact;
	   }

          //@ maintaining c >= 1 && c <= n+1;
	  //@ maintaining fact > 0;
	  //@ maintaining fact <= Long.MAX_VALUE; 
	  //@ maintaining spec_factorial(c - 1) == fact;
	  //@ decreases n - c;
          for (c = 1; c <= n; c++) {
                fact = fact/c;//fact = fact*c;
             }	 

          return fact;
     }

	/*@ 	requires n > 0 && n <= 20;
            	ensures 0 <= \result && \result <= Long.MAX_VALUE;
            	ensures n > 0 ==> \result == n * spec_factorial(n-1);
            also
            	requires n == 0;
            	ensures \result == 1;
        public model function static pure long spec_factorial(int n) { 
	    if (n == 0) {
		 return 1; 
	    }
	    else {
	        assert n * spec_factorial(n-1) <= Long.MAX_VALUE;
		return n * spec_factorial(n-1);
	    }
        }@*/
    }",Buggy
"public class Factorial
    {
       //@ requires 0 <= n && n <= 20;
       //@ ensures \result >= 1 && \result <= Long.MAX_VALUE;
       //@ ensures \result == spec_factorial(n);
       public /*@ pure @*/ long factorial(int n)
       {
          int c;
          long fact = 1;

	  //@ assert spec_factorial(0) == 1;
	   if (n == 0) {         
              return fact + 1; // fact;
	   }

          //@ maintaining c >= 1 && c <= n+1;
	  //@ maintaining fact > 0;
	  //@ maintaining fact <= Long.MAX_VALUE; 
	  //@ maintaining spec_factorial(c - 1) == fact;
	  //@ decreases n - c;
          for (c = 1; c <= n; c++) {
                fact = fact*c;
             }	 

          return fact;
     }

	/*@ 	requires n > 0 && n <= 20;
            	ensures 0 <= \result && \result <= Long.MAX_VALUE;
            	ensures n > 0 ==> \result == n * spec_factorial(n-1);
            also
            	requires n == 0;
            	ensures \result == 1;
        public model function static pure long spec_factorial(int n) { 
	    if (n == 0) {
		 return 1; 
	    }
	    else {
	        assert n * spec_factorial(n-1) <= Long.MAX_VALUE;
		return n * spec_factorial(n-1);
	    }
        }@*/
    }",Buggy
"public class Factorial
    {
       //@ requires 0 <= n && n <= 20;
       //@ ensures \result >= 1 && \result <= Long.MAX_VALUE;
       //@ ensures \result == spec_factorial(n);
       public /*@ pure @*/ long factorial(int n)
       {
          int c;
          long fact = 1;

	  //@ assert spec_factorial(0) == 1;
	   if (n == 0) {        
              return fact;
	   }

          //@ maintaining c >= 1 && c <= n+1;
	  //@ maintaining fact > 0;
	  //@ maintaining fact <= Long.MAX_VALUE; 
	  //@ maintaining spec_factorial(c - 1) == fact;
	  //@ decreases n - c;
          for (c = 1; c <= n; c++) {
                fact = fact*c;
             }	 

          return fact + 1; // fact;
     }

	/*@ 	requires n > 0 && n <= 20;
            	ensures 0 <= \result && \result <= Long.MAX_VALUE;
            	ensures n > 0 ==> \result == n * spec_factorial(n-1);
            also
            	requires n == 0;
            	ensures \result == 1;
        public model function static pure long spec_factorial(int n) { 
	    if (n == 0) {
		 return 1; 
	    }
	    else {
	        assert n * spec_factorial(n-1) <= Long.MAX_VALUE;
		return n * spec_factorial(n-1);
	    }
        }@*/
     }",Buggy
"public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];
	//@ public invariant 2 <= fib.length && fib.length <= 93; // 93 < size ==> Long Overflow 

	//@ ensures fib[0] == 0 && fib[1] == 1;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}

	/*@ 	public normal_behavior
	  @ 		requires 2 <= size && size <= 93;
	  @ 		ensures fib[0] == 0 && fib[1] == 1;
	  @ 		ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == 0);
	  @ also
	  @ 	public exceptional_behavior
   	  @ 		requires size < 2 || 93 < size;
	  @		assignable \nothing;
	  @ 		signals_only IllegalArgumentException; @*/  	
	/*@ spec_public @*/ Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}
	
	//@ requires fib[0] == 0 && fib[1] == 1;
	//@ assignable fib[2 .. fib.length-1]; 
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i-1] + fib[i-2]); 
	//@ ensures (\forall int i; 2 <= i && i < fib.length; (\forall int j; 2 <= j && j < i; fib[j] < fib[i]));
	public void fibCompute() {
		int index = 2;
		//@ maintaining 2 <= index && index <= fib.length;
                //@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i-1] + fib[i-2]);
                //@ maintaining (\forall int i; 2 <= i && i < index; (\forall int j; 2 <= j && j < i; fib[j] < fib[i]));
		while (index < fib.length) {
			//@ assume fib[index - 2] + fib[index - 1] <= Long.MAX_VALUE;
			//@ assume 0 < fib[index - 2] + fib[index - 1];
			fib[index] = fib[index - 2] + fib[index + 1];//fib[index] = fib[index - 2] + fib[index - 1];
			index++;
                        //@ assume fib[index-2] <  fib[index-1];
		}
	}
}",Buggy
"public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];
	//@ public invariant 2 <= fib.length && fib.length <= 93; // 93 < size ==> Long Overflow 

	//@ ensures fib[0] == 0 && fib[1] == 1;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}

	/*@ 	public normal_behavior
	  @ 		requires 2 <= size && size <= 93;
	  @ 		ensures fib[0] == 0 && fib[1] == 1;
	  @ 		ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == 0);
	  @ also
	  @ 	public exceptional_behavior
   	  @ 		requires size < 2 || 93 < size;
	  @		assignable \nothing;
	  @ 		signals_only IllegalArgumentException; @*/  	
	/*@ spec_public @*/ Fibonacci(int size) {
		if (2 < size && size <= 93) {//if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}
	
	//@ requires fib[0] == 0 && fib[1] == 1;
	//@ assignable fib[2 .. fib.length-1]; 
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i-1] + fib[i-2]); 
	//@ ensures (\forall int i; 2 <= i && i < fib.length; (\forall int j; 2 <= j && j < i; fib[j] < fib[i]));
	public void fibCompute() {
		int index = 2;
		//@ maintaining 2 <= index && index <= fib.length;
                //@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i-1] + fib[i-2]);
                //@ maintaining (\forall int i; 2 <= i && i < index; (\forall int j; 2 <= j && j < i; fib[j] < fib[i]));
		while (index < fib.length) {
			//@ assume fib[index - 2] + fib[index - 1] <= Long.MAX_VALUE;
			//@ assume 0 < fib[index - 2] + fib[index - 1];
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
                        //@ assume fib[index-2] <  fib[index-1];
		}
	}
}",Buggy
"public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];
	//@ public invariant 2 <= fib.length && fib.length <= 93; // 93 < size ==> Long Overflow 

	//@ ensures fib[0] == 0 && fib[1] == 1;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}
	/*@ 	public normal_behavior
	  @ 		requires 2 <= size && size <= 93;
	  @ 		ensures fib[0] == 0 && fib[1] == 1;
	  @ 		ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == 0);
	  @ also
	  @ 	public exceptional_behavior
   	  @ 		requires size < 2 || 93 < size;
	  @		assignable \nothing;
	  @ 		signals_only IllegalArgumentException; @*/ 	
	/*@ spec_public @*/ Fibonacci(int size) {
		if (2 <= size && size < 93) {//if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}
	
	//@ requires fib[0] == 0 && fib[1] == 1;
	//@ assignable fib[2 .. fib.length-1]; 
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i-1] + fib[i-2]); 
	//@ ensures (\forall int i; 2 <= i && i < fib.length; (\forall int j; 2 <= j && j < i; fib[j] < fib[i]));
	public void fibCompute() {
		int index = 2;
		//@ maintaining 2 <= index && index <= fib.length;
                //@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i-1] + fib[i-2]);
                //@ maintaining (\forall int i; 2 <= i && i < index; (\forall int j; 2 <= j && j < i; fib[j] < fib[i]));
		while (index < fib.length) {
			//@ assume fib[index - 2] + fib[index - 1] <= Long.MAX_VALUE;
			//@ assume 0 < fib[index - 2] + fib[index - 1];
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
                        //@ assume fib[index-2] <  fib[index-1];
		}
	}
}",Buggy
"public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];
	//@ public invariant 2 <= fib.length && fib.length <= 93; // 93 < size ==> Long Overflow 

	//@ ensures fib[0] == 0 && fib[1] == 1;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}

	/*@ 	public normal_behavior
	  @ 		requires 2 <= size && size <= 93;
	  @ 		ensures fib[0] == 0 && fib[1] == 1;
	  @ 		ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == 0);
	  @ also
	  @ 	public exceptional_behavior
   	  @ 		requires size < 2 || 93 < size;
	  @		assignable \nothing;
	  @ 		signals_only IllegalArgumentException; @*/ 	
	/*@ spec_public @*/ Fibonacci(int size) {
		if (2 > size && size <= 93) {//if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}
	
	//@ requires fib[0] == 0 && fib[1] == 1;
	//@ assignable fib[2 .. fib.length-1]; 
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i-1] + fib[i-2]); 
	//@ ensures (\forall int i; 2 <= i && i < fib.length; (\forall int j; 2 <= j && j < i; fib[j] < fib[i]));
	public void fibCompute() {
		int index = 2;
		//@ maintaining 2 <= index && index <= fib.length;
                //@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i-1] + fib[i-2]);
                //@ maintaining (\forall int i; 2 <= i && i < index; (\forall int j; 2 <= j && j < i; fib[j] < fib[i]));
		while (index < fib.length) {
			//@ assume fib[index - 2] + fib[index - 1] <= Long.MAX_VALUE;
			//@ assume 0 < fib[index - 2] + fib[index - 1];
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
                        //@ assume fib[index-2] <  fib[index-1];
		}
	}
}",Buggy
"public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];
	//@ public invariant 2 <= fib.length && fib.length <= 93; // 93 < size ==> Long Overflow 

	//@ ensures fib[0] == 0 && fib[1] == 1;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}

	/*@ 	public normal_behavior
	  @ 		requires 2 <= size && size <= 93;
	  @ 		ensures fib[0] == 0 && fib[1] == 1;
	  @ 		ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == 0);
	  @ also
	  @ 	public exceptional_behavior
   	  @ 		requires size < 2 || 93 < size;
	  @		assignable \nothing;
	  @ 		signals_only IllegalArgumentException; @*/ 	
	/*@ spec_public @*/ Fibonacci(int size) {
		if (2 <= size && size > 93) {//if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}
	
	//@ requires fib[0] == 0 && fib[1] == 1;
	//@ assignable fib[2 .. fib.length-1]; 
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i-1] + fib[i-2]); 
	//@ ensures (\forall int i; 2 <= i && i < fib.length; (\forall int j; 2 <= j && j < i; fib[j] < fib[i]));
	public void fibCompute() {
		int index = 2;
		//@ maintaining 2 <= index && index <= fib.length;
                //@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i-1] + fib[i-2]);
                //@ maintaining (\forall int i; 2 <= i && i < index; (\forall int j; 2 <= j && j < i; fib[j] < fib[i]));
		while (index < fib.length) {
			//@ assume fib[index - 2] + fib[index - 1] <= Long.MAX_VALUE;
			//@ assume 0 < fib[index - 2] + fib[index - 1];
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
                        //@ assume fib[index-2] <  fib[index-1];
		}
	}
}",Buggy
"public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];
	//@ public invariant 2 <= fib.length && fib.length <= 93; // 93 < size ==> Long Overflow 

	//@ ensures fib[0] == 0 && fib[1] == 1;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}

	/*@ 	public normal_behavior
	  @ 		requires 2 <= size && size <= 93;
	  @ 		ensures fib[0] == 0 && fib[1] == 1;
	  @ 		ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == 0);
	  @ also
	  @ 	public exceptional_behavior
   	  @ 		requires size < 2 || 93 < size;
	  @		assignable \nothing;
	  @ 		signals_only IllegalArgumentException; @*/ 
	/*@ spec_public @*/ Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return (fib[index] + 1);//return fib[index];
	}
	
	//@ requires fib[0] == 0 && fib[1] == 1;
	//@ assignable fib[2 .. fib.length-1]; 
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i-1] + fib[i-2]); 
	//@ ensures (\forall int i; 2 <= i && i < fib.length; (\forall int j; 2 <= j && j < i; fib[j] < fib[i]));
	public void fibCompute() {
		int index = 2;
		//@ maintaining 2 <= index && index <= fib.length;
                //@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i-1] + fib[i-2]);
                //@ maintaining (\forall int i; 2 <= i && i < index; (\forall int j; 2 <= j && j < i; fib[j] < fib[i]));
		while (index < fib.length) {
			//@ assume fib[index - 2] + fib[index - 1] <= Long.MAX_VALUE;
			//@ assume 0 < fib[index - 2] + fib[index - 1];
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
                        //@ assume fib[index-2] <  fib[index-1];
		}
	}
}",Buggy
"public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];
	//@ public invariant 2 <= fib.length && fib.length <= 93; // 93 < size ==> Long Overflow 

	//@ ensures fib[0] == 0 && fib[1] == 1;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}

	/*@ 	public normal_behavior
	  @ 		requires 2 <= size && size <= 93;
	  @ 		ensures fib[0] == 0 && fib[1] == 1;
	  @ 		ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == 0);
	  @ also
	  @ 	public exceptional_behavior
   	  @ 		requires size < 2 || 93 < size;
	  @		assignable \nothing;
	  @ 		signals_only IllegalArgumentException; @*/ 
	/*@ spec_public @*/ Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}
	
	//@ requires fib[0] == 0 && fib[1] == 1;
	//@ assignable fib[2 .. fib.length-1]; 
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i-1] + fib[i-2]); 
	//@ ensures (\forall int i; 2 <= i && i < fib.length; (\forall int j; 2 <= j && j < i; fib[j] < fib[i]));
	public void fibCompute() {
		int index = 2;
		//@ maintaining 2 <= index && index <= fib.length;
                //@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i-1] + fib[i-2]);
                //@ maintaining (\forall int i; 2 <= i && i < index; (\forall int j; 2 <= j && j < i; fib[j] < fib[i]));
		while (index <= fib.length) {//while (index < fib.length) {
			//@ assume fib[index - 2] + fib[index - 1] <= Long.MAX_VALUE;
			//@ assume 0 < fib[index - 2] + fib[index - 1];
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
                        //@ assume fib[index-2] <  fib[index-1];
		}
	}
}",Buggy
"public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];
	//@ public invariant 2 <= fib.length && fib.length <= 93; // 93 < size ==> Long Overflow 

	//@ ensures fib[0] == 0 && fib[1] == 1;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}

	/*@ 	public normal_behavior
	  @ 		requires 2 <= size && size <= 93;
	  @ 		ensures fib[0] == 0 && fib[1] == 1;
	  @ 		ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == 0);
	  @ also
	  @ 	public exceptional_behavior
   	  @ 		requires size < 2 || 93 < size;
	  @		assignable \nothing;
	  @ 		signals_only IllegalArgumentException; @*/ 	
	/*@ spec_public @*/ Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}
	
	//@ requires fib[0] == 0 && fib[1] == 1;
	//@ assignable fib[2 .. fib.length-1]; 
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i-1] + fib[i-2]); 
	//@ ensures (\forall int i; 2 <= i && i < fib.length; (\forall int j; 2 <= j && j < i; fib[j] < fib[i]));
	public void fibCompute() {
		int index = 2;
		//@ maintaining 2 <= index && index <= fib.length;
                //@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i-1] + fib[i-2]);
                //@ maintaining (\forall int i; 2 <= i && i < index; (\forall int j; 2 <= j && j < i; fib[j] < fib[i]));
		while (index >= fib.length) { //while (index < fib.length) {
			//@ assume fib[index - 2] + fib[index - 1] <= Long.MAX_VALUE;
			//@ assume 0 < fib[index - 2] + fib[index - 1];
			fib[index] = fib[index - 2] + fib[index - 1];
			index++;
                        //@ assume fib[index-2] <  fib[index-1];
		}
	}
}",Buggy
"public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];
	//@ public invariant 2 <= fib.length && fib.length <= 93; // 93 < size ==> Long Overflow 

	//@ ensures fib[0] == 0 && fib[1] == 1;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}

	/*@ 	public normal_behavior
	  @ 		requires 2 <= size && size <= 93;
	  @ 		ensures fib[0] == 0 && fib[1] == 1;
	  @ 		ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == 0);
	  @ also
	  @ 	public exceptional_behavior
   	  @ 		requires size < 2 || 93 < size;
	  @		assignable \nothing;
	  @ 		signals_only IllegalArgumentException; @*/ 	
	/*@ spec_public @*/ Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}
	
	//@ requires fib[0] == 0 && fib[1] == 1;
	//@ assignable fib[2 .. fib.length-1]; 
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i-1] + fib[i-2]); 
	//@ ensures (\forall int i; 2 <= i && i < fib.length; (\forall int j; 2 <= j && j < i; fib[j] < fib[i]));
	public void fibCompute() {
		int index = 2;
		//@ maintaining 2 <= index && index <= fib.length;
                //@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i-1] + fib[i-2]);
                //@ maintaining (\forall int i; 2 <= i && i < index; (\forall int j; 2 <= j && j < i; fib[j] < fib[i]));
		while (index < fib.length) {
			//@ assume fib[index - 2] + fib[index - 1] <= Long.MAX_VALUE;
			//@ assume 0 < fib[index - 2] + fib[index - 1];
			fib[index] = fib[index - 2] - fib[index - 1];//fib[index] = fib[index - 2] + fib[index - 1];
			index++;
                        //@ assume fib[index-2] <  fib[index-1];
		}
	}
}",Buggy
"public class Fibonacci {
   	private /*@ spec_public @*/ long fib[];
	//@ public invariant 2 <= fib.length && fib.length <= 93; // 93 < size ==> Long Overflow 

	//@ ensures fib[0] == 0 && fib[1] == 1;
	Fibonacci() {
		fib = new long[2];
		fib[0] = 0;
		fib[1] = 1;
	}

	/*@ 	public normal_behavior
	  @ 		requires 2 <= size && size <= 93;
	  @ 		ensures fib[0] == 0 && fib[1] == 1;
	  @ 		ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == 0);
	  @ also
	  @ 	public exceptional_behavior
   	  @ 		requires size < 2 || 93 < size;
	  @		assignable \nothing;
	  @ 		signals_only IllegalArgumentException; @*/  	
	/*@ spec_public @*/ Fibonacci(int size) {
		if (2 <= size && size <= 93) {
			fib = new long[size];	
			fib[0] = 0;
			fib[1] = 1;
		} else {
			throw new IllegalArgumentException();
		}
	}

	//@ requires 0 <= index && index < fib.length;
	//@ ensures \result == fib[index];
	public /*@ pure @*/ long getFib(int index) {
		return fib[index];
	}
	
	//@ requires fib[0] == 0 && fib[1] == 1;
	//@ assignable fib[2 .. fib.length-1]; 
	//@ ensures (\forall int i; 2 <= i && i < fib.length; fib[i] == fib[i-1] + fib[i-2]); 
	//@ ensures (\forall int i; 2 <= i && i < fib.length; (\forall int j; 2 <= j && j < i; fib[j] < fib[i]));
	public void fibCompute() {
		int index = 2;
		//@ maintaining 2 <= index && index <= fib.length;
                //@ maintaining (\forall int i; 2 <= i && i < index; fib[i] == fib[i-1] + fib[i-2]);
                //@ maintaining (\forall int i; 2 <= i && i < index; (\forall int j; 2 <= j && j < i; fib[j] < fib[i]));
		while (index < fib.length) {
			//@ assume fib[index - 2] + fib[index - 1] <= Long.MAX_VALUE;
			//@ assume 0 < fib[index - 2] + fib[index - 1];
			fib[index] = fib[index + 2] + fib[index - 1];//fib[index] = fib[index - 2] + fib[index - 1];
			index++;
                        //@ assume fib[index-2] <  fib[index-1];
		}
	}
}",Buggy
"class FindInArray {
    private /*@ spec_public @*/ int key;
    private /*@ spec_public @*/ int arr[];

    //@ ensures (\forall int i; 0 <= i && i < inputArr.length; inputArr[i] == arr[i]);
    //@ ensures key == 0;
    FindInArray(int inputArr[])
    {
	int size = inputArr.length;
	arr = new int[size];
	arr = inputArr.clone();
    } 

    //@ ensures this.key == key;
    //@ ensures (\forall int i; 0 <= i && i < inputArr.length; inputArr[i] == arr[i]);
    FindInArray(int inputArr[], int key)
    {
	int size = inputArr.length;
	arr = new int[size];
	arr = inputArr.clone();
        //setKey(key); Removed call is the bug
    } 

    //@ assignable this.key;
    //@ ensures this.key == key;
    void setKey(int key) 
    {
	this.key = key;
    }

    //@ ensures \result == this.key;
    /*@ pure @*/ int getKey() 
    {
	return this.key;
    }
    //@ requires 0 <= i && i < arr.length;
    //@ ensures \result == this.arr[i];	
    /*@ pure @*/ int getArr(int i) 
    {
	return this.arr[i];
    }

    //@ ensures \result == arr.length;	
    /*@ pure @*/ int size() 
    {
   	return arr.length;
    }
      
    /*@ ensures 0 <= \result && \result < arr.length ==> (arr[\result] == key && 
      @			(\forall int i; \result < i && i < arr.length; arr[i] != key)); 
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key); @*/
    /*@ pure @*/ int findLast() {
	int index = size() - 1;
	//@ maintaining -1 <= index && index < arr.length; 
	//@ maintaining (\forall int i; index < i && i < arr.length; arr[i] != key);
	while (0 <= index) {
		if (getArr(index) == getKey())
			return index;
		index--;
	}
	return -1;
    }

    /*@ ensures 0 <= \result && \result < arr.length ==> (arr[\result] == key && 
      @			(\forall int i; 0 <= i && i < \result; arr[i] != key)); 
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key); @*/
    /*@ pure @*/ int findFirst() {	
	//@ maintaining 0 <= index && index <= arr.length;
	//@ maintaining (\forall int i; 0 <= i && i < index; arr[i] != key);
	for (int index = 0; index < size(); index++) {
		if (getArr(index) == getKey())
			return index;
	}
	return -1;
    }

    //@ ensures \result <==> findLast() != findFirst();
    /*@ pure @*/ boolean isMoreThanOneKey() {
	int first = findFirst();
	int last = findLast();
	return (first != last);
    }
}",Buggy
"class FindInArray {
    private /*@ spec_public @*/ int key;
    private /*@ spec_public @*/ int arr[];

    //@ ensures (\forall int i; 0 <= i && i < inputArr.length; inputArr[i] == arr[i]);
    //@ ensures key == 0;
    FindInArray(int inputArr[])
    {
	int size = inputArr.length;
	arr = new int[size];
	arr = inputArr.clone();
    } 

    //@ ensures this.key == key;
    //@ ensures (\forall int i; 0 <= i && i < inputArr.length; inputArr[i] == arr[i]);
    FindInArray(int inputArr[], int key)
    {
	int size = inputArr.length;
	arr = new int[size];
	arr = inputArr.clone();
        setKey(key);
    } 

    //@ assignable this.key;
    //@ ensures this.key == key;
    void setKey(int key) 
    {
	this.key = key;
    }

    //@ ensures \result == this.key;
    /*@ pure @*/ int getKey() 
    {
	return this.key;
    }
    //@ requires 0 <= i && i < arr.length;
    //@ ensures \result == this.arr[i];	
    /*@ pure @*/ int getArr(int i) 
    {
	return this.arr[i];
    }

    //@ ensures \result == arr.length;	
    /*@ pure @*/ int size() 
    {
   	return arr.length;
    }

    /*@ ensures 0 <= \result && \result < arr.length ==> (arr[\result] == key && 
      @			(\forall int i; \result < i && i < arr.length; arr[i] != key)); 
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key); @*/
    /*@ pure @*/ int findLast() {
	int index = size() - 1;
	//@ maintaining -1 <= index && index < arr.length; 
	//@ maintaining (\forall int i; index < i && i < arr.length; arr[i] != key);
	while (0 <= index) {
		if (getArr(index) == getKey())
			return index;
		index++;//index--;
	}
	return -1;
    }

    /*@ ensures 0 <= \result && \result < arr.length ==> (arr[\result] == key && 
      @			(\forall int i; 0 <= i && i < \result; arr[i] != key)); 
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key); @*/
    /*@ pure @*/ int findFirst() {	
	//@ maintaining 0 <= index && index <= arr.length;
	//@ maintaining (\forall int i; 0 <= i && i < index; arr[i] != key);
	for (int index = 0; index < size(); index++) {
		if (getArr(index) == getKey())
			return index;
	}
	return -1;
    }

    //@ ensures \result <==> findLast() != findFirst();
    /*@ pure @*/ boolean isMoreThanOneKey() {
	int first = findFirst();
	int last = findLast();
	return (first != last);
    }
}",Buggy
"class FindInArray {
    private /*@ spec_public @*/ int key;
    private /*@ spec_public @*/ int arr[];

    //@ ensures (\forall int i; 0 <= i && i < inputArr.length; inputArr[i] == arr[i]);
    //@ ensures key == 0;
    FindInArray(int inputArr[])
    {
	int size = inputArr.length;
	arr = new int[size];
	arr = inputArr.clone();
    } 

    //@ ensures this.key == key;
    //@ ensures (\forall int i; 0 <= i && i < inputArr.length; inputArr[i] == arr[i]);
    FindInArray(int inputArr[], int key)
    {
	int size = inputArr.length;
	arr = new int[size];
	arr = inputArr.clone();
        setKey(key);
    } 

    //@ assignable this.key;
    //@ ensures this.key == key;
    void setKey(int key) 
    {
	this.key = key;
    }

    //@ ensures \result == this.key;
    /*@ pure @*/ int getKey() 
    {
	return this.key;
    }
    //@ requires 0 <= i && i < arr.length;
    //@ ensures \result == this.arr[i];	
    /*@ pure @*/ int getArr(int i) 
    {
	return this.arr[i];
    }

    //@ ensures \result == arr.length;	
    /*@ pure @*/ int size() 
    {
   	return arr.length;
    }

    /*@ ensures 0 <= \result && \result < arr.length ==> (arr[\result] == key && 
      @			(\forall int i; \result < i && i < arr.length; arr[i] != key)); 
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key); @*/
    /*@ pure @*/ int findLast() {
	int index = size() - 1;
	//@ maintaining -1 <= index && index < arr.length; 
	//@ maintaining (\forall int i; index < i && i < arr.length; arr[i] != key);
	while (0 <= index) {
		if (getArr(index) == getKey())
			return index;
		index--;
	}
	return 0; // return -1;
    }

    /*@ ensures 0 <= \result && \result < arr.length ==> (arr[\result] == key && 
      @			(\forall int i; 0 <= i && i < \result; arr[i] != key)); 
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key); @*/
    /*@ pure @*/ int findFirst() {	
	//@ maintaining 0 <= index && index <= arr.length;
	//@ maintaining (\forall int i; 0 <= i && i < index; arr[i] != key);
	for (int index = 0; index < size(); index++) {
		if (getArr(index) == getKey())
			return index;
	}
	return -1;
    }

    //@ ensures \result <==> findLast() != findFirst();
    /*@ pure @*/ boolean isMoreThanOneKey() {
	int first = findFirst();
	int last = findLast();
	return (first != last);
    }
}",Buggy
"class FindInArray {
    private /*@ spec_public @*/ int key;
    private /*@ spec_public @*/ int arr[];

    //@ ensures (\forall int i; 0 <= i && i < inputArr.length; inputArr[i] == arr[i]);
    //@ ensures key == 0;
    FindInArray(int inputArr[])
    {
	int size = inputArr.length;
	arr = new int[size];
	arr = inputArr.clone();
    } 

    //@ ensures this.key == key;
    //@ ensures (\forall int i; 0 <= i && i < inputArr.length; inputArr[i] == arr[i]);
    FindInArray(int inputArr[], int key)
    {
	int size = inputArr.length;
	arr = new int[size];
	arr = inputArr.clone();
        setKey(key);
    } 

    //@ assignable this.key;
    //@ ensures this.key == key;
    void setKey(int key) 
    {
	this.key = key;
    }

    //@ ensures \result == this.key;
    /*@ pure @*/ int getKey() 
    {
	return this.key;
    }
    //@ requires 0 <= i && i < arr.length;
    //@ ensures \result == this.arr[i];	
    /*@ pure @*/ int getArr(int i) 
    {
	return this.arr[i];
    }

    //@ ensures \result == arr.length;	
    /*@ pure @*/ int size() 
    {
   	return arr.length;
    }

    /*@ ensures 0 <= \result && \result < arr.length ==> (arr[\result] == key && 
      @			(\forall int i; \result < i && i < arr.length; arr[i] != key)); 
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key); @*/
    /*@ pure @*/ int findLast() {
	int index = size() - 1;
	//@ maintaining -1 <= index && index < arr.length; 
	//@ maintaining (\forall int i; index < i && i < arr.length; arr[i] != key);
	while (0 <= index) {
		if (getArr(index) == getKey())
			return index;
		index--;
	}
	return -1;
    }

    /*@ ensures 0 <= \result && \result < arr.length ==> (arr[\result] == key && 
      @			(\forall int i; 0 <= i && i < \result; arr[i] != key)); 
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key); @*/
    /*@ pure @*/ int findFirst() {	
	//@ maintaining 0 <= index && index <= arr.length;
	//@ maintaining (\forall int i; 0 <= i && i < index; arr[i] != key);
	for (int index = 0; index <= size(); index++) {//for (int index = 0; index < size(); index++) {
		if (getArr(index) == getKey())
			return index;
	}
	return -1;
    }

    //@ ensures \result <==> findLast() != findFirst();
    /*@ pure @*/ boolean isMoreThanOneKey() {
	int first = findFirst();
	int last = findLast();
	return (first != last);
    }
}",Buggy
"class FindInArray {
    private /*@ spec_public @*/ int key;
    private /*@ spec_public @*/ int arr[];

    //@ ensures (\forall int i; 0 <= i && i < inputArr.length; inputArr[i] == arr[i]);
    //@ ensures key == 0;
    FindInArray(int inputArr[])
    {
	int size = inputArr.length;
	arr = new int[size];
	arr = inputArr.clone();
    } 

    //@ ensures this.key == key;
    //@ ensures (\forall int i; 0 <= i && i < inputArr.length; inputArr[i] == arr[i]);
    FindInArray(int inputArr[], int key)
    {
	int size = inputArr.length;
	arr = new int[size];
	arr = inputArr.clone();
        setKey(key);
    } 

    //@ assignable this.key;
    //@ ensures this.key == key;
    void setKey(int key) 
    {
	this.key = key;
    }

    //@ ensures \result == this.key;
    /*@ pure @*/ int getKey() 
    {
	return this.key;
    }
    //@ requires 0 <= i && i < arr.length;
    //@ ensures \result == this.arr[i];	
    /*@ pure @*/ int getArr(int i) 
    {
	return this.arr[i];
    }

    //@ ensures \result == arr.length;	
    /*@ pure @*/ int size() 
    {
   	return arr.length;
    }

    /*@ ensures 0 <= \result && \result < arr.length ==> (arr[\result] == key && 
      @			(\forall int i; \result < i && i < arr.length; arr[i] != key)); 
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key); @*/
    /*@ pure @*/ int findLast() {
	int index = size() - 1;
	//@ maintaining -1 <= index && index < arr.length; 
	//@ maintaining (\forall int i; index < i && i < arr.length; arr[i] != key);
	while (0 <= index) {
		if (getArr(index) == getKey())
			return index;
		index--;
	}
	return -1;
    }

    /*@ ensures 0 <= \result && \result < arr.length ==> (arr[\result] == key && 
      @			(\forall int i; 0 <= i && i < \result; arr[i] != key)); 
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key);
    /*@ pure @*/ int findFirst() {	
	//@ maintaining 0 <= index && index <= arr.length;
	//@ maintaining (\forall int i; 0 <= i && i < index; arr[i] != key);
	for (int index = 0; index >= size(); index++) {//for (int index = 0; index < size(); index++) {
		if (getArr(index) == getKey())
			return index;
	}
	return -1;
    }

    //@ ensures \result <==> findLast() != findFirst();
    /*@ pure @*/ boolean isMoreThanOneKey() {
	int first = findFirst();
	int last = findLast();
	return (first != last);
    }
}",Buggy
"class FindInArray {
    private /*@ spec_public @*/ int key;
    private /*@ spec_public @*/ int arr[];

    //@ ensures (\forall int i; 0 <= i && i < inputArr.length; inputArr[i] == arr[i]);
    //@ ensures key == 0;
    FindInArray(int inputArr[])
    {
	int size = inputArr.length;
	arr = new int[size];
	arr = inputArr.clone();
    } 

    //@ ensures this.key == key;
    //@ ensures (\forall int i; 0 <= i && i < inputArr.length; inputArr[i] == arr[i]);
    FindInArray(int inputArr[], int key)
    {
	int size = inputArr.length;
	arr = new int[size];
	arr = inputArr.clone();
        setKey(key);
    } 

    //@ assignable this.key;
    //@ ensures this.key == key;
    void setKey(int key) 
    {
	this.key = key;
    }

    //@ ensures \result == this.key;
    /*@ pure @*/ int getKey() 
    {
	return this.key;
    }
    //@ requires 0 <= i && i < arr.length;
    //@ ensures \result == this.arr[i];	
    /*@ pure @*/ int getArr(int i) 
    {
	return this.arr[i];
    }

    //@ ensures \result == arr.length;	
    /*@ pure @*/ int size() 
    {
   	return arr.length;
    }

    /*@ ensures 0 <= \result && \result < arr.length ==> (arr[\result] == key && 
      @			(\forall int i; \result < i && i < arr.length; arr[i] != key)); 
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key); @*/
    /*@ pure @*/ int findLast() {
	int index = size() - 1;
	//@ maintaining -1 <= index && index < arr.length; 
	//@ maintaining (\forall int i; index < i && i < arr.length; arr[i] != key);
	while (0 <= index) {
		if (getArr(index) == getKey())
			return index;
		index--;
	}
	return -1;
    }

    /*@ ensures 0 <= \result && \result < arr.length ==> (arr[\result] == key && 
      @			(\forall int i; 0 <= i && i < \result; arr[i] != key)); 
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key); @*/
    /*@ pure @*/ int findFirst() {	
	//@ maintaining 0 <= index && index <= arr.length;
	//@ maintaining (\forall int i; 0 <= i && i < index; arr[i] != key);
	for (int index = 0; index < size(); index++) {
		if (getArr(index) != getKey()) // if (getArr(index) == getKey())
			return index;
	}
	return -1;
    }

    //@ ensures \result <==> findLast() != findFirst();
    /*@ pure @*/ boolean isMoreThanOneKey() {
	int first = findFirst();
	int last = findLast();
	return (first != last);
    }
}",Buggy
"class FindInArray {
    private /*@ spec_public @*/ int key;
    private /*@ spec_public @*/ int arr[];

    //@ ensures (\forall int i; 0 <= i && i < inputArr.length; inputArr[i] == arr[i]);
    //@ ensures key == 0;
    FindInArray(int inputArr[])
    {
	int size = inputArr.length;
	arr = new int[size];
	arr = inputArr.clone();
    } 

    //@ ensures this.key == key;
    //@ ensures (\forall int i; 0 <= i && i < inputArr.length; inputArr[i] == arr[i]);
    FindInArray(int inputArr[], int key)
    {
	int size = inputArr.length;
	arr = new int[size];
	arr = inputArr.clone();
        setKey(key);
    } 

    //@ assignable this.key;
    //@ ensures this.key == key;
    void setKey(int key) 
    {
	this.key = key;
    }

    //@ ensures \result == this.key;
    /*@ pure @*/ int getKey() 
    {
	return this.key;
    }
    //@ requires 0 <= i && i < arr.length;
    //@ ensures \result == this.arr[i];	
    /*@ pure @*/ int getArr(int i) 
    {
	return this.arr[i];
    }

    //@ ensures \result == arr.length;	
    /*@ pure @*/ int size() 
    {
   	return arr.length;
    }

    /*@ ensures 0 <= \result && \result < arr.length ==> (arr[\result] == key && 
      @			(\forall int i; \result < i && i < arr.length; arr[i] != key)); 
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key); @*/
    /*@ pure @*/ int findLast() {
	int index = size() - 1;
	//@ maintaining -1 <= index && index < arr.length; 
	//@ maintaining (\forall int i; index < i && i < arr.length; arr[i] != key);
	while (0 <= index) {
		if (getArr(index) == getKey())
			return index;
		index--;
	}
	return -1;
    }

    /*@ ensures 0 <= \result && \result < arr.length ==> (arr[\result] == key && 
      @			(\forall int i; 0 <= i && i < \result; arr[i] != key)); 
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key); @*/
    /*@ pure @*/ int findFirst() {	
	//@ maintaining 0 <= index && index <= arr.length;
	//@ maintaining (\forall int i; 0 <= i && i < index; arr[i] != key);
	for (int index = 0; index < size(); index++) {
		if (getArr(index) == getKey())
			return (index == 0 ? 1 : 0); // return index;
	}
	return -1;
    }

    //@ ensures \result <==> findLast() != findFirst();
    /*@ pure @*/ boolean isMoreThanOneKey() {
	int first = findFirst();
	int last = findLast();
	return (first != last);
    }
}",Buggy
"class FindInArray {
    private /*@ spec_public @*/ int key;
    private /*@ spec_public @*/ int arr[];

    //@ ensures (\forall int i; 0 <= i && i < inputArr.length; inputArr[i] == arr[i]);
    //@ ensures key == 0;
    FindInArray(int inputArr[])
    {
	int size = inputArr.length;
	arr = new int[size];
	arr = inputArr.clone();
    } 

    //@ ensures this.key == key;
    //@ ensures (\forall int i; 0 <= i && i < inputArr.length; inputArr[i] == arr[i]);
    FindInArray(int inputArr[], int key)
    {
	int size = inputArr.length;
	arr = new int[size];
	arr = inputArr.clone();
        setKey(key);
    } 

    //@ assignable this.key;
    //@ ensures this.key == key;
    void setKey(int key) 
    {
	this.key = key;
    }

    //@ ensures \result == this.key;
    /*@ pure @*/ int getKey() 
    {
	return this.key;
    }
    //@ requires 0 <= i && i < arr.length;
    //@ ensures \result == this.arr[i];	
    /*@ pure @*/ int getArr(int i) 
    {
	return this.arr[i];
    }

    //@ ensures \result == arr.length;	
    /*@ pure @*/ int size() 
    {
   	return arr.length;
    }

    /*@ ensures 0 <= \result && \result < arr.length ==> (arr[\result] == key && 
      @			(\forall int i; \result < i && i < arr.length; arr[i] != key)); 
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key); @*/
    /*@ pure @*/ int findLast() {
	int index = size() - 1;
	//@ maintaining -1 <= index && index < arr.length; 
	//@ maintaining (\forall int i; index < i && i < arr.length; arr[i] != key);
	while (0 <= index) {
		if (getArr(index) == getKey())
			return index;
		index--;
	}
	return -1;
    }

    /*@ ensures 0 <= \result && \result < arr.length ==> (arr[\result] == key && 
      @			(\forall int i; 0 <= i && i < \result; arr[i] != key)); 
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key); @*/
    /*@ pure @*/ int findFirst() {	
	//@ maintaining 0 <= index && index <= arr.length;
	//@ maintaining (\forall int i; 0 <= i && i < index; arr[i] != key);
	for (int index = 0; index < size(); index++) {
		if (getArr(index) == getKey())
			return index;
	}
	return 0; //return -1;
    }

    //@ ensures \result <==> findLast() != findFirst();
    /*@ pure @*/ boolean isMoreThanOneKey() {
	int first = findFirst();
	int last = findLast();
	return (first != last);
    }
}",Buggy
"class FindInArray {
    private /*@ spec_public @*/ int key;
    private /*@ spec_public @*/ int arr[];

    //@ ensures (\forall int i; 0 <= i && i < inputArr.length; inputArr[i] == arr[i]);
    //@ ensures key == 0;
    FindInArray(int inputArr[])
    {
	int size = inputArr.length;
	arr = new int[size];
	arr = inputArr.clone();
    } 

    //@ ensures this.key == key;
    //@ ensures (\forall int i; 0 <= i && i < inputArr.length; inputArr[i] == arr[i]);
    FindInArray(int inputArr[], int key)
    {
	int size = inputArr.length;
	arr = new int[size];
	arr = inputArr.clone();
        setKey(key);
    } 

    //@ assignable this.key;
    //@ ensures this.key == key;
    void setKey(int key) 
    {
	this.key = key;
    }

    //@ ensures \result == this.key;
    /*@ pure @*/ int getKey() 
    {
	return this.key;
    }
    //@ requires 0 <= i && i < arr.length;
    //@ ensures \result == this.arr[i];	
    /*@ pure @*/ int getArr(int i) 
    {
	return this.arr[i];
    }

    //@ ensures \result == arr.length;	
    /*@ pure @*/ int size() 
    {
   	return arr.length;
    }

    /*@ ensures 0 <= \result && \result < arr.length ==> (arr[\result] == key && 
      @			(\forall int i; \result < i && i < arr.length; arr[i] != key)); 
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key); @*/
    /*@ pure @*/ int findLast() {
	int index = size() - 1;
	//@ maintaining -1 <= index && index < arr.length; 
	//@ maintaining (\forall int i; index < i && i < arr.length; arr[i] != key);
	while (0 <= index) {
		if (getArr(index) == getKey())
			return index;
		index--;
	}
	return -1;
    }

    /*@ ensures 0 <= \result && \result < arr.length ==> (arr[\result] == key && 
      @			(\forall int i; 0 <= i && i < \result; arr[i] != key)); 
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key); @*/
    /*@ pure @*/ int findFirst() {	
	//@ maintaining 0 <= index && index <= arr.length;
	//@ maintaining (\forall int i; 0 <= i && i < index; arr[i] != key);
	for (int index = 0; index < size(); index++) {
		if (getArr(index) == getKey())
			return index;
	}
	return -1;
    }

    //@ ensures \result <==> findLast() != findFirst();
    /*@ pure @*/ boolean isMoreThanOneKey() {
	int first = findFirst();
	int last = findLast();
	return (first == last); // return (first != last);
    }
}",Buggy
"class FindInArray {
    private /*@ spec_public @*/ int key;
    private /*@ spec_public @*/ int arr[];

    //@ ensures (\forall int i; 0 <= i && i < inputArr.length; inputArr[i] == arr[i]);
    //@ ensures key == 0;
    FindInArray(int inputArr[])
    {
	int size = inputArr.length;
	arr = new int[size];
	arr = inputArr.clone();
    } 

    //@ ensures this.key == key;
    //@ ensures (\forall int i; 0 <= i && i < inputArr.length; inputArr[i] == arr[i]);
    FindInArray(int inputArr[], int key)
    {
	int size = inputArr.length;
	arr = new int[size];
	arr = inputArr.clone();
        setKey(key);
    } 

    //@ assignable this.key;
    //@ ensures this.key == key;
    void setKey(int key) 
    {
	this.key = key;
    }

    //@ ensures \result == this.key;
    /*@ pure @*/ int getKey() 
    {
	return (this.key == 0 ? 1 : 0); //return this.key;
    }
    //@ requires 0 <= i && i < arr.length;
    //@ ensures \result == this.arr[i];	
    /*@ pure @*/ int getArr(int i) 
    {
	return this.arr[i];
    }

    //@ ensures \result == arr.length;	
    /*@ pure @*/ int size() 
    {
   	return arr.length;
    }
      
    /*@ ensures 0 <= \result && \result < arr.length ==> (arr[\result] == key && 
      @			(\forall int i; \result < i && i < arr.length; arr[i] != key)); 
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key); @*/
    /*@ pure @*/ int findLast() {
	int index = size() - 1;
	//@ maintaining -1 <= index && index < arr.length; 
	//@ maintaining (\forall int i; index < i && i < arr.length; arr[i] != key);
	while (0 <= index) {
		if (getArr(index) == getKey())
			return index;
		index--;
	}
	return -1;
    }

    /*@ ensures 0 <= \result && \result < arr.length ==> (arr[\result] == key && 
      @			(\forall int i; 0 <= i && i < \result; arr[i] != key)); 
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key); @*/
    /*@ pure @*/ int findFirst() {	
	//@ maintaining 0 <= index && index <= arr.length;
	//@ maintaining (\forall int i; 0 <= i && i < index; arr[i] != key);
	for (int index = 0; index < size(); index++) {
		if (getArr(index) == getKey())
			return index;
	}
	return -1;
    }

    //@ ensures \result <==> findLast() != findFirst();
    /*@ pure @*/ boolean isMoreThanOneKey() {
	int first = findFirst();
	int last = findLast();
	return (first != last);
    }
}",Buggy
"class FindInArray {
    private /*@ spec_public @*/ int key;
    private /*@ spec_public @*/ int arr[];

    //@ ensures (\forall int i; 0 <= i && i < inputArr.length; inputArr[i] == arr[i]);
    //@ ensures key == 0;
    FindInArray(int inputArr[])
    {
	int size = inputArr.length;
	arr = new int[size];
	arr = inputArr.clone();
    } 

    //@ ensures this.key == key;
    //@ ensures (\forall int i; 0 <= i && i < inputArr.length; inputArr[i] == arr[i]);
    FindInArray(int inputArr[], int key)
    {
	int size = inputArr.length;
	arr = new int[size];
	arr = inputArr.clone();
        setKey(key);
    } 

    //@ assignable this.key;
    //@ ensures this.key == key;
    void setKey(int key) 
    {
	this.key = key;
    }

    //@ ensures \result == this.key;
    /*@ pure @*/ int getKey() 
    {
	return this.key;
    }
    //@ requires 0 <= i && i < arr.length;
    //@ ensures \result == this.arr[i];	
    /*@ pure @*/ int getArr(int i) 
    {
	return (this.arr[i] == 0 ? 1 : 0);//return this.arr[i];
    }

    //@ ensures \result == arr.length;	
    /*@ pure @*/ int size() 
    {
   	return arr.length;
    }
  
    /*@ ensures 0 <= \result && \result < arr.length ==> (arr[\result] == key && 
      @			(\forall int i; \result < i && i < arr.length; arr[i] != key)); 
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key); @*/
    /*@ pure @*/ int findLast() {
	int index = size() - 1;
	//@ maintaining -1 <= index && index < arr.length; 
	//@ maintaining (\forall int i; index < i && i < arr.length; arr[i] != key);
	while (0 <= index) {
		if (getArr(index) == getKey())
			return index;
		index--;
	}
	return -1;
    }

    /*@ ensures 0 <= \result && \result < arr.length ==> (arr[\result] == key && 
      @			(\forall int i; 0 <= i && i < \result; arr[i] != key)); 
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key); @*/
    /*@ pure @*/ int findFirst() {	
	//@ maintaining 0 <= index && index <= arr.length;
	//@ maintaining (\forall int i; 0 <= i && i < index; arr[i] != key);
	for (int index = 0; index < size(); index++) {
		if (getArr(index) == getKey())
			return index;
	}
	return -1;
    }

    //@ ensures \result <==> findLast() != findFirst();
    /*@ pure @*/ boolean isMoreThanOneKey() {
	int first = findFirst();
	int last = findLast();
	return (first != last);
    }
}",Buggy
"class FindInArray {
    private /*@ spec_public @*/ int key;
    private /*@ spec_public @*/ int arr[];

    //@ ensures (\forall int i; 0 <= i && i < inputArr.length; inputArr[i] == arr[i]);
    //@ ensures key == 0;
    FindInArray(int inputArr[])
    {
	int size = inputArr.length;
	arr = new int[size];
	arr = inputArr.clone();
    } 

    //@ ensures this.key == key;
    //@ ensures (\forall int i; 0 <= i && i < inputArr.length; inputArr[i] == arr[i]);
    FindInArray(int inputArr[], int key)
    {
	int size = inputArr.length;
	arr = new int[size];
	arr = inputArr.clone();
        setKey(key);
    } 

    //@ assignable this.key;
    //@ ensures this.key == key;
    void setKey(int key) 
    {
	this.key = key;
    }

    //@ ensures \result == this.key;
    /*@ pure @*/ int getKey() 
    {
	return this.key;
    }
    //@ requires 0 <= i && i < arr.length;
    //@ ensures \result == this.arr[i];	
    /*@ pure @*/ int getArr(int i) 
    {
	return this.arr[i];
    }

    //@ ensures \result == arr.length;	
    /*@ pure @*/ int size() 
    {
   	return (arr.length == 0 ? 1 : 0);// return arr.length;
    }
 
    /*@ ensures 0 <= \result && \result < arr.length ==> (arr[\result] == key && 
      @			(\forall int i; \result < i && i < arr.length; arr[i] != key)); 
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key); @*/
    /*@ pure @*/ int findLast() {
	int index = size() - 1;
	//@ maintaining -1 <= index && index < arr.length; 
	//@ maintaining (\forall int i; index < i && i < arr.length; arr[i] != key);
	while (0 <= index) {
		if (getArr(index) == getKey())
			return index;
		index--;
	}
	return -1;
    }

    /*@ ensures 0 <= \result && \result < arr.length ==> (arr[\result] == key && 
      @			(\forall int i; 0 <= i && i < \result; arr[i] != key)); 
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key); @*/
    /*@ pure @*/ int findFirst() {	
	//@ maintaining 0 <= index && index <= arr.length;
	//@ maintaining (\forall int i; 0 <= i && i < index; arr[i] != key);
	for (int index = 0; index < size(); index++) {
		if (getArr(index) == getKey())
			return index;
	}
	return -1;
    }

    //@ ensures \result <==> findLast() != findFirst();
    /*@ pure @*/ boolean isMoreThanOneKey() {
	int first = findFirst();
	int last = findLast();
	return (first != last);
    }
}",Buggy
"class FindInArray {
    private /*@ spec_public @*/ int key;
    private /*@ spec_public @*/ int arr[];

    //@ ensures (\forall int i; 0 <= i && i < inputArr.length; inputArr[i] == arr[i]);
    //@ ensures key == 0;
    FindInArray(int inputArr[])
    {
	int size = inputArr.length;
	arr = new int[size];
	arr = inputArr.clone();
    } 

    //@ ensures this.key == key;
    //@ ensures (\forall int i; 0 <= i && i < inputArr.length; inputArr[i] == arr[i]);
    FindInArray(int inputArr[], int key)
    {
	int size = inputArr.length;
	arr = new int[size];
	arr = inputArr.clone();
        setKey(key);
    } 

    //@ assignable this.key;
    //@ ensures this.key == key;
    void setKey(int key) 
    {
	this.key = key;
    }

    //@ ensures \result == this.key;
    /*@ pure @*/ int getKey() 
    {
	return this.key;
    }
    //@ requires 0 <= i && i < arr.length;
    //@ ensures \result == this.arr[i];	
    /*@ pure @*/ int getArr(int i) 
    {
	return this.arr[i];
    }

    //@ ensures \result == arr.length;	
    /*@ pure @*/ int size() 
    {
   	return arr.length;
    }
 
    /*@ ensures 0 <= \result && \result < arr.length ==> (arr[\result] == key && 
      @			(\forall int i; \result < i && i < arr.length; arr[i] != key)); 
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key); @*/
    /*@ pure @*/ int findLast() {
	int index = size() + 1; // int index = size() - 1;
	//@ maintaining -1 <= index && index < arr.length; 
	//@ maintaining (\forall int i; index < i && i < arr.length; arr[i] != key);
	while (0 <= index) {
		if (getArr(index) == getKey())
			return index;
		index--;
	}
	return -1;
    }

    /*@ ensures 0 <= \result && \result < arr.length ==> (arr[\result] == key && 
      @			(\forall int i; 0 <= i && i < \result; arr[i] != key)); 
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key); @*/
    /*@ pure @*/ int findFirst() {	
	//@ maintaining 0 <= index && index <= arr.length;
	//@ maintaining (\forall int i; 0 <= i && i < index; arr[i] != key);
	for (int index = 0; index < size(); index++) {
		if (getArr(index) == getKey())
			return index;
	}
	return -1;
    }

    //@ ensures \result <==> findLast() != findFirst(); 
    /*@ pure @*/ boolean isMoreThanOneKey() {
	int first = findFirst();
	int last = findLast();
	return (first != last);
    }
}",Buggy
"class FindInArray {
    private /*@ spec_public @*/ int key;
    private /*@ spec_public @*/ int arr[];

    //@ ensures (\forall int i; 0 <= i && i < inputArr.length; inputArr[i] == arr[i]);
    //@ ensures key == 0;
    FindInArray(int inputArr[])
    {
	int size = inputArr.length;
	arr = new int[size];
	arr = inputArr.clone();
    } 

    //@ ensures this.key == key;
    //@ ensures (\forall int i; 0 <= i && i < inputArr.length; inputArr[i] == arr[i]);
    FindInArray(int inputArr[], int key)
    {
	int size = inputArr.length;
	arr = new int[size];
	arr = inputArr.clone();
        setKey(key);
    } 

    //@ assignable this.key;
    //@ ensures this.key == key;
    void setKey(int key) 
    {
	this.key = key;
    }

    //@ ensures \result == this.key;
    /*@ pure @*/ int getKey() 
    {
	return this.key;
    }
    //@ requires 0 <= i && i < arr.length;
    //@ ensures \result == this.arr[i];	
    /*@ pure @*/ int getArr(int i) 
    {
	return this.arr[i];
    }

    //@ ensures \result == arr.length;	
    /*@ pure @*/ int size() 
    {
   	return arr.length;
    }
 
    /*@ ensures 0 <= \result && \result < arr.length ==> (arr[\result] == key && 
      @			(\forall int i; \result < i && i < arr.length; arr[i] != key)); 
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key); @*/
    /*@ pure @*/ int findLast() {
	int index = size() - 1;
	//@ maintaining -1 <= index && index < arr.length; 
	//@ maintaining (\forall int i; index < i && i < arr.length; arr[i] != key);
	while (0 < index) {//while (0 <= index) {
		if (getArr(index) == getKey())
			return index;
		index--;
	}
	return -1;
    }

    /*@ ensures 0 <= \result && \result < arr.length ==> (arr[\result] == key && 
      @			(\forall int i; 0 <= i && i < \result; arr[i] != key)); 
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key); @*/
    /*@ pure @*/ int findFirst() {	
	//@ maintaining 0 <= index && index <= arr.length;
	//@ maintaining (\forall int i; 0 <= i && i < index; arr[i] != key);
	for (int index = 0; index < size(); index++) {
		if (getArr(index) == getKey())
			return index;
	}
	return -1;
    }

    //@ ensures \result <==> findLast() != findFirst();
    /*@ pure @*/ boolean isMoreThanOneKey() {
	int first = findFirst();
	int last = findLast();
	return (first != last);
    }
}",Buggy
"class FindInArray {
    private /*@ spec_public @*/ int key;
    private /*@ spec_public @*/ int arr[];

    //@ ensures (\forall int i; 0 <= i && i < inputArr.length; inputArr[i] == arr[i]);
    //@ ensures key == 0;
    FindInArray(int inputArr[])
    {
	int size = inputArr.length;
	arr = new int[size];
	arr = inputArr.clone();
    } 

    //@ ensures this.key == key;
    //@ ensures (\forall int i; 0 <= i && i < inputArr.length; inputArr[i] == arr[i]);
    FindInArray(int inputArr[], int key)
    {
	int size = inputArr.length;
	arr = new int[size];
	arr = inputArr.clone();
        setKey(key);
    } 

    //@ assignable this.key;
    //@ ensures this.key == key;
    void setKey(int key) 
    {
	this.key = key;
    }

    //@ ensures \result == this.key;
    /*@ pure @*/ int getKey() 
    {
	return this.key;
    }
    //@ requires 0 <= i && i < arr.length;
    //@ ensures \result == this.arr[i];	
    /*@ pure @*/ int getArr(int i) 
    {
	return this.arr[i];
    }

    //@ ensures \result == arr.length;	
    /*@ pure @*/ int size() 
    {
   	return arr.length;
    }

    /*@ ensures 0 <= \result && \result < arr.length ==> (arr[\result] == key && 
      @			(\forall int i; \result < i && i < arr.length; arr[i] != key)); 
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key); @*/
    /*@ pure @*/ int findLast() {
	int index = size() - 1;
	//@ maintaining -1 <= index && index < arr.length; 
	//@ maintaining (\forall int i; index < i && i < arr.length; arr[i] != key);
	while (0 > index) {//while (0 <= index) {
		if (getArr(index) == getKey())
			return index;
		index--;
	}
	return -1;
    }

    /*@ ensures 0 <= \result && \result < arr.length ==> (arr[\result] == key && 
      @			(\forall int i; 0 <= i && i < \result; arr[i] != key)); 
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key); @*/
    /*@ pure @*/ int findFirst() {	
	//@ maintaining 0 <= index && index <= arr.length;
	//@ maintaining (\forall int i; 0 <= i && i < index; arr[i] != key);
	for (int index = 0; index < size(); index++) {
		if (getArr(index) == getKey())
			return index;
	}
	return -1;
    }

    //@ ensures \result <==> findLast() != findFirst();
    /*@ pure @*/ boolean isMoreThanOneKey() {
	int first = findFirst();
	int last = findLast();
	return (first != last);
    }
}",Buggy
"class FindInArray {
    private /*@ spec_public @*/ int key;
    private /*@ spec_public @*/ int arr[];

    //@ ensures (\forall int i; 0 <= i && i < inputArr.length; inputArr[i] == arr[i]);
    //@ ensures key == 0;
    FindInArray(int inputArr[])
    {
	int size = inputArr.length;
	arr = new int[size];
	arr = inputArr.clone();
    } 

    //@ ensures this.key == key;
    //@ ensures (\forall int i; 0 <= i && i < inputArr.length; inputArr[i] == arr[i]);
    FindInArray(int inputArr[], int key)
    {
	int size = inputArr.length;
	arr = new int[size];
	arr = inputArr.clone();
        setKey(key);
    } 

    //@ assignable this.key;
    //@ ensures this.key == key;
    void setKey(int key) 
    {
	this.key = key;
    }

    //@ ensures \result == this.key;
    /*@ pure @*/ int getKey() 
    {
	return this.key;
    }
    //@ requires 0 <= i && i < arr.length;
    //@ ensures \result == this.arr[i];	
    /*@ pure @*/ int getArr(int i) 
    {
	return this.arr[i];
    }

    //@ ensures \result == arr.length;	
    /*@ pure @*/ int size() 
    {
   	return arr.length;
    }

    /*@ ensures 0 <= \result && \result < arr.length ==> (arr[\result] == key && 
      @			(\forall int i; \result < i && i < arr.length; arr[i] != key)); 
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key); @*/
    /*@ pure @*/ int findLast() {
	int index = size() - 1;
	//@ maintaining -1 <= index && index < arr.length; 
	//@ maintaining (\forall int i; index < i && i < arr.length; arr[i] != key);
	while (0 <= index) {
		if (getArr(index) != getKey())//if (getArr(index) == getKey())
			return index;
		index--;
	}
	return -1;
    }

    /*@ ensures 0 <= \result && \result < arr.length ==> (arr[\result] == key && 
      @			(\forall int i; 0 <= i && i < \result; arr[i] != key)); 
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key); @*/
    /*@ pure @*/ int findFirst() {	
	//@ maintaining 0 <= index && index <= arr.length;
	//@ maintaining (\forall int i; 0 <= i && i < index; arr[i] != key);
	for (int index = 0; index < size(); index++) {
		if (getArr(index) == getKey())
			return index;
	}
	return -1;
    }

    //@ ensures \result <==> findLast() != findFirst();
    /*@ pure @*/ boolean isMoreThanOneKey() {
	int first = findFirst();
	int last = findLast();
	return (first != last);
    }
}",Buggy
"class FindInArray {
    private /*@ spec_public @*/ int key;
    private /*@ spec_public @*/ int arr[];

    //@ ensures (\forall int i; 0 <= i && i < inputArr.length; inputArr[i] == arr[i]);
    //@ ensures key == 0;
    FindInArray(int inputArr[])
    {
	int size = inputArr.length;
	arr = new int[size];
	arr = inputArr.clone();
    } 

    //@ ensures this.key == key;
    //@ ensures (\forall int i; 0 <= i && i < inputArr.length; inputArr[i] == arr[i]);
    FindInArray(int inputArr[], int key)
    {
	int size = inputArr.length;
	arr = new int[size];
	arr = inputArr.clone();
        setKey(key);
    } 

    //@ assignable this.key;
    //@ ensures this.key == key;
    void setKey(int key) 
    {
	this.key = key;
    }

    //@ ensures \result == this.key;
    /*@ pure @*/ int getKey() 
    {
	return this.key;
    }
    //@ requires 0 <= i && i < arr.length;
    //@ ensures \result == this.arr[i];	
    /*@ pure @*/ int getArr(int i) 
    {
	return this.arr[i];
    }

    //@ ensures \result == arr.length;	
    /*@ pure @*/ int size() 
    {
   	return arr.length;
    }

    /*@ ensures 0 <= \result && \result < arr.length ==> (arr[\result] == key && 
      @			(\forall int i; \result < i && i < arr.length; arr[i] != key)); 
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key); @*/
    /*@ pure @*/ int findLast() {
	int index = size() - 1;
	//@ maintaining -1 <= index && index < arr.length; 
	//@ maintaining (\forall int i; index < i && i < arr.length; arr[i] != key);
	while (0 <= index) {
		if (getArr(index) == getKey())
			return (index == 0 ? 1 : 0); //return index;
		index--;
	}
	return -1;
    }

    /*@ ensures 0 <= \result && \result < arr.length ==> (arr[\result] == key && 
      @			(\forall int i; 0 <= i && i < \result; arr[i] != key)); 
      @ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key); @*/
    /*@ pure @*/ int findFirst() {	
	//@ maintaining 0 <= index && index <= arr.length;
	//@ maintaining (\forall int i; 0 <= i && i < index; arr[i] != key);
	for (int index = 0; index < size(); index++) {
		if (getArr(index) == getKey())
			return index;
	}
	return -1;
    }

    //@ ensures \result <==> findLast() != findFirst();
    /*@ pure @*/ boolean isMoreThanOneKey() {
	int first = findFirst();
	int last = findLast();
	return (first != last);
    }
}",Buggy
"public class GCD {
	/*@ public normal_behavior     
          @    requires d != 0;
	  @    ensures \result == n%d;
          @    pure function @*/
        public static int div(int n, int d) { 
		return n*d; // return n%d; 
	}

	/*@    requires 0 <= num && num <= Integer.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires Integer.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ int absolute(int num) {
		return (0 <= num) ? num : -num;
	}

        /*@ requires num1 != Integer.MAX_VALUE && num2 != Integer.MAX_VALUE && Integer.MIN_VALUE + 1 < num1 && Integer.MIN_VALUE + 1 < num2;
          @ {|  
	  @    requires num1 != 0 && num2 != 0;
	  @    old int tnum1 = absolute(num1);
	  @    old int tnum2 = absolute(num2);
	  @    old int greater = (tnum2 < tnum1) ? tnum1 : tnum2;
	  @    old int smaller = (tnum2 < tnum1) ? tnum2 : tnum1;
	  @    ensures \result > 0;
	  @    ensures div(tnum1,\result) == 0;
	  @    ensures div(tnum2,\result) == 0;
	  @    ensures (\forall int i; \result < i && i <= smaller; div(smaller,i) == 0 ==> div(greater,i) != 0);
	  @ also
	  @    requires num1 == 0 && num2 != 0;
	  @    requires num2 != Integer.MIN_VALUE;
	  @    old int tnum2 = absolute(num2);
	  @    ensures \result == tnum2;
	  @ also
	  @    requires num1 != 0 && num2 == 0;
	  @    requires num1 != Integer.MIN_VALUE;
	  @    old int tnum1 = absolute(num1);
	  @    ensures \result == tnum1;
	  @ also
	  @    requires num1 == 0 && num2 == 0;
	  @    ensures \result == -1;
          @ |} @*/
	public /*@ pure @*/ int gcd(int num1, int num2) throws IllegalArgumentException {
		int result = 1; 
	 	num1 = absolute(num1);
		num2 = absolute(num2);
	
		//@ assume div(num1, result) == 0 && div(num2, result) == 0;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		//@ maintaining result <= num1 && result <= num2;
		//@ maintaining 0 < i && i <= num1 + 1 && i<= num2 + 1; 
		//@ maintaining 0 < result && result <= i;
		//@ maintaining div(num1, result) == 0 && div(num2, result) == 0;
		//@ maintaining (\forall int j; 0 < j &&  j < i; div(num1, j) == 0 && div(num2, j) == 0 ==> j <= result);
		//@ decreases num1 - i; 
		for (int i = 1; i <= num1 && i <= num2; i++) {
            		if (div(num1,i) == 0 && div(num2,i) == 0) {
               			result = i;
			}
        	}
		return result;
	} 
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JUnitGCD {

	@Test
	public void test() {
		GCD a = new GCD();
		assertEquals(839516160, a.gcd(839516160, 0));
	}

	@Test
	public void test1() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(1912602640, 1198682738));
	}

	@Test
	public void test2() {
		GCD a = new GCD();
		assertEquals(67108864, a.gcd(-67108864, 0));
	}

	@Test
	public void test3() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1769473, 301793282));
	}

	@Test
	public void test4() {
		GCD a = new GCD();
		assertEquals(360, a.gcd(2075703480, -1649035080));
	}

	@Test
	public void test5() {
		GCD a = new GCD();
		assertEquals(-1, a.gcd(0, 0));
	}

	@Test
	public void test6() {
		GCD a = new GCD();
		assertEquals(2129664, a.gcd(2129664, 0));
	}

	@Test
	public void test7() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1416128883, 543781664));
	}

	@Test
	public void test8() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(-1338093054, -117440750));
	}

	@Test
	public void test9() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(828448852, 1702038120));
	}

	@Test
	public void test10() {
		GCD a = new GCD();
		assertEquals(1291845632, a.gcd(1291845632, 0));
	}

	@Test
	public void test11() {
		GCD a = new GCD();
		assertEquals(16777216, a.gcd(0, -16777216));
	}

	@Test
	public void test12() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(643704100, 591405353));
	}

	@Test
	public void test13() {
		GCD a = new GCD();
		assertEquals(3, a.gcd(-927229341, 696188928));
	}

	@Test
	public void test14() {
		GCD a = new GCD();
		assertEquals(14286848, a.gcd(-14286848, 0));
	}

	@Test
	public void test15() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-458753, -268632065));
	}

	@Test
	public void test16() {
		GCD a = new GCD();
		assertEquals(9, a.gcd(828864117, 1801663029));
	}

	@Test
	public void test17() {
		GCD a = new GCD();
		assertEquals(1331162622, a.gcd(-1331162622, 0));
	}

	@Test
	public void test18() {
		GCD a = new GCD();
		assertEquals(256, a.gcd(545197056, 2116352));
	}

	@Test
	public void test19() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(828864128, -129));
	}

	@Test
	public void test20() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1650813282, 1718970677));
	}

	@Test
	public void test21() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-1340517886, 1053991));
	}

	@Test
	public void test22() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(-993737532, -993770300));
	}

	@Test
	public void test23() {
		GCD a = new GCD();
		assertEquals(2130706432, a.gcd(2130706432, 0));
	}

	@Test
	public void test24() {
		GCD a = new GCD();
		assertEquals(9633728, a.gcd(0, -9633728));
	}
}",Buggy
"public class GCD {
	/*@ public normal_behavior     
          @    requires d != 0;
	  @    ensures \result == n%d;
          @    pure function @*/
        public static int div(int n, int d) { 
		return n%d; 
	}

	/*@    requires 0 <= num && num <= Integer.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires Integer.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ int absolute(int num) {
		return (0 <= num) ? num : -num;
	}

        /*@ requires num1 != Integer.MAX_VALUE && num2 != Integer.MAX_VALUE && Integer.MIN_VALUE + 1 < num1 && Integer.MIN_VALUE + 1 < num2;
          @ {|  
	  @    requires num1 != 0 && num2 != 0;
	  @    old int tnum1 = absolute(num1);
	  @    old int tnum2 = absolute(num2);
	  @    old int greater = (tnum2 < tnum1) ? tnum1 : tnum2;
	  @    old int smaller = (tnum2 < tnum1) ? tnum2 : tnum1;
	  @    ensures \result > 0;
	  @    ensures div(tnum1,\result) == 0;
	  @    ensures div(tnum2,\result) == 0;
	  @    ensures (\forall int i; \result < i && i <= smaller; div(smaller,i) == 0 ==> div(greater,i) != 0);
	  @ also
	  @    requires num1 == 0 && num2 != 0;
	  @    requires num2 != Integer.MIN_VALUE;
	  @    old int tnum2 = absolute(num2);
	  @    ensures \result == tnum2;
	  @ also
	  @    requires num1 != 0 && num2 == 0;
	  @    requires num1 != Integer.MIN_VALUE;
	  @    old int tnum1 = absolute(num1);
	  @    ensures \result == tnum1;
	  @ also
	  @    requires num1 == 0 && num2 == 0;
	  @    ensures \result == -1;
          @ |} @*/
	public /*@ pure @*/ int gcd(int num1, int num2) throws IllegalArgumentException {
		int result = 1; 
	 	num1 = absolute(num1);
		num2 = absolute(num2);
	
		//@ assume div(num1, result) == 0 && div(num2, result) == 0;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 != 0) { // if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		//@ maintaining result <= num1 && result <= num2;
		//@ maintaining 0 < i && i <= num1 + 1 && i<= num2 + 1; 
		//@ maintaining 0 < result && result <= i;
		//@ maintaining div(num1, result) == 0 && div(num2, result) == 0;
		//@ maintaining (\forall int j; 0 < j &&  j < i; div(num1, j) == 0 && div(num2, j) == 0 ==> j <= result);
		//@ decreases num1 - i; 
		for (int i = 1; i <= num1 && i <= num2; i++) {
            		if (div(num1,i) == 0 && div(num2,i) == 0) {
               			result = i;
			}
        	}
		return result;
	} 
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JUnitGCD {

	@Test
	public void test() {
		GCD a = new GCD();
		assertEquals(839516160, a.gcd(839516160, 0));
	}

	@Test
	public void test1() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(1912602640, 1198682738));
	}

	@Test
	public void test2() {
		GCD a = new GCD();
		assertEquals(67108864, a.gcd(-67108864, 0));
	}

	@Test
	public void test3() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1769473, 301793282));
	}

	@Test
	public void test4() {
		GCD a = new GCD();
		assertEquals(360, a.gcd(2075703480, -1649035080));
	}

	@Test
	public void test5() {
		GCD a = new GCD();
		assertEquals(-1, a.gcd(0, 0));
	}

	@Test
	public void test6() {
		GCD a = new GCD();
		assertEquals(2129664, a.gcd(2129664, 0));
	}

	@Test
	public void test7() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1416128883, 543781664));
	}

	@Test
	public void test8() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(-1338093054, -117440750));
	}

	@Test
	public void test9() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(828448852, 1702038120));
	}

	@Test
	public void test10() {
		GCD a = new GCD();
		assertEquals(1291845632, a.gcd(1291845632, 0));
	}

	@Test
	public void test11() {
		GCD a = new GCD();
		assertEquals(16777216, a.gcd(0, -16777216));
	}

	@Test
	public void test12() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(643704100, 591405353));
	}

	@Test
	public void test13() {
		GCD a = new GCD();
		assertEquals(3, a.gcd(-927229341, 696188928));
	}

	@Test
	public void test14() {
		GCD a = new GCD();
		assertEquals(14286848, a.gcd(-14286848, 0));
	}

	@Test
	public void test15() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-458753, -268632065));
	}

	@Test
	public void test16() {
		GCD a = new GCD();
		assertEquals(9, a.gcd(828864117, 1801663029));
	}

	@Test
	public void test17() {
		GCD a = new GCD();
		assertEquals(1331162622, a.gcd(-1331162622, 0));
	}

	@Test
	public void test18() {
		GCD a = new GCD();
		assertEquals(256, a.gcd(545197056, 2116352));
	}

	@Test
	public void test19() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(828864128, -129));
	}

	@Test
	public void test20() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1650813282, 1718970677));
	}

	@Test
	public void test21() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-1340517886, 1053991));
	}

	@Test
	public void test22() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(-993737532, -993770300));
	}

	@Test
	public void test23() {
		GCD a = new GCD();
		assertEquals(2130706432, a.gcd(2130706432, 0));
	}

	@Test
	public void test24() {
		GCD a = new GCD();
		assertEquals(9633728, a.gcd(0, -9633728));
	}
}",Buggy
"public class GCD {
	/*@ public normal_behavior     
          @    requires d != 0;
	  @    ensures \result == n%d;
          @    pure function @*/
        public static int div(int n, int d) { 
		return n%d; 
	}

	/*@    requires 0 <= num && num <= Integer.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires Integer.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ int absolute(int num) {
		return (0 <= num) ? num : -num;
	}

        /*@ requires num1 != Integer.MAX_VALUE && num2 != Integer.MAX_VALUE && Integer.MIN_VALUE + 1 < num1 && Integer.MIN_VALUE + 1 < num2;
          @ {|  
	  @    requires num1 != 0 && num2 != 0;
	  @    old int tnum1 = absolute(num1);
	  @    old int tnum2 = absolute(num2);
	  @    old int greater = (tnum2 < tnum1) ? tnum1 : tnum2;
	  @    old int smaller = (tnum2 < tnum1) ? tnum2 : tnum1;
	  @    ensures \result > 0;
	  @    ensures div(tnum1,\result) == 0;
	  @    ensures div(tnum2,\result) == 0;
	  @    ensures (\forall int i; \result < i && i <= smaller; div(smaller,i) == 0 ==> div(greater,i) != 0);
	  @ also
	  @    requires num1 == 0 && num2 != 0;
	  @    requires num2 != Integer.MIN_VALUE;
	  @    old int tnum2 = absolute(num2);
	  @    ensures \result == tnum2;
	  @ also
	  @    requires num1 != 0 && num2 == 0;
	  @    requires num1 != Integer.MIN_VALUE;
	  @    old int tnum1 = absolute(num1);
	  @    ensures \result == tnum1;
	  @ also
	  @    requires num1 == 0 && num2 == 0;
	  @    ensures \result == -1;
          @ |} @*/
	public /*@ pure @*/ int gcd(int num1, int num2) throws IllegalArgumentException {
		int result = 1; 
	 	num1 = absolute(num1);
		num2 = absolute(num2);
	
		//@ assume div(num1, result) == 0 && div(num2, result) == 0;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 <= num2) ? num1 : num2; // return (num1 > num2) ? num1 : num2;
		}

		//@ maintaining result <= num1 && result <= num2;
		//@ maintaining 0 < i && i <= num1 + 1 && i<= num2 + 1; 
		//@ maintaining 0 < result && result <= i;
		//@ maintaining div(num1, result) == 0 && div(num2, result) == 0;
		//@ maintaining (\forall int j; 0 < j &&  j < i; div(num1, j) == 0 && div(num2, j) == 0 ==> j <= result);
		//@ decreases num1 - i; 
		for (int i = 1; i <= num1 && i <= num2; i++) {
            		if (div(num1,i) == 0 && div(num2,i) == 0) {
               			result = i;
			}
        	}
		return result;
	} 
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JUnitGCD {

	@Test
	public void test() {
		GCD a = new GCD();
		assertEquals(839516160, a.gcd(839516160, 0));
	}

	@Test
	public void test1() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(1912602640, 1198682738));
	}

	@Test
	public void test2() {
		GCD a = new GCD();
		assertEquals(67108864, a.gcd(-67108864, 0));
	}

	@Test
	public void test3() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1769473, 301793282));
	}

	@Test
	public void test4() {
		GCD a = new GCD();
		assertEquals(360, a.gcd(2075703480, -1649035080));
	}

	@Test
	public void test5() {
		GCD a = new GCD();
		assertEquals(-1, a.gcd(0, 0));
	}

	@Test
	public void test6() {
		GCD a = new GCD();
		assertEquals(2129664, a.gcd(2129664, 0));
	}

	@Test
	public void test7() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1416128883, 543781664));
	}

	@Test
	public void test8() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(-1338093054, -117440750));
	}

	@Test
	public void test9() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(828448852, 1702038120));
	}

	@Test
	public void test10() {
		GCD a = new GCD();
		assertEquals(1291845632, a.gcd(1291845632, 0));
	}

	@Test
	public void test11() {
		GCD a = new GCD();
		assertEquals(16777216, a.gcd(0, -16777216));
	}

	@Test
	public void test12() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(643704100, 591405353));
	}

	@Test
	public void test13() {
		GCD a = new GCD();
		assertEquals(3, a.gcd(-927229341, 696188928));
	}

	@Test
	public void test14() {
		GCD a = new GCD();
		assertEquals(14286848, a.gcd(-14286848, 0));
	}

	@Test
	public void test15() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-458753, -268632065));
	}

	@Test
	public void test16() {
		GCD a = new GCD();
		assertEquals(9, a.gcd(828864117, 1801663029));
	}

	@Test
	public void test17() {
		GCD a = new GCD();
		assertEquals(1331162622, a.gcd(-1331162622, 0));
	}

	@Test
	public void test18() {
		GCD a = new GCD();
		assertEquals(256, a.gcd(545197056, 2116352));
	}

	@Test
	public void test19() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(828864128, -129));
	}

	@Test
	public void test20() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1650813282, 1718970677));
	}

	@Test
	public void test21() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-1340517886, 1053991));
	}

	@Test
	public void test22() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(-993737532, -993770300));
	}

	@Test
	public void test23() {
		GCD a = new GCD();
		assertEquals(2130706432, a.gcd(2130706432, 0));
	}

	@Test
	public void test24() {
		GCD a = new GCD();
		assertEquals(9633728, a.gcd(0, -9633728));
	}
}",Buggy
"public class GCD {
	/*@ public normal_behavior     
          @    requires d != 0;
	  @    ensures \result == n%d;
          @    pure function @*/
        public static int div(int n, int d) { 
		return n%d; 
	}

	/*@    requires 0 <= num && num <= Integer.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires Integer.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ int absolute(int num) {
		return (0 <= num) ? num : -num;
	}

        /*@ requires num1 != Integer.MAX_VALUE && num2 != Integer.MAX_VALUE && Integer.MIN_VALUE + 1 < num1 && Integer.MIN_VALUE + 1 < num2;
          @ {|  
	  @    requires num1 != 0 && num2 != 0;
	  @    old int tnum1 = absolute(num1);
	  @    old int tnum2 = absolute(num2);
	  @    old int greater = (tnum2 < tnum1) ? tnum1 : tnum2;
	  @    old int smaller = (tnum2 < tnum1) ? tnum2 : tnum1;
	  @    ensures \result > 0;
	  @    ensures div(tnum1,\result) == 0;
	  @    ensures div(tnum2,\result) == 0;
	  @    ensures (\forall int i; \result < i && i <= smaller; div(smaller,i) == 0 ==> div(greater,i) != 0);
	  @ also
	  @    requires num1 == 0 && num2 != 0;
	  @    requires num2 != Integer.MIN_VALUE;
	  @    old int tnum2 = absolute(num2);
	  @    ensures \result == tnum2;
	  @ also
	  @    requires num1 != 0 && num2 == 0;
	  @    requires num1 != Integer.MIN_VALUE;
	  @    old int tnum1 = absolute(num1);
	  @    ensures \result == tnum1;
	  @ also
	  @    requires num1 == 0 && num2 == 0;
	  @    ensures \result == -1;
          @ |} @*/
	public /*@ pure @*/ int gcd(int num1, int num2) throws IllegalArgumentException {
		int result = 1; 
	 	num1 = absolute(num1);
		num2 = absolute(num2);
	
		//@ assume div(num1, result) == 0 && div(num2, result) == 0;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return 0; // return (num1 > num2) ? num1 : num2;
		}

		//@ maintaining result <= num1 && result <= num2;
		//@ maintaining 0 < i && i <= num1 + 1 && i<= num2 + 1; 
		//@ maintaining 0 < result && result <= i;
		//@ maintaining div(num1, result) == 0 && div(num2, result) == 0;
		//@ maintaining (\forall int j; 0 < j &&  j < i; div(num1, j) == 0 && div(num2, j) == 0 ==> j <= result);
		//@ decreases num1 - i; 
		for (int i = 1; i <= num1 && i <= num2; i++) {
            		if (div(num1,i) == 0 && div(num2,i) == 0) {
               			result = i;
			}
        	}
		return result;
	} 
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JUnitGCD {

	@Test
	public void test() {
		GCD a = new GCD();
		assertEquals(839516160, a.gcd(839516160, 0));
	}

	@Test
	public void test1() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(1912602640, 1198682738));
	}

	@Test
	public void test2() {
		GCD a = new GCD();
		assertEquals(67108864, a.gcd(-67108864, 0));
	}

	@Test
	public void test3() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1769473, 301793282));
	}

	@Test
	public void test4() {
		GCD a = new GCD();
		assertEquals(360, a.gcd(2075703480, -1649035080));
	}

	@Test
	public void test5() {
		GCD a = new GCD();
		assertEquals(-1, a.gcd(0, 0));
	}

	@Test
	public void test6() {
		GCD a = new GCD();
		assertEquals(2129664, a.gcd(2129664, 0));
	}

	@Test
	public void test7() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1416128883, 543781664));
	}

	@Test
	public void test8() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(-1338093054, -117440750));
	}

	@Test
	public void test9() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(828448852, 1702038120));
	}

	@Test
	public void test10() {
		GCD a = new GCD();
		assertEquals(1291845632, a.gcd(1291845632, 0));
	}

	@Test
	public void test11() {
		GCD a = new GCD();
		assertEquals(16777216, a.gcd(0, -16777216));
	}

	@Test
	public void test12() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(643704100, 591405353));
	}

	@Test
	public void test13() {
		GCD a = new GCD();
		assertEquals(3, a.gcd(-927229341, 696188928));
	}

	@Test
	public void test14() {
		GCD a = new GCD();
		assertEquals(14286848, a.gcd(-14286848, 0));
	}

	@Test
	public void test15() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-458753, -268632065));
	}

	@Test
	public void test16() {
		GCD a = new GCD();
		assertEquals(9, a.gcd(828864117, 1801663029));
	}

	@Test
	public void test17() {
		GCD a = new GCD();
		assertEquals(1331162622, a.gcd(-1331162622, 0));
	}

	@Test
	public void test18() {
		GCD a = new GCD();
		assertEquals(256, a.gcd(545197056, 2116352));
	}

	@Test
	public void test19() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(828864128, -129));
	}

	@Test
	public void test20() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1650813282, 1718970677));
	}

	@Test
	public void test21() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-1340517886, 1053991));
	}

	@Test
	public void test22() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(-993737532, -993770300));
	}

	@Test
	public void test23() {
		GCD a = new GCD();
		assertEquals(2130706432, a.gcd(2130706432, 0));
	}

	@Test
	public void test24() {
		GCD a = new GCD();
		assertEquals(9633728, a.gcd(0, -9633728));
	}
}",Buggy
"public class GCD {
	/*@ public normal_behavior     
          @    requires d != 0;
	  @    ensures \result == n%d;
          @    pure function @*/
        public static int div(int n, int d) { 
		return n%d; 
	}

	/*@    requires 0 <= num && num <= Integer.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires Integer.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ int absolute(int num) {
		return (0 <= num) ? num : -num;
	}

        /*@ requires num1 != Integer.MAX_VALUE && num2 != Integer.MAX_VALUE && Integer.MIN_VALUE + 1 < num1 && Integer.MIN_VALUE + 1 < num2;
          @ {|  
	  @    requires num1 != 0 && num2 != 0;
	  @    old int tnum1 = absolute(num1);
	  @    old int tnum2 = absolute(num2);
	  @    old int greater = (tnum2 < tnum1) ? tnum1 : tnum2;
	  @    old int smaller = (tnum2 < tnum1) ? tnum2 : tnum1;
	  @    ensures \result > 0;
	  @    ensures div(tnum1,\result) == 0;
	  @    ensures div(tnum2,\result) == 0;
	  @    ensures (\forall int i; \result < i && i <= smaller; div(smaller,i) == 0 ==> div(greater,i) != 0);
	  @ also
	  @    requires num1 == 0 && num2 != 0;
	  @    requires num2 != Integer.MIN_VALUE;
	  @    old int tnum2 = absolute(num2);
	  @    ensures \result == tnum2;
	  @ also
	  @    requires num1 != 0 && num2 == 0;
	  @    requires num1 != Integer.MIN_VALUE;
	  @    old int tnum1 = absolute(num1);
	  @    ensures \result == tnum1;
	  @ also
	  @    requires num1 == 0 && num2 == 0;
	  @    ensures \result == -1;
          @ |} @*/
	public /*@ pure @*/ int gcd(int num1, int num2) throws IllegalArgumentException {
		int result = 1; 
	 	num1 = absolute(num1);
		num2 = absolute(num2);
	
		//@ assume div(num1, result) == 0 && div(num2, result) == 0;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		//@ maintaining result <= num1 && result <= num2;
		//@ maintaining 0 < i && i <= num1 + 1 && i<= num2 + 1; 
		//@ maintaining 0 < result && result <= i;
		//@ maintaining div(num1, result) == 0 && div(num2, result) == 0;
		//@ maintaining (\forall int j; 0 < j &&  j < i; div(num1, j) == 0 && div(num2, j) == 0 ==> j <= result);
		//@ decreases num1 - i; 
		for (int i = 1; i < num1 && i <= num2; i++) { // for (int i = 1; i <= num1 && i <= num2; i++) {
            		if (div(num1,i) == 0 && div(num2,i) == 0) {
               			result = i;
			}
        	}
		return result;
	} 
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JUnitGCD {

	@Test
	public void test() {
		GCD a = new GCD();
		assertEquals(839516160, a.gcd(839516160, 0));
	}

	@Test
	public void test1() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(1912602640, 1198682738));
	}

	@Test
	public void test2() {
		GCD a = new GCD();
		assertEquals(67108864, a.gcd(-67108864, 0));
	}

	@Test
	public void test3() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1769473, 301793282));
	}

	@Test
	public void test4() {
		GCD a = new GCD();
		assertEquals(360, a.gcd(2075703480, -1649035080));
	}

	@Test
	public void test5() {
		GCD a = new GCD();
		assertEquals(-1, a.gcd(0, 0));
	}

	@Test
	public void test6() {
		GCD a = new GCD();
		assertEquals(2129664, a.gcd(2129664, 0));
	}

	@Test
	public void test7() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1416128883, 543781664));
	}

	@Test
	public void test8() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(-1338093054, -117440750));
	}

	@Test
	public void test9() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(828448852, 1702038120));
	}

	@Test
	public void test10() {
		GCD a = new GCD();
		assertEquals(1291845632, a.gcd(1291845632, 0));
	}

	@Test
	public void test11() {
		GCD a = new GCD();
		assertEquals(16777216, a.gcd(0, -16777216));
	}

	@Test
	public void test12() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(643704100, 591405353));
	}

	@Test
	public void test13() {
		GCD a = new GCD();
		assertEquals(3, a.gcd(-927229341, 696188928));
	}

	@Test
	public void test14() {
		GCD a = new GCD();
		assertEquals(14286848, a.gcd(-14286848, 0));
	}

	@Test
	public void test15() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-458753, -268632065));
	}

	@Test
	public void test16() {
		GCD a = new GCD();
		assertEquals(9, a.gcd(828864117, 1801663029));
	}

	@Test
	public void test17() {
		GCD a = new GCD();
		assertEquals(1331162622, a.gcd(-1331162622, 0));
	}

	@Test
	public void test18() {
		GCD a = new GCD();
		assertEquals(256, a.gcd(545197056, 2116352));
	}

	@Test
	public void test19() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(828864128, -129));
	}

	@Test
	public void test20() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1650813282, 1718970677));
	}

	@Test
	public void test21() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-1340517886, 1053991));
	}

	@Test
	public void test22() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(-993737532, -993770300));
	}

	@Test
	public void test23() {
		GCD a = new GCD();
		assertEquals(2130706432, a.gcd(2130706432, 0));
	}

	@Test
	public void test24() {
		GCD a = new GCD();
		assertEquals(9633728, a.gcd(0, -9633728));
	}
}",Buggy
"public class GCD {
	/*@ public normal_behavior     
          @    requires d != 0;
	  @    ensures \result == n%d;
          @    pure function @*/
        public static int div(int n, int d) { 
		return n%d; 
	}

	/*@    requires 0 <= num && num <= Integer.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires Integer.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ int absolute(int num) {
		return (0 <= num) ? num : -num;
	}

        /*@ requires num1 != Integer.MAX_VALUE && num2 != Integer.MAX_VALUE && Integer.MIN_VALUE + 1 < num1 && Integer.MIN_VALUE + 1 < num2;
          @ {|  
	  @    requires num1 != 0 && num2 != 0;
	  @    old int tnum1 = absolute(num1);
	  @    old int tnum2 = absolute(num2);
	  @    old int greater = (tnum2 < tnum1) ? tnum1 : tnum2;
	  @    old int smaller = (tnum2 < tnum1) ? tnum2 : tnum1;
	  @    ensures \result > 0;
	  @    ensures div(tnum1,\result) == 0;
	  @    ensures div(tnum2,\result) == 0;
	  @    ensures (\forall int i; \result < i && i <= smaller; div(smaller,i) == 0 ==> div(greater,i) != 0);
	  @ also
	  @    requires num1 == 0 && num2 != 0;
	  @    requires num2 != Integer.MIN_VALUE;
	  @    old int tnum2 = absolute(num2);
	  @    ensures \result == tnum2;
	  @ also
	  @    requires num1 != 0 && num2 == 0;
	  @    requires num1 != Integer.MIN_VALUE;
	  @    old int tnum1 = absolute(num1);
	  @    ensures \result == tnum1;
	  @ also
	  @    requires num1 == 0 && num2 == 0;
	  @    ensures \result == -1;
          @ |} @*/
	public /*@ pure @*/ int gcd(int num1, int num2) throws IllegalArgumentException {
		int result = 1; 
	 	num1 = absolute(num1);
		num2 = absolute(num2);
	
		//@ assume div(num1, result) == 0 && div(num2, result) == 0;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		//@ maintaining result <= num1 && result <= num2;
		//@ maintaining 0 < i && i <= num1 + 1 && i<= num2 + 1; 
		//@ maintaining 0 < result && result <= i;
		//@ maintaining div(num1, result) == 0 && div(num2, result) == 0;
		//@ maintaining (\forall int j; 0 < j &&  j < i; div(num1, j) == 0 && div(num2, j) == 0 ==> j <= result);
		//@ decreases num1 - i; 
		for (int i = 1; i <= num1 && i < num2; i++) { // for (int i = 1; i <= num1 && i <= num2; i++) {
            		if (div(num1,i) == 0 && div(num2,i) == 0) {
               			result = i;
			}
        	}
		return result;
	} 
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JUnitGCD {

	@Test
	public void test() {
		GCD a = new GCD();
		assertEquals(839516160, a.gcd(839516160, 0));
	}

	@Test
	public void test1() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(1912602640, 1198682738));
	}

	@Test
	public void test2() {
		GCD a = new GCD();
		assertEquals(67108864, a.gcd(-67108864, 0));
	}

	@Test
	public void test3() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1769473, 301793282));
	}

	@Test
	public void test4() {
		GCD a = new GCD();
		assertEquals(360, a.gcd(2075703480, -1649035080));
	}

	@Test
	public void test5() {
		GCD a = new GCD();
		assertEquals(-1, a.gcd(0, 0));
	}

	@Test
	public void test6() {
		GCD a = new GCD();
		assertEquals(2129664, a.gcd(2129664, 0));
	}

	@Test
	public void test7() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1416128883, 543781664));
	}

	@Test
	public void test8() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(-1338093054, -117440750));
	}

	@Test
	public void test9() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(828448852, 1702038120));
	}

	@Test
	public void test10() {
		GCD a = new GCD();
		assertEquals(1291845632, a.gcd(1291845632, 0));
	}

	@Test
	public void test11() {
		GCD a = new GCD();
		assertEquals(16777216, a.gcd(0, -16777216));
	}

	@Test
	public void test12() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(643704100, 591405353));
	}

	@Test
	public void test13() {
		GCD a = new GCD();
		assertEquals(3, a.gcd(-927229341, 696188928));
	}

	@Test
	public void test14() {
		GCD a = new GCD();
		assertEquals(14286848, a.gcd(-14286848, 0));
	}

	@Test
	public void test15() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-458753, -268632065));
	}

	@Test
	public void test16() {
		GCD a = new GCD();
		assertEquals(9, a.gcd(828864117, 1801663029));
	}

	@Test
	public void test17() {
		GCD a = new GCD();
		assertEquals(1331162622, a.gcd(-1331162622, 0));
	}

	@Test
	public void test18() {
		GCD a = new GCD();
		assertEquals(256, a.gcd(545197056, 2116352));
	}

	@Test
	public void test19() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(828864128, -129));
	}

	@Test
	public void test20() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1650813282, 1718970677));
	}

	@Test
	public void test21() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-1340517886, 1053991));
	}

	@Test
	public void test22() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(-993737532, -993770300));
	}

	@Test
	public void test23() {
		GCD a = new GCD();
		assertEquals(2130706432, a.gcd(2130706432, 0));
	}

	@Test
	public void test24() {
		GCD a = new GCD();
		assertEquals(9633728, a.gcd(0, -9633728));
	}
}",Buggy
"public class GCD {
	/*@ public normal_behavior     
          @    requires d != 0;
	  @    ensures \result == n%d;
          @    pure function @*/
        public static int div(int n, int d) { 
		return n%d; 
	}

	/*@    requires 0 <= num && num <= Integer.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires Integer.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ int absolute(int num) {
		return (0 <= num) ? num : -num;
	}

        /*@ requires num1 != Integer.MAX_VALUE && num2 != Integer.MAX_VALUE && Integer.MIN_VALUE + 1 < num1 && Integer.MIN_VALUE + 1 < num2;
          @ {|  
	  @    requires num1 != 0 && num2 != 0;
	  @    old int tnum1 = absolute(num1);
	  @    old int tnum2 = absolute(num2);
	  @    old int greater = (tnum2 < tnum1) ? tnum1 : tnum2;
	  @    old int smaller = (tnum2 < tnum1) ? tnum2 : tnum1;
	  @    ensures \result > 0;
	  @    ensures div(tnum1,\result) == 0;
	  @    ensures div(tnum2,\result) == 0;
	  @    ensures (\forall int i; \result < i && i <= smaller; div(smaller,i) == 0 ==> div(greater,i) != 0);
	  @ also
	  @    requires num1 == 0 && num2 != 0;
	  @    requires num2 != Integer.MIN_VALUE;
	  @    old int tnum2 = absolute(num2);
	  @    ensures \result == tnum2;
	  @ also
	  @    requires num1 != 0 && num2 == 0;
	  @    requires num1 != Integer.MIN_VALUE;
	  @    old int tnum1 = absolute(num1);
	  @    ensures \result == tnum1;
	  @ also
	  @    requires num1 == 0 && num2 == 0;
	  @    ensures \result == -1;
          @ |} @*/
	public /*@ pure @*/ int gcd(int num1, int num2) throws IllegalArgumentException {
		int result = 1; 
	 	num1 = absolute(num1);
		num2 = absolute(num2);
	
		//@ assume div(num1, result) == 0 && div(num2, result) == 0;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		//@ maintaining result <= num1 && result <= num2;
		//@ maintaining 0 < i && i <= num1 + 1 && i<= num2 + 1; 
		//@ maintaining 0 < result && result <= i;
		//@ maintaining div(num1, result) == 0 && div(num2, result) == 0;
		//@ maintaining (\forall int j; 0 < j &&  j < i; div(num1, j) == 0 && div(num2, j) == 0 ==> j <= result);
		//@ decreases num1 - i; 
		for (int i = 1; i <= num1 && i <= num2; i--) { // for (int i = 1; i <= num1 && i <= num2; i++) {
            		if (div(num1,i) == 0 && div(num2,i) == 0) {
               			result = i;
			}
        	}
		return result;
	} 
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JUnitGCD {

	@Test
	public void test() {
		GCD a = new GCD();
		assertEquals(839516160, a.gcd(839516160, 0));
	}

	@Test
	public void test1() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(1912602640, 1198682738));
	}

	@Test
	public void test2() {
		GCD a = new GCD();
		assertEquals(67108864, a.gcd(-67108864, 0));
	}

	@Test
	public void test3() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1769473, 301793282));
	}

	@Test
	public void test4() {
		GCD a = new GCD();
		assertEquals(360, a.gcd(2075703480, -1649035080));
	}

	@Test
	public void test5() {
		GCD a = new GCD();
		assertEquals(-1, a.gcd(0, 0));
	}

	@Test
	public void test6() {
		GCD a = new GCD();
		assertEquals(2129664, a.gcd(2129664, 0));
	}

	@Test
	public void test7() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1416128883, 543781664));
	}

	@Test
	public void test8() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(-1338093054, -117440750));
	}

	@Test
	public void test9() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(828448852, 1702038120));
	}

	@Test
	public void test10() {
		GCD a = new GCD();
		assertEquals(1291845632, a.gcd(1291845632, 0));
	}

	@Test
	public void test11() {
		GCD a = new GCD();
		assertEquals(16777216, a.gcd(0, -16777216));
	}

	@Test
	public void test12() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(643704100, 591405353));
	}

	@Test
	public void test13() {
		GCD a = new GCD();
		assertEquals(3, a.gcd(-927229341, 696188928));
	}

	@Test
	public void test14() {
		GCD a = new GCD();
		assertEquals(14286848, a.gcd(-14286848, 0));
	}

	@Test
	public void test15() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-458753, -268632065));
	}

	@Test
	public void test16() {
		GCD a = new GCD();
		assertEquals(9, a.gcd(828864117, 1801663029));
	}

	@Test
	public void test17() {
		GCD a = new GCD();
		assertEquals(1331162622, a.gcd(-1331162622, 0));
	}

	@Test
	public void test18() {
		GCD a = new GCD();
		assertEquals(256, a.gcd(545197056, 2116352));
	}

	@Test
	public void test19() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(828864128, -129));
	}

	@Test
	public void test20() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1650813282, 1718970677));
	}

	@Test
	public void test21() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-1340517886, 1053991));
	}

	@Test
	public void test22() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(-993737532, -993770300));
	}

	@Test
	public void test23() {
		GCD a = new GCD();
		assertEquals(2130706432, a.gcd(2130706432, 0));
	}

	@Test
	public void test24() {
		GCD a = new GCD();
		assertEquals(9633728, a.gcd(0, -9633728));
	}
}",Buggy
"public class GCD {
	/*@ public normal_behavior     
          @    requires d != 0;
	  @    ensures \result == n%d;
          @    pure function @*/
        public static int div(int n, int d) { 
		return n%d; 
	}

	/*@    requires 0 <= num && num <= Integer.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires Integer.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ int absolute(int num) {
		return (0 <= num) ? num : -num;
	}

        /*@ requires num1 != Integer.MAX_VALUE && num2 != Integer.MAX_VALUE && Integer.MIN_VALUE + 1 < num1 && Integer.MIN_VALUE + 1 < num2;
          @ {|  
	  @    requires num1 != 0 && num2 != 0;
	  @    old int tnum1 = absolute(num1);
	  @    old int tnum2 = absolute(num2);
	  @    old int greater = (tnum2 < tnum1) ? tnum1 : tnum2;
	  @    old int smaller = (tnum2 < tnum1) ? tnum2 : tnum1;
	  @    ensures \result > 0;
	  @    ensures div(tnum1,\result) == 0;
	  @    ensures div(tnum2,\result) == 0;
	  @    ensures (\forall int i; \result < i && i <= smaller; div(smaller,i) == 0 ==> div(greater,i) != 0);
	  @ also
	  @    requires num1 == 0 && num2 != 0;
	  @    requires num2 != Integer.MIN_VALUE;
	  @    old int tnum2 = absolute(num2);
	  @    ensures \result == tnum2;
	  @ also
	  @    requires num1 != 0 && num2 == 0;
	  @    requires num1 != Integer.MIN_VALUE;
	  @    old int tnum1 = absolute(num1);
	  @    ensures \result == tnum1;
	  @ also
	  @    requires num1 == 0 && num2 == 0;
	  @    ensures \result == -1;
          @ |} @*/
	public /*@ pure @*/ int gcd(int num1, int num2) throws IllegalArgumentException {
		int result = 1; 
	 	num1 = absolute(num1);
		num2 = absolute(num2);
	
		//@ assume div(num1, result) == 0 && div(num2, result) == 0;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		//@ maintaining result <= num1 && result <= num2;
		//@ maintaining 0 < i && i <= num1 + 1 && i<= num2 + 1; 
		//@ maintaining 0 < result && result <= i;
		//@ maintaining div(num1, result) == 0 && div(num2, result) == 0;
		//@ maintaining (\forall int j; 0 < j &&  j < i; div(num1, j) == 0 && div(num2, j) == 0 ==> j <= result);
		//@ decreases num1 - i; 
		for (int i = 1; i > num1 && i <= num2; i++) { // for (int i = 1; i <= num1 && i <= num2; i++) {
            		if (div(num1,i) == 0 && div(num2,i) == 0) {
               			result = i;
			}
        	}
		return result;
	} 
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JUnitGCD {

	@Test
	public void test() {
		GCD a = new GCD();
		assertEquals(839516160, a.gcd(839516160, 0));
	}

	@Test
	public void test1() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(1912602640, 1198682738));
	}

	@Test
	public void test2() {
		GCD a = new GCD();
		assertEquals(67108864, a.gcd(-67108864, 0));
	}

	@Test
	public void test3() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1769473, 301793282));
	}

	@Test
	public void test4() {
		GCD a = new GCD();
		assertEquals(360, a.gcd(2075703480, -1649035080));
	}

	@Test
	public void test5() {
		GCD a = new GCD();
		assertEquals(-1, a.gcd(0, 0));
	}

	@Test
	public void test6() {
		GCD a = new GCD();
		assertEquals(2129664, a.gcd(2129664, 0));
	}

	@Test
	public void test7() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1416128883, 543781664));
	}

	@Test
	public void test8() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(-1338093054, -117440750));
	}

	@Test
	public void test9() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(828448852, 1702038120));
	}

	@Test
	public void test10() {
		GCD a = new GCD();
		assertEquals(1291845632, a.gcd(1291845632, 0));
	}

	@Test
	public void test11() {
		GCD a = new GCD();
		assertEquals(16777216, a.gcd(0, -16777216));
	}

	@Test
	public void test12() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(643704100, 591405353));
	}

	@Test
	public void test13() {
		GCD a = new GCD();
		assertEquals(3, a.gcd(-927229341, 696188928));
	}

	@Test
	public void test14() {
		GCD a = new GCD();
		assertEquals(14286848, a.gcd(-14286848, 0));
	}

	@Test
	public void test15() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-458753, -268632065));
	}

	@Test
	public void test16() {
		GCD a = new GCD();
		assertEquals(9, a.gcd(828864117, 1801663029));
	}

	@Test
	public void test17() {
		GCD a = new GCD();
		assertEquals(1331162622, a.gcd(-1331162622, 0));
	}

	@Test
	public void test18() {
		GCD a = new GCD();
		assertEquals(256, a.gcd(545197056, 2116352));
	}

	@Test
	public void test19() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(828864128, -129));
	}

	@Test
	public void test20() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1650813282, 1718970677));
	}

	@Test
	public void test21() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-1340517886, 1053991));
	}

	@Test
	public void test22() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(-993737532, -993770300));
	}

	@Test
	public void test23() {
		GCD a = new GCD();
		assertEquals(2130706432, a.gcd(2130706432, 0));
	}

	@Test
	public void test24() {
		GCD a = new GCD();
		assertEquals(9633728, a.gcd(0, -9633728));
	}
}",Buggy
"public class GCD {
	/*@ public normal_behavior     
          @    requires d != 0;
	  @    ensures \result == n%d;
          @    pure function @*/
        public static int div(int n, int d) { 
		return n%d; 
	}

	/*@    requires 0 <= num && num <= Integer.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires Integer.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ int absolute(int num) {
		return (0 <= num) ? num : -num;
	}

        /*@ requires num1 != Integer.MAX_VALUE && num2 != Integer.MAX_VALUE && Integer.MIN_VALUE + 1 < num1 && Integer.MIN_VALUE + 1 < num2;
          @ {|  
	  @    requires num1 != 0 && num2 != 0;
	  @    old int tnum1 = absolute(num1);
	  @    old int tnum2 = absolute(num2);
	  @    old int greater = (tnum2 < tnum1) ? tnum1 : tnum2;
	  @    old int smaller = (tnum2 < tnum1) ? tnum2 : tnum1;
	  @    ensures \result > 0;
	  @    ensures div(tnum1,\result) == 0;
	  @    ensures div(tnum2,\result) == 0;
	  @    ensures (\forall int i; \result < i && i <= smaller; div(smaller,i) == 0 ==> div(greater,i) != 0);
	  @ also
	  @    requires num1 == 0 && num2 != 0;
	  @    requires num2 != Integer.MIN_VALUE;
	  @    old int tnum2 = absolute(num2);
	  @    ensures \result == tnum2;
	  @ also
	  @    requires num1 != 0 && num2 == 0;
	  @    requires num1 != Integer.MIN_VALUE;
	  @    old int tnum1 = absolute(num1);
	  @    ensures \result == tnum1;
	  @ also
	  @    requires num1 == 0 && num2 == 0;
	  @    ensures \result == -1;
          @ |} @*/
	public /*@ pure @*/ int gcd(int num1, int num2) throws IllegalArgumentException {
		int result = 1; 
	 	num1 = absolute(num1);
		num2 = absolute(num2);
	
		//@ assume div(num1, result) == 0 && div(num2, result) == 0;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		//@ maintaining result <= num1 && result <= num2;
		//@ maintaining 0 < i && i <= num1 + 1 && i<= num2 + 1; 
		//@ maintaining 0 < result && result <= i;
		//@ maintaining div(num1, result) == 0 && div(num2, result) == 0;
		//@ maintaining (\forall int j; 0 < j &&  j < i; div(num1, j) == 0 && div(num2, j) == 0 ==> j <= result);
		//@ decreases num1 - i; 
		for (int i = 1; i <= num1 && i > num2; i++) { // for (int i = 1; i <= num1 && i <= num2; i++) {
            		if (div(num1,i) == 0 && div(num2,i) == 0) {
               			result = i;
			}
        	}
		return result;
	} 
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JUnitGCD {

	@Test
	public void test() {
		GCD a = new GCD();
		assertEquals(839516160, a.gcd(839516160, 0));
	}

	@Test
	public void test1() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(1912602640, 1198682738));
	}

	@Test
	public void test2() {
		GCD a = new GCD();
		assertEquals(67108864, a.gcd(-67108864, 0));
	}

	@Test
	public void test3() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1769473, 301793282));
	}

	@Test
	public void test4() {
		GCD a = new GCD();
		assertEquals(360, a.gcd(2075703480, -1649035080));
	}

	@Test
	public void test5() {
		GCD a = new GCD();
		assertEquals(-1, a.gcd(0, 0));
	}

	@Test
	public void test6() {
		GCD a = new GCD();
		assertEquals(2129664, a.gcd(2129664, 0));
	}

	@Test
	public void test7() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1416128883, 543781664));
	}

	@Test
	public void test8() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(-1338093054, -117440750));
	}

	@Test
	public void test9() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(828448852, 1702038120));
	}

	@Test
	public void test10() {
		GCD a = new GCD();
		assertEquals(1291845632, a.gcd(1291845632, 0));
	}

	@Test
	public void test11() {
		GCD a = new GCD();
		assertEquals(16777216, a.gcd(0, -16777216));
	}

	@Test
	public void test12() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(643704100, 591405353));
	}

	@Test
	public void test13() {
		GCD a = new GCD();
		assertEquals(3, a.gcd(-927229341, 696188928));
	}

	@Test
	public void test14() {
		GCD a = new GCD();
		assertEquals(14286848, a.gcd(-14286848, 0));
	}

	@Test
	public void test15() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-458753, -268632065));
	}

	@Test
	public void test16() {
		GCD a = new GCD();
		assertEquals(9, a.gcd(828864117, 1801663029));
	}

	@Test
	public void test17() {
		GCD a = new GCD();
		assertEquals(1331162622, a.gcd(-1331162622, 0));
	}

	@Test
	public void test18() {
		GCD a = new GCD();
		assertEquals(256, a.gcd(545197056, 2116352));
	}

	@Test
	public void test19() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(828864128, -129));
	}

	@Test
	public void test20() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1650813282, 1718970677));
	}

	@Test
	public void test21() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-1340517886, 1053991));
	}

	@Test
	public void test22() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(-993737532, -993770300));
	}

	@Test
	public void test23() {
		GCD a = new GCD();
		assertEquals(2130706432, a.gcd(2130706432, 0));
	}

	@Test
	public void test24() {
		GCD a = new GCD();
		assertEquals(9633728, a.gcd(0, -9633728));
	}
}",Buggy
"public class GCD {
	/*@ public normal_behavior     
          @    requires d != 0;
	  @    ensures \result == n%d;
          @    pure function @*/
        public static int div(int n, int d) { 
		return n%d; 
	}

	/*@    requires 0 <= num && num <= Integer.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires Integer.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ int absolute(int num) {
		return (0 <= num) ? num : -num;
	}

        /*@ requires num1 != Integer.MAX_VALUE && num2 != Integer.MAX_VALUE && Integer.MIN_VALUE + 1 < num1 && Integer.MIN_VALUE + 1 < num2;
          @ {|  
	  @    requires num1 != 0 && num2 != 0;
	  @    old int tnum1 = absolute(num1);
	  @    old int tnum2 = absolute(num2);
	  @    old int greater = (tnum2 < tnum1) ? tnum1 : tnum2;
	  @    old int smaller = (tnum2 < tnum1) ? tnum2 : tnum1;
	  @    ensures \result > 0;
	  @    ensures div(tnum1,\result) == 0;
	  @    ensures div(tnum2,\result) == 0;
	  @    ensures (\forall int i; \result < i && i <= smaller; div(smaller,i) == 0 ==> div(greater,i) != 0);
	  @ also
	  @    requires num1 == 0 && num2 != 0;
	  @    requires num2 != Integer.MIN_VALUE;
	  @    old int tnum2 = absolute(num2);
	  @    ensures \result == tnum2;
	  @ also
	  @    requires num1 != 0 && num2 == 0;
	  @    requires num1 != Integer.MIN_VALUE;
	  @    old int tnum1 = absolute(num1);
	  @    ensures \result == tnum1;
	  @ also
	  @    requires num1 == 0 && num2 == 0;
	  @    ensures \result == -1;
          @ |} @*/
	public /*@ pure @*/ int gcd(int num1, int num2) throws IllegalArgumentException {
		int result = 1; 
	 	num1 = absolute(num1);
		num2 = absolute(num2);
	
		//@ assume div(num1, result) == 0 && div(num2, result) == 0;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		//@ maintaining result <= num1 && result <= num2;
		//@ maintaining 0 < i && i <= num1 + 1 && i<= num2 + 1; 
		//@ maintaining 0 < result && result <= i;
		//@ maintaining div(num1, result) == 0 && div(num2, result) == 0;
		//@ maintaining (\forall int j; 0 < j &&  j < i; div(num1, j) == 0 && div(num2, j) == 0 ==> j <= result);
		//@ decreases num1 - i; 
		for (int i = 1; i <= num1 && i <= num2; i++) {
            		if (div(num1,i) != 0 && div(num2,i) == 0) { // if (div(num1,i) == 0 && div(num2,i) == 0) {
               			result = i;
			}
        	}
		return result;
	} 
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JUnitGCD {

	@Test
	public void test() {
		GCD a = new GCD();
		assertEquals(839516160, a.gcd(839516160, 0));
	}

	@Test
	public void test1() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(1912602640, 1198682738));
	}

	@Test
	public void test2() {
		GCD a = new GCD();
		assertEquals(67108864, a.gcd(-67108864, 0));
	}

	@Test
	public void test3() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1769473, 301793282));
	}

	@Test
	public void test4() {
		GCD a = new GCD();
		assertEquals(360, a.gcd(2075703480, -1649035080));
	}

	@Test
	public void test5() {
		GCD a = new GCD();
		assertEquals(-1, a.gcd(0, 0));
	}

	@Test
	public void test6() {
		GCD a = new GCD();
		assertEquals(2129664, a.gcd(2129664, 0));
	}

	@Test
	public void test7() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1416128883, 543781664));
	}

	@Test
	public void test8() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(-1338093054, -117440750));
	}

	@Test
	public void test9() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(828448852, 1702038120));
	}

	@Test
	public void test10() {
		GCD a = new GCD();
		assertEquals(1291845632, a.gcd(1291845632, 0));
	}

	@Test
	public void test11() {
		GCD a = new GCD();
		assertEquals(16777216, a.gcd(0, -16777216));
	}

	@Test
	public void test12() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(643704100, 591405353));
	}

	@Test
	public void test13() {
		GCD a = new GCD();
		assertEquals(3, a.gcd(-927229341, 696188928));
	}

	@Test
	public void test14() {
		GCD a = new GCD();
		assertEquals(14286848, a.gcd(-14286848, 0));
	}

	@Test
	public void test15() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-458753, -268632065));
	}

	@Test
	public void test16() {
		GCD a = new GCD();
		assertEquals(9, a.gcd(828864117, 1801663029));
	}

	@Test
	public void test17() {
		GCD a = new GCD();
		assertEquals(1331162622, a.gcd(-1331162622, 0));
	}

	@Test
	public void test18() {
		GCD a = new GCD();
		assertEquals(256, a.gcd(545197056, 2116352));
	}

	@Test
	public void test19() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(828864128, -129));
	}

	@Test
	public void test20() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1650813282, 1718970677));
	}

	@Test
	public void test21() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-1340517886, 1053991));
	}

	@Test
	public void test22() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(-993737532, -993770300));
	}

	@Test
	public void test23() {
		GCD a = new GCD();
		assertEquals(2130706432, a.gcd(2130706432, 0));
	}

	@Test
	public void test24() {
		GCD a = new GCD();
		assertEquals(9633728, a.gcd(0, -9633728));
	}
}",Buggy
"public class GCD {
	/*@ public normal_behavior     
          @    requires d != 0;
	  @    ensures \result == n%d;
          @    pure function @*/
        public static int div(int n, int d) { 
		return n%d; 
	}

	/*@    requires 0 <= num && num <= Integer.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires Integer.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ int absolute(int num) {
		return (0 <= num) ? num : -num;
	}

        /*@ requires num1 != Integer.MAX_VALUE && num2 != Integer.MAX_VALUE && Integer.MIN_VALUE + 1 < num1 && Integer.MIN_VALUE + 1 < num2;
          @ {|  
	  @    requires num1 != 0 && num2 != 0;
	  @    old int tnum1 = absolute(num1);
	  @    old int tnum2 = absolute(num2);
	  @    old int greater = (tnum2 < tnum1) ? tnum1 : tnum2;
	  @    old int smaller = (tnum2 < tnum1) ? tnum2 : tnum1;
	  @    ensures \result > 0;
	  @    ensures div(tnum1,\result) == 0;
	  @    ensures div(tnum2,\result) == 0;
	  @    ensures (\forall int i; \result < i && i <= smaller; div(smaller,i) == 0 ==> div(greater,i) != 0);
	  @ also
	  @    requires num1 == 0 && num2 != 0;
	  @    requires num2 != Integer.MIN_VALUE;
	  @    old int tnum2 = absolute(num2);
	  @    ensures \result == tnum2;
	  @ also
	  @    requires num1 != 0 && num2 == 0;
	  @    requires num1 != Integer.MIN_VALUE;
	  @    old int tnum1 = absolute(num1);
	  @    ensures \result == tnum1;
	  @ also
	  @    requires num1 == 0 && num2 == 0;
	  @    ensures \result == -1;
          @ |} @*/
	public /*@ pure @*/ int gcd(int num1, int num2) throws IllegalArgumentException {
		int result = 1; 
	 	num1 = absolute(num1);
		num2 = absolute(num2);
	
		//@ assume div(num1, result) == 0 && div(num2, result) == 0;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		//@ maintaining result <= num1 && result <= num2;
		//@ maintaining 0 < i && i <= num1 + 1 && i<= num2 + 1; 
		//@ maintaining 0 < result && result <= i;
		//@ maintaining div(num1, result) == 0 && div(num2, result) == 0;
		//@ maintaining (\forall int j; 0 < j &&  j < i; div(num1, j) == 0 && div(num2, j) == 0 ==> j <= result);
		//@ decreases num1 - i; 
		for (int i = 1; i <= num1 && i <= num2; i++) {
            		if (div(num1,i) == 0 && div(num2,i) != 0) { // if (div(num1,i) == 0 && div(num2,i) == 0) {
               			result = i;
			}
        	}
		return result;
	} 
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JUnitGCD {

	@Test
	public void test() {
		GCD a = new GCD();
		assertEquals(839516160, a.gcd(839516160, 0));
	}

	@Test
	public void test1() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(1912602640, 1198682738));
	}

	@Test
	public void test2() {
		GCD a = new GCD();
		assertEquals(67108864, a.gcd(-67108864, 0));
	}

	@Test
	public void test3() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1769473, 301793282));
	}

	@Test
	public void test4() {
		GCD a = new GCD();
		assertEquals(360, a.gcd(2075703480, -1649035080));
	}

	@Test
	public void test5() {
		GCD a = new GCD();
		assertEquals(-1, a.gcd(0, 0));
	}

	@Test
	public void test6() {
		GCD a = new GCD();
		assertEquals(2129664, a.gcd(2129664, 0));
	}

	@Test
	public void test7() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1416128883, 543781664));
	}

	@Test
	public void test8() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(-1338093054, -117440750));
	}

	@Test
	public void test9() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(828448852, 1702038120));
	}

	@Test
	public void test10() {
		GCD a = new GCD();
		assertEquals(1291845632, a.gcd(1291845632, 0));
	}

	@Test
	public void test11() {
		GCD a = new GCD();
		assertEquals(16777216, a.gcd(0, -16777216));
	}

	@Test
	public void test12() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(643704100, 591405353));
	}

	@Test
	public void test13() {
		GCD a = new GCD();
		assertEquals(3, a.gcd(-927229341, 696188928));
	}

	@Test
	public void test14() {
		GCD a = new GCD();
		assertEquals(14286848, a.gcd(-14286848, 0));
	}

	@Test
	public void test15() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-458753, -268632065));
	}

	@Test
	public void test16() {
		GCD a = new GCD();
		assertEquals(9, a.gcd(828864117, 1801663029));
	}

	@Test
	public void test17() {
		GCD a = new GCD();
		assertEquals(1331162622, a.gcd(-1331162622, 0));
	}

	@Test
	public void test18() {
		GCD a = new GCD();
		assertEquals(256, a.gcd(545197056, 2116352));
	}

	@Test
	public void test19() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(828864128, -129));
	}

	@Test
	public void test20() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1650813282, 1718970677));
	}

	@Test
	public void test21() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-1340517886, 1053991));
	}

	@Test
	public void test22() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(-993737532, -993770300));
	}

	@Test
	public void test23() {
		GCD a = new GCD();
		assertEquals(2130706432, a.gcd(2130706432, 0));
	}

	@Test
	public void test24() {
		GCD a = new GCD();
		assertEquals(9633728, a.gcd(0, -9633728));
	}
}",Buggy
"public class GCD {
	/*@ public normal_behavior     
          @    requires d != 0;
	  @    ensures \result == n%d;
          @    pure function @*/
        public static int div(int n, int d) { 
		return (n%d == 0) ? 1 : 0; // return n%d; 
	}

	/*@    requires 0 <= num && num <= Integer.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires Integer.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ int absolute(int num) {
		return (0 <= num) ? num : -num;
	}

        /*@ requires num1 != Integer.MAX_VALUE && num2 != Integer.MAX_VALUE && Integer.MIN_VALUE + 1 < num1 && Integer.MIN_VALUE + 1 < num2;
          @ {|  
	  @    requires num1 != 0 && num2 != 0;
	  @    old int tnum1 = absolute(num1);
	  @    old int tnum2 = absolute(num2);
	  @    old int greater = (tnum2 < tnum1) ? tnum1 : tnum2;
	  @    old int smaller = (tnum2 < tnum1) ? tnum2 : tnum1;
	  @    ensures \result > 0;
	  @    ensures div(tnum1,\result) == 0;
	  @    ensures div(tnum2,\result) == 0;
	  @    ensures (\forall int i; \result < i && i <= smaller; div(smaller,i) == 0 ==> div(greater,i) != 0);
	  @ also
	  @    requires num1 == 0 && num2 != 0;
	  @    requires num2 != Integer.MIN_VALUE;
	  @    old int tnum2 = absolute(num2);
	  @    ensures \result == tnum2;
	  @ also
	  @    requires num1 != 0 && num2 == 0;
	  @    requires num1 != Integer.MIN_VALUE;
	  @    old int tnum1 = absolute(num1);
	  @    ensures \result == tnum1;
	  @ also
	  @    requires num1 == 0 && num2 == 0;
	  @    ensures \result == -1;
          @ |} @*/
	public /*@ pure @*/ int gcd(int num1, int num2) throws IllegalArgumentException {
		int result = 1; 
	 	num1 = absolute(num1);
		num2 = absolute(num2);
	
		//@ assume div(num1, result) == 0 && div(num2, result) == 0;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		//@ maintaining result <= num1 && result <= num2;
		//@ maintaining 0 < i && i <= num1 + 1 && i<= num2 + 1; 
		//@ maintaining 0 < result && result <= i;
		//@ maintaining div(num1, result) == 0 && div(num2, result) == 0;
		//@ maintaining (\forall int j; 0 < j &&  j < i; div(num1, j) == 0 && div(num2, j) == 0 ==> j <= result);
		//@ decreases num1 - i; 
		for (int i = 1; i <= num1 && i <= num2; i++) {
            		if (div(num1,i) == 0 && div(num2,i) == 0) {
               			result = i;
			}
        	}
		return result;
	} 
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JUnitGCD {

	@Test
	public void test() {
		GCD a = new GCD();
		assertEquals(839516160, a.gcd(839516160, 0));
	}

	@Test
	public void test1() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(1912602640, 1198682738));
	}

	@Test
	public void test2() {
		GCD a = new GCD();
		assertEquals(67108864, a.gcd(-67108864, 0));
	}

	@Test
	public void test3() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1769473, 301793282));
	}

	@Test
	public void test4() {
		GCD a = new GCD();
		assertEquals(360, a.gcd(2075703480, -1649035080));
	}

	@Test
	public void test5() {
		GCD a = new GCD();
		assertEquals(-1, a.gcd(0, 0));
	}

	@Test
	public void test6() {
		GCD a = new GCD();
		assertEquals(2129664, a.gcd(2129664, 0));
	}

	@Test
	public void test7() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1416128883, 543781664));
	}

	@Test
	public void test8() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(-1338093054, -117440750));
	}

	@Test
	public void test9() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(828448852, 1702038120));
	}

	@Test
	public void test10() {
		GCD a = new GCD();
		assertEquals(1291845632, a.gcd(1291845632, 0));
	}

	@Test
	public void test11() {
		GCD a = new GCD();
		assertEquals(16777216, a.gcd(0, -16777216));
	}

	@Test
	public void test12() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(643704100, 591405353));
	}

	@Test
	public void test13() {
		GCD a = new GCD();
		assertEquals(3, a.gcd(-927229341, 696188928));
	}

	@Test
	public void test14() {
		GCD a = new GCD();
		assertEquals(14286848, a.gcd(-14286848, 0));
	}

	@Test
	public void test15() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-458753, -268632065));
	}

	@Test
	public void test16() {
		GCD a = new GCD();
		assertEquals(9, a.gcd(828864117, 1801663029));
	}

	@Test
	public void test17() {
		GCD a = new GCD();
		assertEquals(1331162622, a.gcd(-1331162622, 0));
	}

	@Test
	public void test18() {
		GCD a = new GCD();
		assertEquals(256, a.gcd(545197056, 2116352));
	}

	@Test
	public void test19() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(828864128, -129));
	}

	@Test
	public void test20() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1650813282, 1718970677));
	}

	@Test
	public void test21() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-1340517886, 1053991));
	}

	@Test
	public void test22() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(-993737532, -993770300));
	}

	@Test
	public void test23() {
		GCD a = new GCD();
		assertEquals(2130706432, a.gcd(2130706432, 0));
	}

	@Test
	public void test24() {
		GCD a = new GCD();
		assertEquals(9633728, a.gcd(0, -9633728));
	}
}",Buggy
"public class GCD {
	/*@ public normal_behavior     
          @    requires d != 0;
	  @    ensures \result == n%d;
          @    pure function @*/
        public static int div(int n, int d) { 
		return n%d; 
	}

	/*@    requires 0 <= num && num <= Integer.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires Integer.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ int absolute(int num) {
		return (0 <= num) ? num : -num;
	}

        /*@ requires num1 != Integer.MAX_VALUE && num2 != Integer.MAX_VALUE && Integer.MIN_VALUE + 1 < num1 && Integer.MIN_VALUE + 1 < num2;
          @ {|  
	  @    requires num1 != 0 && num2 != 0;
	  @    old int tnum1 = absolute(num1);
	  @    old int tnum2 = absolute(num2);
	  @    old int greater = (tnum2 < tnum1) ? tnum1 : tnum2;
	  @    old int smaller = (tnum2 < tnum1) ? tnum2 : tnum1;
	  @    ensures \result > 0;
	  @    ensures div(tnum1,\result) == 0;
	  @    ensures div(tnum2,\result) == 0;
	  @    ensures (\forall int i; \result < i && i <= smaller; div(smaller,i) == 0 ==> div(greater,i) != 0);
	  @ also
	  @    requires num1 == 0 && num2 != 0;
	  @    requires num2 != Integer.MIN_VALUE;
	  @    old int tnum2 = absolute(num2);
	  @    ensures \result == tnum2;
	  @ also
	  @    requires num1 != 0 && num2 == 0;
	  @    requires num1 != Integer.MIN_VALUE;
	  @    old int tnum1 = absolute(num1);
	  @    ensures \result == tnum1;
	  @ also
	  @    requires num1 == 0 && num2 == 0;
	  @    ensures \result == -1;
          @ |} @*/
	public /*@ pure @*/ int gcd(int num1, int num2) throws IllegalArgumentException {
		int result = 1; 
	 	num1 = absolute(num1);
		num2 = absolute(num2);
	
		//@ assume div(num1, result) == 0 && div(num2, result) == 0;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		//@ maintaining result <= num1 && result <= num2;
		//@ maintaining 0 < i && i <= num1 + 1 && i<= num2 + 1; 
		//@ maintaining 0 < result && result <= i;
		//@ maintaining div(num1, result) == 0 && div(num2, result) == 0;
		//@ maintaining (\forall int j; 0 < j &&  j < i; div(num1, j) == 0 && div(num2, j) == 0 ==> j <= result);
		//@ decreases num1 - i; 
		for (int i = 1; i <= num1 && i <= num2; i++) {
            		if (div(num1,i) == 0 && div(num2,i) == 0) {
               			result = i;
			}
        	}
		return ((result == 0) ? 1 : 0); // return result;
	} 
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JUnitGCD {

	@Test
	public void test() {
		GCD a = new GCD();
		assertEquals(839516160, a.gcd(839516160, 0));
	}

	@Test
	public void test1() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(1912602640, 1198682738));
	}

	@Test
	public void test2() {
		GCD a = new GCD();
		assertEquals(67108864, a.gcd(-67108864, 0));
	}

	@Test
	public void test3() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1769473, 301793282));
	}

	@Test
	public void test4() {
		GCD a = new GCD();
		assertEquals(360, a.gcd(2075703480, -1649035080));
	}

	@Test
	public void test5() {
		GCD a = new GCD();
		assertEquals(-1, a.gcd(0, 0));
	}

	@Test
	public void test6() {
		GCD a = new GCD();
		assertEquals(2129664, a.gcd(2129664, 0));
	}

	@Test
	public void test7() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1416128883, 543781664));
	}

	@Test
	public void test8() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(-1338093054, -117440750));
	}

	@Test
	public void test9() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(828448852, 1702038120));
	}

	@Test
	public void test10() {
		GCD a = new GCD();
		assertEquals(1291845632, a.gcd(1291845632, 0));
	}

	@Test
	public void test11() {
		GCD a = new GCD();
		assertEquals(16777216, a.gcd(0, -16777216));
	}

	@Test
	public void test12() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(643704100, 591405353));
	}

	@Test
	public void test13() {
		GCD a = new GCD();
		assertEquals(3, a.gcd(-927229341, 696188928));
	}

	@Test
	public void test14() {
		GCD a = new GCD();
		assertEquals(14286848, a.gcd(-14286848, 0));
	}

	@Test
	public void test15() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-458753, -268632065));
	}

	@Test
	public void test16() {
		GCD a = new GCD();
		assertEquals(9, a.gcd(828864117, 1801663029));
	}

	@Test
	public void test17() {
		GCD a = new GCD();
		assertEquals(1331162622, a.gcd(-1331162622, 0));
	}

	@Test
	public void test18() {
		GCD a = new GCD();
		assertEquals(256, a.gcd(545197056, 2116352));
	}

	@Test
	public void test19() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(828864128, -129));
	}

	@Test
	public void test20() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1650813282, 1718970677));
	}

	@Test
	public void test21() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-1340517886, 1053991));
	}

	@Test
	public void test22() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(-993737532, -993770300));
	}

	@Test
	public void test23() {
		GCD a = new GCD();
		assertEquals(2130706432, a.gcd(2130706432, 0));
	}

	@Test
	public void test24() {
		GCD a = new GCD();
		assertEquals(9633728, a.gcd(0, -9633728));
	}
}",Buggy
"public class GCD {
	/*@ public normal_behavior     
          @    requires d != 0;
	  @    ensures \result == n%d;
          @    pure function @*/
        public static int div(int n, int d) { 
		return n%d; 
	}

	/*@    requires 0 <= num && num <= Integer.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires Integer.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ int absolute(int num) {
		return (0 <= num) ? num : num; // return (0 <= num) ? num : -num;
	}

        /*@ requires num1 != Integer.MAX_VALUE && num2 != Integer.MAX_VALUE && Integer.MIN_VALUE + 1 < num1 && Integer.MIN_VALUE + 1 < num2;
          @ {|  
	  @    requires num1 != 0 && num2 != 0;
	  @    old int tnum1 = absolute(num1);
	  @    old int tnum2 = absolute(num2);
	  @    old int greater = (tnum2 < tnum1) ? tnum1 : tnum2;
	  @    old int smaller = (tnum2 < tnum1) ? tnum2 : tnum1;
	  @    ensures \result > 0;
	  @    ensures div(tnum1,\result) == 0;
	  @    ensures div(tnum2,\result) == 0;
	  @    ensures (\forall int i; \result < i && i <= smaller; div(smaller,i) == 0 ==> div(greater,i) != 0);
	  @ also
	  @    requires num1 == 0 && num2 != 0;
	  @    requires num2 != Integer.MIN_VALUE;
	  @    old int tnum2 = absolute(num2);
	  @    ensures \result == tnum2;
	  @ also
	  @    requires num1 != 0 && num2 == 0;
	  @    requires num1 != Integer.MIN_VALUE;
	  @    old int tnum1 = absolute(num1);
	  @    ensures \result == tnum1;
	  @ also
	  @    requires num1 == 0 && num2 == 0;
	  @    ensures \result == -1;
          @ |} @*/
	public /*@ pure @*/ int gcd(int num1, int num2) throws IllegalArgumentException {
		int result = 1; 
	 	num1 = absolute(num1);
		num2 = absolute(num2);
	
		//@ assume div(num1, result) == 0 && div(num2, result) == 0;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		//@ maintaining result <= num1 && result <= num2;
		//@ maintaining 0 < i && i <= num1 + 1 && i<= num2 + 1; 
		//@ maintaining 0 < result && result <= i;
		//@ maintaining div(num1, result) == 0 && div(num2, result) == 0;
		//@ maintaining (\forall int j; 0 < j &&  j < i; div(num1, j) == 0 && div(num2, j) == 0 ==> j <= result);
		//@ decreases num1 - i; 
		for (int i = 1; i <= num1 && i <= num2; i++) {
            		if (div(num1,i) == 0 && div(num2,i) == 0) {
               			result = i;
			}
        	}
		return result;
	} 
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JUnitGCD {

	@Test
	public void test() {
		GCD a = new GCD();
		assertEquals(839516160, a.gcd(839516160, 0));
	}

	@Test
	public void test1() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(1912602640, 1198682738));
	}

	@Test
	public void test2() {
		GCD a = new GCD();
		assertEquals(67108864, a.gcd(-67108864, 0));
	}

	@Test
	public void test3() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1769473, 301793282));
	}

	@Test
	public void test4() {
		GCD a = new GCD();
		assertEquals(360, a.gcd(2075703480, -1649035080));
	}

	@Test
	public void test5() {
		GCD a = new GCD();
		assertEquals(-1, a.gcd(0, 0));
	}

	@Test
	public void test6() {
		GCD a = new GCD();
		assertEquals(2129664, a.gcd(2129664, 0));
	}

	@Test
	public void test7() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1416128883, 543781664));
	}

	@Test
	public void test8() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(-1338093054, -117440750));
	}

	@Test
	public void test9() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(828448852, 1702038120));
	}

	@Test
	public void test10() {
		GCD a = new GCD();
		assertEquals(1291845632, a.gcd(1291845632, 0));
	}

	@Test
	public void test11() {
		GCD a = new GCD();
		assertEquals(16777216, a.gcd(0, -16777216));
	}

	@Test
	public void test12() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(643704100, 591405353));
	}

	@Test
	public void test13() {
		GCD a = new GCD();
		assertEquals(3, a.gcd(-927229341, 696188928));
	}

	@Test
	public void test14() {
		GCD a = new GCD();
		assertEquals(14286848, a.gcd(-14286848, 0));
	}

	@Test
	public void test15() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-458753, -268632065));
	}

	@Test
	public void test16() {
		GCD a = new GCD();
		assertEquals(9, a.gcd(828864117, 1801663029));
	}

	@Test
	public void test17() {
		GCD a = new GCD();
		assertEquals(1331162622, a.gcd(-1331162622, 0));
	}

	@Test
	public void test18() {
		GCD a = new GCD();
		assertEquals(256, a.gcd(545197056, 2116352));
	}

	@Test
	public void test19() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(828864128, -129));
	}

	@Test
	public void test20() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1650813282, 1718970677));
	}

	@Test
	public void test21() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-1340517886, 1053991));
	}

	@Test
	public void test22() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(-993737532, -993770300));
	}

	@Test
	public void test23() {
		GCD a = new GCD();
		assertEquals(2130706432, a.gcd(2130706432, 0));
	}

	@Test
	public void test24() {
		GCD a = new GCD();
		assertEquals(9633728, a.gcd(0, -9633728));
	}
}",Buggy
"public class GCD {
	/*@ public normal_behavior     
          @    requires d != 0;
	  @    ensures \result == n%d;
          @    pure function @*/
        public static int div(int n, int d) { 
		return n%d; 
	}

	/*@    requires 0 <= num && num <= Integer.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires Integer.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ int absolute(int num) {
		return (0 > num) ? num : -num; // return (0 <= num) ? num : -num;
	}

        /*@ requires num1 != Integer.MAX_VALUE && num2 != Integer.MAX_VALUE && Integer.MIN_VALUE + 1 < num1 && Integer.MIN_VALUE + 1 < num2;
          @ {|  
	  @    requires num1 != 0 && num2 != 0;
	  @    old int tnum1 = absolute(num1);
	  @    old int tnum2 = absolute(num2);
	  @    old int greater = (tnum2 < tnum1) ? tnum1 : tnum2;
	  @    old int smaller = (tnum2 < tnum1) ? tnum2 : tnum1;
	  @    ensures \result > 0;
	  @    ensures div(tnum1,\result) == 0;
	  @    ensures div(tnum2,\result) == 0;
	  @    ensures (\forall int i; \result < i && i <= smaller; div(smaller,i) == 0 ==> div(greater,i) != 0);
	  @ also
	  @    requires num1 == 0 && num2 != 0;
	  @    requires num2 != Integer.MIN_VALUE;
	  @    old int tnum2 = absolute(num2);
	  @    ensures \result == tnum2;
	  @ also
	  @    requires num1 != 0 && num2 == 0;
	  @    requires num1 != Integer.MIN_VALUE;
	  @    old int tnum1 = absolute(num1);
	  @    ensures \result == tnum1;
	  @ also
	  @    requires num1 == 0 && num2 == 0;
	  @    ensures \result == -1;
          @ |} @*/
	public /*@ pure @*/ int gcd(int num1, int num2) throws IllegalArgumentException {
		int result = 1; 
	 	num1 = absolute(num1);
		num2 = absolute(num2);
	
		//@ assume div(num1, result) == 0 && div(num2, result) == 0;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		//@ maintaining result <= num1 && result <= num2;
		//@ maintaining 0 < i && i <= num1 + 1 && i<= num2 + 1; 
		//@ maintaining 0 < result && result <= i;
		//@ maintaining div(num1, result) == 0 && div(num2, result) == 0;
		//@ maintaining (\forall int j; 0 < j &&  j < i; div(num1, j) == 0 && div(num2, j) == 0 ==> j <= result);
		//@ decreases num1 - i; 
		for (int i = 1; i <= num1 && i <= num2; i++) {
            		if (div(num1,i) == 0 && div(num2,i) == 0) {
               			result = i;
			}
        	}
		return result;
	} 
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JUnitGCD {

	@Test
	public void test() {
		GCD a = new GCD();
		assertEquals(839516160, a.gcd(839516160, 0));
	}

	@Test
	public void test1() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(1912602640, 1198682738));
	}

	@Test
	public void test2() {
		GCD a = new GCD();
		assertEquals(67108864, a.gcd(-67108864, 0));
	}

	@Test
	public void test3() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1769473, 301793282));
	}

	@Test
	public void test4() {
		GCD a = new GCD();
		assertEquals(360, a.gcd(2075703480, -1649035080));
	}

	@Test
	public void test5() {
		GCD a = new GCD();
		assertEquals(-1, a.gcd(0, 0));
	}

	@Test
	public void test6() {
		GCD a = new GCD();
		assertEquals(2129664, a.gcd(2129664, 0));
	}

	@Test
	public void test7() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1416128883, 543781664));
	}

	@Test
	public void test8() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(-1338093054, -117440750));
	}

	@Test
	public void test9() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(828448852, 1702038120));
	}

	@Test
	public void test10() {
		GCD a = new GCD();
		assertEquals(1291845632, a.gcd(1291845632, 0));
	}

	@Test
	public void test11() {
		GCD a = new GCD();
		assertEquals(16777216, a.gcd(0, -16777216));
	}

	@Test
	public void test12() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(643704100, 591405353));
	}

	@Test
	public void test13() {
		GCD a = new GCD();
		assertEquals(3, a.gcd(-927229341, 696188928));
	}

	@Test
	public void test14() {
		GCD a = new GCD();
		assertEquals(14286848, a.gcd(-14286848, 0));
	}

	@Test
	public void test15() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-458753, -268632065));
	}

	@Test
	public void test16() {
		GCD a = new GCD();
		assertEquals(9, a.gcd(828864117, 1801663029));
	}

	@Test
	public void test17() {
		GCD a = new GCD();
		assertEquals(1331162622, a.gcd(-1331162622, 0));
	}

	@Test
	public void test18() {
		GCD a = new GCD();
		assertEquals(256, a.gcd(545197056, 2116352));
	}

	@Test
	public void test19() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(828864128, -129));
	}

	@Test
	public void test20() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1650813282, 1718970677));
	}

	@Test
	public void test21() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-1340517886, 1053991));
	}

	@Test
	public void test22() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(-993737532, -993770300));
	}

	@Test
	public void test23() {
		GCD a = new GCD();
		assertEquals(2130706432, a.gcd(2130706432, 0));
	}

	@Test
	public void test24() {
		GCD a = new GCD();
		assertEquals(9633728, a.gcd(0, -9633728));
	}
}",Buggy
"public class GCD {
	/*@ public normal_behavior     
          @    requires d != 0;
	  @    ensures \result == n%d;
          @    pure function @*/
        public static int div(int n, int d) { 
		return n%d; 
	}

	/*@    requires 0 <= num && num <= Integer.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires Integer.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ int absolute(int num) {
		return (num == 0) ? 1 : 0; // return (0 <= num) ? num : -num;
	}

        /*@ requires num1 != Integer.MAX_VALUE && num2 != Integer.MAX_VALUE && Integer.MIN_VALUE + 1 < num1 && Integer.MIN_VALUE + 1 < num2;
          @ {|  
	  @    requires num1 != 0 && num2 != 0;
	  @    old int tnum1 = absolute(num1);
	  @    old int tnum2 = absolute(num2);
	  @    old int greater = (tnum2 < tnum1) ? tnum1 : tnum2;
	  @    old int smaller = (tnum2 < tnum1) ? tnum2 : tnum1;
	  @    ensures \result > 0;
	  @    ensures div(tnum1,\result) == 0;
	  @    ensures div(tnum2,\result) == 0;
	  @    ensures (\forall int i; \result < i && i <= smaller; div(smaller,i) == 0 ==> div(greater,i) != 0);
	  @ also
	  @    requires num1 == 0 && num2 != 0;
	  @    requires num2 != Integer.MIN_VALUE;
	  @    old int tnum2 = absolute(num2);
	  @    ensures \result == tnum2;
	  @ also
	  @    requires num1 != 0 && num2 == 0;
	  @    requires num1 != Integer.MIN_VALUE;
	  @    old int tnum1 = absolute(num1);
	  @    ensures \result == tnum1;
	  @ also
	  @    requires num1 == 0 && num2 == 0;
	  @    ensures \result == -1;
          @ |} @*/
	public /*@ pure @*/ int gcd(int num1, int num2) throws IllegalArgumentException {
		int result = 1; 
	 	num1 = absolute(num1);
		num2 = absolute(num2);
	
		//@ assume div(num1, result) == 0 && div(num2, result) == 0;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		//@ maintaining result <= num1 && result <= num2;
		//@ maintaining 0 < i && i <= num1 + 1 && i<= num2 + 1; 
		//@ maintaining 0 < result && result <= i;
		//@ maintaining div(num1, result) == 0 && div(num2, result) == 0;
		//@ maintaining (\forall int j; 0 < j &&  j < i; div(num1, j) == 0 && div(num2, j) == 0 ==> j <= result);
		//@ decreases num1 - i; 
		for (int i = 1; i <= num1 && i <= num2; i++) {
            		if (div(num1,i) == 0 && div(num2,i) == 0) {
               			result = i;
			}
        	}
		return result;
	} 
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JUnitGCD {

	@Test
	public void test() {
		GCD a = new GCD();
		assertEquals(839516160, a.gcd(839516160, 0));
	}

	@Test
	public void test1() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(1912602640, 1198682738));
	}

	@Test
	public void test2() {
		GCD a = new GCD();
		assertEquals(67108864, a.gcd(-67108864, 0));
	}

	@Test
	public void test3() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1769473, 301793282));
	}

	@Test
	public void test4() {
		GCD a = new GCD();
		assertEquals(360, a.gcd(2075703480, -1649035080));
	}

	@Test
	public void test5() {
		GCD a = new GCD();
		assertEquals(-1, a.gcd(0, 0));
	}

	@Test
	public void test6() {
		GCD a = new GCD();
		assertEquals(2129664, a.gcd(2129664, 0));
	}

	@Test
	public void test7() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1416128883, 543781664));
	}

	@Test
	public void test8() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(-1338093054, -117440750));
	}

	@Test
	public void test9() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(828448852, 1702038120));
	}

	@Test
	public void test10() {
		GCD a = new GCD();
		assertEquals(1291845632, a.gcd(1291845632, 0));
	}

	@Test
	public void test11() {
		GCD a = new GCD();
		assertEquals(16777216, a.gcd(0, -16777216));
	}

	@Test
	public void test12() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(643704100, 591405353));
	}

	@Test
	public void test13() {
		GCD a = new GCD();
		assertEquals(3, a.gcd(-927229341, 696188928));
	}

	@Test
	public void test14() {
		GCD a = new GCD();
		assertEquals(14286848, a.gcd(-14286848, 0));
	}

	@Test
	public void test15() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-458753, -268632065));
	}

	@Test
	public void test16() {
		GCD a = new GCD();
		assertEquals(9, a.gcd(828864117, 1801663029));
	}

	@Test
	public void test17() {
		GCD a = new GCD();
		assertEquals(1331162622, a.gcd(-1331162622, 0));
	}

	@Test
	public void test18() {
		GCD a = new GCD();
		assertEquals(256, a.gcd(545197056, 2116352));
	}

	@Test
	public void test19() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(828864128, -129));
	}

	@Test
	public void test20() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1650813282, 1718970677));
	}

	@Test
	public void test21() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-1340517886, 1053991));
	}

	@Test
	public void test22() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(-993737532, -993770300));
	}

	@Test
	public void test23() {
		GCD a = new GCD();
		assertEquals(2130706432, a.gcd(2130706432, 0));
	}

	@Test
	public void test24() {
		GCD a = new GCD();
		assertEquals(9633728, a.gcd(0, -9633728));
	}
}",Buggy
"public class GCD {
	/*@ public normal_behavior     
          @    requires d != 0;
	  @    ensures \result == n%d;
          @    pure function @*/
        public static int div(int n, int d) { 
		return n%d; 
	}

	/*@    requires 0 <= num && num <= Integer.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires Integer.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ int absolute(int num) {
		return (0 <= num) ? num : -num;
	}

        /*@ requires num1 != Integer.MAX_VALUE && num2 != Integer.MAX_VALUE && Integer.MIN_VALUE + 1 < num1 && Integer.MIN_VALUE + 1 < num2;
          @ {|  
	  @    requires num1 != 0 && num2 != 0;
	  @    old int tnum1 = absolute(num1);
	  @    old int tnum2 = absolute(num2);
	  @    old int greater = (tnum2 < tnum1) ? tnum1 : tnum2;
	  @    old int smaller = (tnum2 < tnum1) ? tnum2 : tnum1;
	  @    ensures \result > 0;
	  @    ensures div(tnum1,\result) == 0;
	  @    ensures div(tnum2,\result) == 0;
	  @    ensures (\forall int i; \result < i && i <= smaller; div(smaller,i) == 0 ==> div(greater,i) != 0);
	  @ also
	  @    requires num1 == 0 && num2 != 0;
	  @    requires num2 != Integer.MIN_VALUE;
	  @    old int tnum2 = absolute(num2);
	  @    ensures \result == tnum2;
	  @ also
	  @    requires num1 != 0 && num2 == 0;
	  @    requires num1 != Integer.MIN_VALUE;
	  @    old int tnum1 = absolute(num1);
	  @    ensures \result == tnum1;
	  @ also
	  @    requires num1 == 0 && num2 == 0;
	  @    ensures \result == -1;
          @ |} @*/
	public /*@ pure @*/ int gcd(int num1, int num2) throws IllegalArgumentException {
		int result = 1; 
	 	num1 = absolute(num1);
		num2 = absolute(num2);
	
		//@ assume div(num1, result) == 0 && div(num2, result) == 0;

		if (num1 != 0 && num2 == 0) { // if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		//@ maintaining result <= num1 && result <= num2;
		//@ maintaining 0 < i && i <= num1 + 1 && i<= num2 + 1; 
		//@ maintaining 0 < result && result <= i;
		//@ maintaining div(num1, result) == 0 && div(num2, result) == 0;
		//@ maintaining (\forall int j; 0 < j &&  j < i; div(num1, j) == 0 && div(num2, j) == 0 ==> j <= result);
		//@ decreases num1 - i; 
		for (int i = 1; i <= num1 && i <= num2; i++) {
            		if (div(num1,i) == 0 && div(num2,i) == 0) {
               			result = i;
			}
        	}
		return result;
	} 
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JUnitGCD {

	@Test
	public void test() {
		GCD a = new GCD();
		assertEquals(839516160, a.gcd(839516160, 0));
	}

	@Test
	public void test1() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(1912602640, 1198682738));
	}

	@Test
	public void test2() {
		GCD a = new GCD();
		assertEquals(67108864, a.gcd(-67108864, 0));
	}

	@Test
	public void test3() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1769473, 301793282));
	}

	@Test
	public void test4() {
		GCD a = new GCD();
		assertEquals(360, a.gcd(2075703480, -1649035080));
	}

	@Test
	public void test5() {
		GCD a = new GCD();
		assertEquals(-1, a.gcd(0, 0));
	}

	@Test
	public void test6() {
		GCD a = new GCD();
		assertEquals(2129664, a.gcd(2129664, 0));
	}

	@Test
	public void test7() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1416128883, 543781664));
	}

	@Test
	public void test8() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(-1338093054, -117440750));
	}

	@Test
	public void test9() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(828448852, 1702038120));
	}

	@Test
	public void test10() {
		GCD a = new GCD();
		assertEquals(1291845632, a.gcd(1291845632, 0));
	}

	@Test
	public void test11() {
		GCD a = new GCD();
		assertEquals(16777216, a.gcd(0, -16777216));
	}

	@Test
	public void test12() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(643704100, 591405353));
	}

	@Test
	public void test13() {
		GCD a = new GCD();
		assertEquals(3, a.gcd(-927229341, 696188928));
	}

	@Test
	public void test14() {
		GCD a = new GCD();
		assertEquals(14286848, a.gcd(-14286848, 0));
	}

	@Test
	public void test15() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-458753, -268632065));
	}

	@Test
	public void test16() {
		GCD a = new GCD();
		assertEquals(9, a.gcd(828864117, 1801663029));
	}

	@Test
	public void test17() {
		GCD a = new GCD();
		assertEquals(1331162622, a.gcd(-1331162622, 0));
	}

	@Test
	public void test18() {
		GCD a = new GCD();
		assertEquals(256, a.gcd(545197056, 2116352));
	}

	@Test
	public void test19() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(828864128, -129));
	}

	@Test
	public void test20() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1650813282, 1718970677));
	}

	@Test
	public void test21() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-1340517886, 1053991));
	}

	@Test
	public void test22() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(-993737532, -993770300));
	}

	@Test
	public void test23() {
		GCD a = new GCD();
		assertEquals(2130706432, a.gcd(2130706432, 0));
	}

	@Test
	public void test24() {
		GCD a = new GCD();
		assertEquals(9633728, a.gcd(0, -9633728));
	}
}",Buggy
"public class GCD {
	/*@ public normal_behavior     
          @    requires d != 0;
	  @    ensures \result == n%d;
          @    pure function @*/
        public static int div(int n, int d) { 
		return n%d; 
	}

	/*@    requires 0 <= num && num <= Integer.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires Integer.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ int absolute(int num) {
		return (0 <= num) ? num : -num;
	}

        /*@ requires num1 != Integer.MAX_VALUE && num2 != Integer.MAX_VALUE && Integer.MIN_VALUE + 1 < num1 && Integer.MIN_VALUE + 1 < num2;
          @ {|  
	  @    requires num1 != 0 && num2 != 0;
	  @    old int tnum1 = absolute(num1);
	  @    old int tnum2 = absolute(num2);
	  @    old int greater = (tnum2 < tnum1) ? tnum1 : tnum2;
	  @    old int smaller = (tnum2 < tnum1) ? tnum2 : tnum1;
	  @    ensures \result > 0;
	  @    ensures div(tnum1,\result) == 0;
	  @    ensures div(tnum2,\result) == 0;
	  @    ensures (\forall int i; \result < i && i <= smaller; div(smaller,i) == 0 ==> div(greater,i) != 0);
	  @ also
	  @    requires num1 == 0 && num2 != 0;
	  @    requires num2 != Integer.MIN_VALUE;
	  @    old int tnum2 = absolute(num2);
	  @    ensures \result == tnum2;
	  @ also
	  @    requires num1 != 0 && num2 == 0;
	  @    requires num1 != Integer.MIN_VALUE;
	  @    old int tnum1 = absolute(num1);
	  @    ensures \result == tnum1;
	  @ also
	  @    requires num1 == 0 && num2 == 0;
	  @    ensures \result == -1;
          @ |} @*/
	public /*@ pure @*/ int gcd(int num1, int num2) throws IllegalArgumentException {
		int result = 1; 
	 	num1 = absolute(num1);
		num2 = absolute(num2);
	
		//@ assume div(num1, result) == 0 && div(num2, result) == 0;

		if (num1 == 0 && num2 != 0) { // if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		//@ maintaining result <= num1 && result <= num2;
		//@ maintaining 0 < i && i <= num1 + 1 && i<= num2 + 1; 
		//@ maintaining 0 < result && result <= i;
		//@ maintaining div(num1, result) == 0 && div(num2, result) == 0;
		//@ maintaining (\forall int j; 0 < j &&  j < i; div(num1, j) == 0 && div(num2, j) == 0 ==> j <= result);
		//@ decreases num1 - i; 
		for (int i = 1; i <= num1 && i <= num2; i++) {
            		if (div(num1,i) == 0 && div(num2,i) == 0) {
               			result = i;
			}
        	}
		return result;
	} 
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JUnitGCD {

	@Test
	public void test() {
		GCD a = new GCD();
		assertEquals(839516160, a.gcd(839516160, 0));
	}

	@Test
	public void test1() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(1912602640, 1198682738));
	}

	@Test
	public void test2() {
		GCD a = new GCD();
		assertEquals(67108864, a.gcd(-67108864, 0));
	}

	@Test
	public void test3() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1769473, 301793282));
	}

	@Test
	public void test4() {
		GCD a = new GCD();
		assertEquals(360, a.gcd(2075703480, -1649035080));
	}

	@Test
	public void test5() {
		GCD a = new GCD();
		assertEquals(-1, a.gcd(0, 0));
	}

	@Test
	public void test6() {
		GCD a = new GCD();
		assertEquals(2129664, a.gcd(2129664, 0));
	}

	@Test
	public void test7() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1416128883, 543781664));
	}

	@Test
	public void test8() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(-1338093054, -117440750));
	}

	@Test
	public void test9() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(828448852, 1702038120));
	}

	@Test
	public void test10() {
		GCD a = new GCD();
		assertEquals(1291845632, a.gcd(1291845632, 0));
	}

	@Test
	public void test11() {
		GCD a = new GCD();
		assertEquals(16777216, a.gcd(0, -16777216));
	}

	@Test
	public void test12() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(643704100, 591405353));
	}

	@Test
	public void test13() {
		GCD a = new GCD();
		assertEquals(3, a.gcd(-927229341, 696188928));
	}

	@Test
	public void test14() {
		GCD a = new GCD();
		assertEquals(14286848, a.gcd(-14286848, 0));
	}

	@Test
	public void test15() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-458753, -268632065));
	}

	@Test
	public void test16() {
		GCD a = new GCD();
		assertEquals(9, a.gcd(828864117, 1801663029));
	}

	@Test
	public void test17() {
		GCD a = new GCD();
		assertEquals(1331162622, a.gcd(-1331162622, 0));
	}

	@Test
	public void test18() {
		GCD a = new GCD();
		assertEquals(256, a.gcd(545197056, 2116352));
	}

	@Test
	public void test19() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(828864128, -129));
	}

	@Test
	public void test20() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1650813282, 1718970677));
	}

	@Test
	public void test21() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-1340517886, 1053991));
	}

	@Test
	public void test22() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(-993737532, -993770300));
	}

	@Test
	public void test23() {
		GCD a = new GCD();
		assertEquals(2130706432, a.gcd(2130706432, 0));
	}

	@Test
	public void test24() {
		GCD a = new GCD();
		assertEquals(9633728, a.gcd(0, -9633728));
	}
}",Buggy
"public class GCD {
	/*@ public normal_behavior     
          @    requires d != 0;
	  @    ensures \result == n%d;
          @    pure function @*/
        public static int div(int n, int d) { 
		return n%d; 
	}

	/*@    requires 0 <= num && num <= Integer.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires Integer.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ int absolute(int num) {
		return (0 <= num) ? num : -num;
	}

        /*@ requires num1 != Integer.MAX_VALUE && num2 != Integer.MAX_VALUE && Integer.MIN_VALUE + 1 < num1 && Integer.MIN_VALUE + 1 < num2;
          @ {|  
	  @    requires num1 != 0 && num2 != 0;
	  @    old int tnum1 = absolute(num1);
	  @    old int tnum2 = absolute(num2);
	  @    old int greater = (tnum2 < tnum1) ? tnum1 : tnum2;
	  @    old int smaller = (tnum2 < tnum1) ? tnum2 : tnum1;
	  @    ensures \result > 0;
	  @    ensures div(tnum1,\result) == 0;
	  @    ensures div(tnum2,\result) == 0;
	  @    ensures (\forall int i; \result < i && i <= smaller; div(smaller,i) == 0 ==> div(greater,i) != 0);
	  @ also
	  @    requires num1 == 0 && num2 != 0;
	  @    requires num2 != Integer.MIN_VALUE;
	  @    old int tnum2 = absolute(num2);
	  @    ensures \result == tnum2;
	  @ also
	  @    requires num1 != 0 && num2 == 0;
	  @    requires num1 != Integer.MIN_VALUE;
	  @    old int tnum1 = absolute(num1);
	  @    ensures \result == tnum1;
	  @ also
	  @    requires num1 == 0 && num2 == 0;
	  @    ensures \result == -1;
          @ |} @*/
	public /*@ pure @*/ int gcd(int num1, int num2) throws IllegalArgumentException {
		int result = 1; 
	 	num1 = absolute(num1);
		num2 = absolute(num2);
	
		//@ assume div(num1, result) == 0 && div(num2, result) == 0;

		if (num1 == 0 && num2 == 0) {
			return 0; // return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		//@ maintaining result <= num1 && result <= num2;
		//@ maintaining 0 < i && i <= num1 + 1 && i<= num2 + 1; 
		//@ maintaining 0 < result && result <= i;
		//@ maintaining div(num1, result) == 0 && div(num2, result) == 0;
		//@ maintaining (\forall int j; 0 < j &&  j < i; div(num1, j) == 0 && div(num2, j) == 0 ==> j <= result);
		//@ decreases num1 - i; 
		for (int i = 1; i <= num1 && i <= num2; i++) {
            		if (div(num1,i) == 0 && div(num2,i) == 0) {
               			result = i;
			}
        	}
		return result;
	} 
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JUnitGCD {

	@Test
	public void test() {
		GCD a = new GCD();
		assertEquals(839516160, a.gcd(839516160, 0));
	}

	@Test
	public void test1() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(1912602640, 1198682738));
	}

	@Test
	public void test2() {
		GCD a = new GCD();
		assertEquals(67108864, a.gcd(-67108864, 0));
	}

	@Test
	public void test3() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1769473, 301793282));
	}

	@Test
	public void test4() {
		GCD a = new GCD();
		assertEquals(360, a.gcd(2075703480, -1649035080));
	}

	@Test
	public void test5() {
		GCD a = new GCD();
		assertEquals(-1, a.gcd(0, 0));
	}

	@Test
	public void test6() {
		GCD a = new GCD();
		assertEquals(2129664, a.gcd(2129664, 0));
	}

	@Test
	public void test7() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1416128883, 543781664));
	}

	@Test
	public void test8() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(-1338093054, -117440750));
	}

	@Test
	public void test9() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(828448852, 1702038120));
	}

	@Test
	public void test10() {
		GCD a = new GCD();
		assertEquals(1291845632, a.gcd(1291845632, 0));
	}

	@Test
	public void test11() {
		GCD a = new GCD();
		assertEquals(16777216, a.gcd(0, -16777216));
	}

	@Test
	public void test12() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(643704100, 591405353));
	}

	@Test
	public void test13() {
		GCD a = new GCD();
		assertEquals(3, a.gcd(-927229341, 696188928));
	}

	@Test
	public void test14() {
		GCD a = new GCD();
		assertEquals(14286848, a.gcd(-14286848, 0));
	}

	@Test
	public void test15() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-458753, -268632065));
	}

	@Test
	public void test16() {
		GCD a = new GCD();
		assertEquals(9, a.gcd(828864117, 1801663029));
	}

	@Test
	public void test17() {
		GCD a = new GCD();
		assertEquals(1331162622, a.gcd(-1331162622, 0));
	}

	@Test
	public void test18() {
		GCD a = new GCD();
		assertEquals(256, a.gcd(545197056, 2116352));
	}

	@Test
	public void test19() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(828864128, -129));
	}

	@Test
	public void test20() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1650813282, 1718970677));
	}

	@Test
	public void test21() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-1340517886, 1053991));
	}

	@Test
	public void test22() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(-993737532, -993770300));
	}

	@Test
	public void test23() {
		GCD a = new GCD();
		assertEquals(2130706432, a.gcd(2130706432, 0));
	}

	@Test
	public void test24() {
		GCD a = new GCD();
		assertEquals(9633728, a.gcd(0, -9633728));
	}
}",Buggy
"public class GCD {
	/*@ public normal_behavior     
          @    requires d != 0;
	  @    ensures \result == n%d;
          @    pure function @*/
        public static int div(int n, int d) { 
		return n%d; 
	}

	/*@    requires 0 <= num && num <= Integer.MAX_VALUE;
	  @    ensures \result == num;
	  @ also
	  @    requires Integer.MIN_VALUE < num && num < 0;
	  @    ensures \result == -num; @*/
	public /*@ pure @*/ int absolute(int num) {
		return (0 <= num) ? num : -num;
	}

        /*@ requires num1 != Integer.MAX_VALUE && num2 != Integer.MAX_VALUE && Integer.MIN_VALUE + 1 < num1 && Integer.MIN_VALUE + 1 < num2;
          @ {|  
	  @    requires num1 != 0 && num2 != 0;
	  @    old int tnum1 = absolute(num1);
	  @    old int tnum2 = absolute(num2);
	  @    old int greater = (tnum2 < tnum1) ? tnum1 : tnum2;
	  @    old int smaller = (tnum2 < tnum1) ? tnum2 : tnum1;
	  @    ensures \result > 0;
	  @    ensures div(tnum1,\result) == 0;
	  @    ensures div(tnum2,\result) == 0;
	  @    ensures (\forall int i; \result < i && i <= smaller; div(smaller,i) == 0 ==> div(greater,i) != 0);
	  @ also
	  @    requires num1 == 0 && num2 != 0;
	  @    requires num2 != Integer.MIN_VALUE;
	  @    old int tnum2 = absolute(num2);
	  @    ensures \result == tnum2;
	  @ also
	  @    requires num1 != 0 && num2 == 0;
	  @    requires num1 != Integer.MIN_VALUE;
	  @    old int tnum1 = absolute(num1);
	  @    ensures \result == tnum1;
	  @ also
	  @    requires num1 == 0 && num2 == 0;
	  @    ensures \result == -1;
          @ |} @*/
	public /*@ pure @*/ int gcd(int num1, int num2) throws IllegalArgumentException {
		int result = 1; 
	 	num1 = absolute(num1);
		num2 = absolute(num2);
	
		//@ assume div(num1, result) == 0 && div(num2, result) == 0;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 != 0 || num2 == 0) {  // if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		//@ maintaining result <= num1 && result <= num2;
		//@ maintaining 0 < i && i <= num1 + 1 && i<= num2 + 1; 
		//@ maintaining 0 < result && result <= i;
		//@ maintaining div(num1, result) == 0 && div(num2, result) == 0;
		//@ maintaining (\forall int j; 0 < j &&  j < i; div(num1, j) == 0 && div(num2, j) == 0 ==> j <= result);
		//@ decreases num1 - i; 
		for (int i = 1; i <= num1 && i <= num2; i++) {
            		if (div(num1,i) == 0 && div(num2,i) == 0) {
               			result = i;
			}
        	}
		return result;
	} 
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JUnitGCD {

	@Test
	public void test() {
		GCD a = new GCD();
		assertEquals(839516160, a.gcd(839516160, 0));
	}

	@Test
	public void test1() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(1912602640, 1198682738));
	}

	@Test
	public void test2() {
		GCD a = new GCD();
		assertEquals(67108864, a.gcd(-67108864, 0));
	}

	@Test
	public void test3() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1769473, 301793282));
	}

	@Test
	public void test4() {
		GCD a = new GCD();
		assertEquals(360, a.gcd(2075703480, -1649035080));
	}

	@Test
	public void test5() {
		GCD a = new GCD();
		assertEquals(-1, a.gcd(0, 0));
	}

	@Test
	public void test6() {
		GCD a = new GCD();
		assertEquals(2129664, a.gcd(2129664, 0));
	}

	@Test
	public void test7() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1416128883, 543781664));
	}

	@Test
	public void test8() {
		GCD a = new GCD();
		assertEquals(2, a.gcd(-1338093054, -117440750));
	}

	@Test
	public void test9() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(828448852, 1702038120));
	}

	@Test
	public void test10() {
		GCD a = new GCD();
		assertEquals(1291845632, a.gcd(1291845632, 0));
	}

	@Test
	public void test11() {
		GCD a = new GCD();
		assertEquals(16777216, a.gcd(0, -16777216));
	}

	@Test
	public void test12() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(643704100, 591405353));
	}

	@Test
	public void test13() {
		GCD a = new GCD();
		assertEquals(3, a.gcd(-927229341, 696188928));
	}

	@Test
	public void test14() {
		GCD a = new GCD();
		assertEquals(14286848, a.gcd(-14286848, 0));
	}

	@Test
	public void test15() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-458753, -268632065));
	}

	@Test
	public void test16() {
		GCD a = new GCD();
		assertEquals(9, a.gcd(828864117, 1801663029));
	}

	@Test
	public void test17() {
		GCD a = new GCD();
		assertEquals(1331162622, a.gcd(-1331162622, 0));
	}

	@Test
	public void test18() {
		GCD a = new GCD();
		assertEquals(256, a.gcd(545197056, 2116352));
	}

	@Test
	public void test19() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(828864128, -129));
	}

	@Test
	public void test20() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(1650813282, 1718970677));
	}

	@Test
	public void test21() {
		GCD a = new GCD();
		assertEquals(1, a.gcd(-1340517886, 1053991));
	}

	@Test
	public void test22() {
		GCD a = new GCD();
		assertEquals(4, a.gcd(-993737532, -993770300));
	}

	@Test
	public void test23() {
		GCD a = new GCD();
		assertEquals(2130706432, a.gcd(2130706432, 0));
	}

	@Test
	public void test24() {
		GCD a = new GCD();
		assertEquals(9633728, a.gcd(0, -9633728));
	}
}",Buggy
"public class Inverse {
    //@ ensures !\result ==> ((x.length != y.length) || (\exists int i; 0 <= i && i < x.length; x[i] != y[x.length - 1 -i]));
    //@ ensures \result ==> x.length == y.length && (\forall int i; 0 <= i && i < x.length; x[i] == y[x.length - 1 - i]);
    public static boolean Inverse(int[] x, int[] y) {
        if (x.length == y.length) return false; // if (x.length != y.length) return false;
        int index = 0;
        //@ maintaining 0 <= index && index <= x.length && x.length == y.length;
        //@ maintaining (\forall int i; 0 <= i && i < index; x[i] == y[x.length -1 - i]);
        //@ decreases x.length - index;
        while (index < x.length) {
            if (x[index] != y[x.length - 1 - index]) {
                return false;
            } else {
                index = index + 1;
            }
        }
        return true;
    }
}",Buggy
"public class Inverse {
    //@ ensures !\result ==> ((x.length != y.length) || (\exists int i; 0 <= i && i < x.length; x[i] != y[x.length - 1 -i]));
    //@ ensures \result ==> x.length == y.length && (\forall int i; 0 <= i && i < x.length; x[i] == y[x.length - 1 - i]);
    public static boolean Inverse(int[] x, int[] y) {
        if (x.length != y.length) return false;;
        int index = 0;
        //@ maintaining 0 <= index && index <= x.length && x.length == y.length;
        //@ maintaining (\forall int i; 0 <= i && i < index; x[i] == y[x.length -1 - i]);
        //@ decreases x.length - index;
        while (index < x.length) {
            if (x[index] != y[x.length - 1 - index]) {
                return false;
            } else {
                index = index + 1;
            }
        }
        return false; // true;
    }
}",Buggy
"public class Inverse {
    //@ ensures !\result ==> ((x.length != y.length) || (\exists int i; 0 <= i && i < x.length; x[i] != y[x.length - 1 -i]));
    //@ ensures \result ==> x.length == y.length && (\forall int i; 0 <= i && i < x.length; x[i] == y[x.length - 1 - i]);
    public static boolean Inverse(int[] x, int[] y) {
        if (x.length != y.length) return false;
        int index = 0;
        //@ maintaining 0 <= index && index <= x.length && x.length == y.length;
        //@ maintaining (\forall int i; 0 <= i && i < index; x[i] == y[x.length -1 - i]);
        //@ decreases x.length - index;
        while (index <= x.length) { // while (index < x.length) {
            if (x[index] != y[x.length - 1 - index]) {
                return false;
            } else {
                index = index + 1;
            }
        }
        return true;
    }
}",Buggy
"public class Inverse {
    //@ ensures !\result ==> ((x.length != y.length) || (\exists int i; 0 <= i && i < x.length; x[i] != y[x.length - 1 -i]));
    //@ ensures \result ==> x.length == y.length && (\forall int i; 0 <= i && i < x.length; x[i] == y[x.length - 1 - i]);
    public static boolean Inverse(int[] x, int[] y) {
        if (x.length != y.length) return false;
        int index = 0;
        //@ maintaining 0 <= index && index <= x.length && x.length == y.length;
        //@ maintaining (\forall int i; 0 <= i && i < index; x[i] == y[x.length -1 - i]);
        //@ decreases x.length - index;
        while (index >= x.length) { // while (index < x.length) {
            if (x[index] != y[x.length - 1 - index]) {
                return false;
            } else {
                index = index + 1;
            }
        }
        return true;
    }
}",Buggy
"public class Inverse {
    //@ ensures !\result ==> ((x.length != y.length) || (\exists int i; 0 <= i && i < x.length; x[i] != y[x.length - 1 -i]));
    //@ ensures \result ==> x.length == y.length && (\forall int i; 0 <= i && i < x.length; x[i] == y[x.length - 1 - i]);
    public static boolean Inverse(int[] x, int[] y) {
        if (x.length != y.length) return false;
        int index = 0;
        //@ maintaining 0 <= index && index <= x.length && x.length == y.length;
        //@ maintaining (\forall int i; 0 <= i && i < index; x[i] == y[x.length -1 - i]);
        //@ decreases x.length - index;
        while (index < x.length) {
            if (x[index] != y[x.length + 1 - index]) { // if (x[index] != y[x.length - 1 - index]) {
                return false;
            } else {
                index = index + 1;
            }
        }
        return true;
    }
}",Buggy
"public class Inverse {
    //@ ensures !\result ==> ((x.length != y.length) || (\exists int i; 0 <= i && i < x.length; x[i] != y[x.length - 1 -i]));
    //@ ensures \result ==> x.length == y.length && (\forall int i; 0 <= i && i < x.length; x[i] == y[x.length - 1 - i]);
    public static boolean Inverse(int[] x, int[] y) {
        if (x.length != y.length) return false;
        int index = 0;
        //@ maintaining 0 <= index && index <= x.length && x.length == y.length;
        //@ maintaining (\forall int i; 0 <= i && i < index; x[i] == y[x.length -1 - i]);
        //@ decreases x.length - index;
        while (index < x.length) {
            if (x[index] != y[x.length - 1 + index]) { // if (x[index] != y[x.length - 1 - index]) {
                return false;
            } else {
                index = index + 1;
            }
        }
        return true;
    }
}",Buggy
"public class Inverse {
    //@ ensures !\result ==> ((x.length != y.length) || (\exists int i; 0 <= i && i < x.length; x[i] != y[x.length - 1 -i]));
    //@ ensures \result ==> x.length == y.length && (\forall int i; 0 <= i && i < x.length; x[i] == y[x.length - 1 - i]);
    public static boolean Inverse(int[] x, int[] y) {
        if (x.length != y.length) return false;
        int index = 0;
        //@ maintaining 0 <= index && index <= x.length && x.length == y.length;
        //@ maintaining (\forall int i; 0 <= i && i < index; x[i] == y[x.length -1 - i]);
        //@ decreases x.length - index;
        while (index < x.length) {
            if (x[index] == y[x.length - 1 - index]) { // if (x[index] != y[x.length - 1 - index]) {
                return false;
            } else {
                index = index + 1;
            }
        }
        return true;
    }
}",Buggy
"public class Inverse {
    //@ ensures !\result ==> ((x.length != y.length) || (\exists int i; 0 <= i && i < x.length; x[i] != y[x.length - 1 -i]));
    //@ ensures \result ==> x.length == y.length && (\forall int i; 0 <= i && i < x.length; x[i] == y[x.length - 1 - i]);
    public static boolean Inverse(int[] x, int[] y) {
        if (x.length != y.length) return false;
        int index = 0;
        //@ maintaining 0 <= index && index <= x.length && x.length == y.length;
        //@ maintaining (\forall int i; 0 <= i && i < index; x[i] == y[x.length -1 - i]);
        //@ decreases x.length - index;
        while (index < x.length) {
            if (x[index] != y[x.length - 1 - index]) {
                return false;
            } else {
                index = index - 1; // index = index + 1;
            }
        }
        return true;
    }
}",Buggy
"public class Inverse {
    //@ ensures !\result ==> ((x.length != y.length) || (\exists int i; 0 <= i && i < x.length; x[i] != y[x.length - 1 -i]));
    //@ ensures \result ==> x.length == y.length && (\forall int i; 0 <= i && i < x.length; x[i] == y[x.length - 1 - i]);
    public static boolean Inverse(int[] x, int[] y) {
        if (x.length != y.length) return true; // false;
        int index = 0;
        //@ maintaining 0 <= index && index <= x.length && x.length == y.length;
        //@ maintaining (\forall int i; 0 <= i && i < index; x[i] == y[x.length -1 - i]);
        //@ decreases x.length - index;
        while (index < x.length) {
            if (x[index] != y[x.length - 1 - index]) {
                return false;
            } else {
                index = index + 1;
            }
        }
        return true;
    }
}",Buggy
"public class Inverse {
    //@ ensures !\result ==> ((x.length != y.length) || (\exists int i; 0 <= i && i < x.length; x[i] != y[x.length - 1 -i]));
    //@ ensures \result ==> x.length == y.length && (\forall int i; 0 <= i && i < x.length; x[i] == y[x.length - 1 - i]);
    public static boolean Inverse(int[] x, int[] y) {
        if (x.length != y.length) return false;
        int index = 0;
        //@ maintaining 0 <= index && index <= x.length && x.length == y.length;
        //@ maintaining (\forall int i; 0 <= i && i < index; x[i] == y[x.length -1 - i]);
        //@ decreases x.length - index;
        while (index < x.length) {
            if (x[index] != y[x.length - 1 - index]) {
                return true; // false;
            } else {
                index = index + 1;
            }
        }
        return true;
    }
}",Buggy
"public class LCM {
    /*@ public normal_behavior     
      @    requires d != 0;
      @    ensures \result == n%d;
      @    pure function @*/
    public static int div(int n, int d) { return n*d; } // return n%d; }

    /*@ requires num1 != Integer.MIN_VALUE;
      @ requires num2 != Integer.MIN_VALUE;
      @ {|
      @    requires num1 != 0 && num2 != 0;
      @    old int pNum1 = (num1 > 0) ? num1 : -num1;
      @    old int pNum2 = (num2 > 0) ? num2 : -num2;
      @    old int max = (pNum1 > pNum2) ? pNum1 : pNum2;
      @    ensures \result == -1 || 0 < \result; 
      @    ensures 0 < \result ==> (div(\result, pNum2) == 0 && div(\result, pNum2) == 0);
      @    ensures 0 < \result ==> (\forall int i; max <= i && i < \result; div(i, pNum1) == 0 ==> div(i, pNum2) != 0);
      @    ensures \result == -1 ==> (\forall int k; max <= k && k <= Integer.MAX_VALUE; div(k, pNum1) == 0 ==> div(k, pNum2) != 0); 
      @ also
      @    requires num1 == 0 || num2 == 0;
      @    ensures \result == -1;
      @ |} @*/
    public /*@ pure @*/ int lcm(int num1, int num2) 
    {
	if (num1 == 0 || num2 == 0) {
		return -1;
	}	
	if (num1 < 0)
		num1 = -num1;
	if (num2 < 0)
		num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;
	
	//@ ghost int check = result; 
	//@ maintaining num1 <= result && num2 <= result && result <= Integer.MAX_VALUE;
	//@ maintaining (\forall int k; check <= k && k < result; div(k, num1) == 0 ==> div(k, num2) != 0);
	//@ decreases Integer.MAX_VALUE - result;
        while (result < Integer.MAX_VALUE)
        {
            if (div(result, num1) == 0 && div(result, num2) == 0)
            {
                break;
            }
            result++;
        }

	if (div(result, num1) == 0 && div(result, num2) == 0) {
		return result;
	}
	return -1;
    }
}",Buggy
"public class LCM {
    /*@ public normal_behavior     
      @    requires d != 0;
      @    ensures \result == n%d;
      @    pure function @*/
    public static int div(int n, int d) { return n%d; }

    /*@ requires num1 != Integer.MIN_VALUE;
      @ requires num2 != Integer.MIN_VALUE;
      @ {|
      @    requires num1 != 0 && num2 != 0;
      @    old int pNum1 = (num1 > 0) ? num1 : -num1;
      @    old int pNum2 = (num2 > 0) ? num2 : -num2;
      @    old int max = (pNum1 > pNum2) ? pNum1 : pNum2;
      @    ensures \result == -1 || 0 < \result; 
      @    ensures 0 < \result ==> (div(\result, pNum2) == 0 && div(\result, pNum2) == 0);
      @    ensures 0 < \result ==> (\forall int i; max <= i && i < \result; div(i, pNum1) == 0 ==> div(i, pNum2) != 0);
      @    ensures \result == -1 ==> (\forall int k; max <= k && k <= Integer.MAX_VALUE; div(k, pNum1) == 0 ==> div(k, pNum2) != 0); 
      @ also
      @    requires num1 == 0 || num2 == 0;
      @    ensures \result == -1;
      @ |} @*/
    public /*@ pure @*/ int lcm(int num1, int num2) 
    {
	if (num1 == 0 || num2 == 0) {
		return -1;
	}	
	if (num1 < 0)
		num1 = -num1;
	if (num2 < 0)
		num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;
	
	//@ ghost int check = result; 
	//@ maintaining num1 <= result && num2 <= result && result <= Integer.MAX_VALUE;
	//@ maintaining (\forall int k; check <= k && k < result; div(k, num1) == 0 ==> div(k, num2) != 0);
	//@ decreases Integer.MAX_VALUE - result;
        while (result < Integer.MAX_VALUE)
        {
            if (div(result, num1) == 0 && div(result, num2) == 0)
            {
                break;
            }
            result++;
        }

	if (div(result, num1) == 0 && div(result, num2) != 0) { // if (div(result, num1) == 0 && div(result, num2) == 0) {;
		return result;
	}
	return -1;
    }
}",Buggy
"public class LCM {
    /*@ public normal_behavior     
      @    requires d != 0;
      @    ensures \result == n%d;
      @    pure function @*/
    public static int div(int n, int d) { return (n%d == 0 ? 1 : 0);} // n%d; }

    /*@ requires num1 != Integer.MIN_VALUE;
      @ requires num2 != Integer.MIN_VALUE;
      @ {|
      @    requires num1 != 0 && num2 != 0;
      @    old int pNum1 = (num1 > 0) ? num1 : -num1;
      @    old int pNum2 = (num2 > 0) ? num2 : -num2;
      @    old int max = (pNum1 > pNum2) ? pNum1 : pNum2;
      @    ensures \result == -1 || 0 < \result; 
      @    ensures 0 < \result ==> (div(\result, pNum2) == 0 && div(\result, pNum2) == 0);
      @    ensures 0 < \result ==> (\forall int i; max <= i && i < \result; div(i, pNum1) == 0 ==> div(i, pNum2) != 0);
      @    ensures \result == -1 ==> (\forall int k; max <= k && k <= Integer.MAX_VALUE; div(k, pNum1) == 0 ==> div(k, pNum2) != 0); 
      @ also
      @    requires num1 == 0 || num2 == 0;
      @    ensures \result == -1;
      @ |} @*/
    public /*@ pure @*/ int lcm(int num1, int num2) 
    {
	if (num1 == 0 || num2 == 0) {
		return -1;
	}	
	if (num1 < 0)
		num1 = -num1;
	if (num2 < 0)
		num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;
	
	//@ ghost int check = result; 
	//@ maintaining num1 <= result && num2 <= result && result <= Integer.MAX_VALUE;
	//@ maintaining (\forall int k; check <= k && k < result; div(k, num1) == 0 ==> div(k, num2) != 0);
	//@ decreases Integer.MAX_VALUE - result;
        while (result < Integer.MAX_VALUE)
        {
            if (div(result, num1) == 0 && div(result, num2) == 0)
            {
                break;
            }
            result++;
        }

	if (div(result, num1) == 0 && div(result, num2) == 0) {
		return result;
	}
	return -1;
    }
}",Buggy
"public class LCM {
    /*@ public normal_behavior     
      @    requires d != 0;
      @    ensures \result == n%d;
      @    pure function @*/
    public static int div(int n, int d) { return n%d; }

    /*@ requires num1 != Integer.MIN_VALUE;
      @ requires num2 != Integer.MIN_VALUE;
      @ {|
      @    requires num1 != 0 && num2 != 0;
      @    old int pNum1 = (num1 > 0) ? num1 : -num1;
      @    old int pNum2 = (num2 > 0) ? num2 : -num2;
      @    old int max = (pNum1 > pNum2) ? pNum1 : pNum2;
      @    ensures \result == -1 || 0 < \result; 
      @    ensures 0 < \result ==> (div(\result, pNum2) == 0 && div(\result, pNum2) == 0);
      @    ensures 0 < \result ==> (\forall int i; max <= i && i < \result; div(i, pNum1) == 0 ==> div(i, pNum2) != 0);
      @    ensures \result == -1 ==> (\forall int k; max <= k && k <= Integer.MAX_VALUE; div(k, pNum1) == 0 ==> div(k, pNum2) != 0); 
      @ also
      @    requires num1 == 0 || num2 == 0;
      @    ensures \result == -1;
      @ |} @*/
    public /*@ pure @*/ int lcm(int num1, int num2) 
    {
	if (num1 == 0 || num2 == 0) {
		return 0; // -1;
	}	
	if (num1 < 0)
		num1 = -num1;
	if (num2 < 0)
		num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;
	
	//@ ghost int check = result; 
	//@ maintaining num1 <= result && num2 <= result && result <= Integer.MAX_VALUE;
	//@ maintaining (\forall int k; check <= k && k < result; div(k, num1) == 0 ==> div(k, num2) != 0);
	//@ decreases Integer.MAX_VALUE - result;
        while (result < Integer.MAX_VALUE)
        {
            if (div(result, num1) == 0 && div(result, num2) == 0)
            {
                break;
            }
            result++;
        }

	if (div(result, num1) == 0 && div(result, num2) == 0) {
		return result;
	}
	return -1;
    }
}",Buggy
"public class LCM {
    /*@ public normal_behavior     
      @    requires d != 0;
      @    ensures \result == n%d;
      @    pure function @*/
    public static int div(int n, int d) { return n%d; }

    /*@ requires num1 != Integer.MIN_VALUE;
      @ requires num2 != Integer.MIN_VALUE;
      @ {|
      @    requires num1 != 0 && num2 != 0;
      @    old int pNum1 = (num1 > 0) ? num1 : -num1;
      @    old int pNum2 = (num2 > 0) ? num2 : -num2;
      @    old int max = (pNum1 > pNum2) ? pNum1 : pNum2;
      @    ensures \result == -1 || 0 < \result; 
      @    ensures 0 < \result ==> (div(\result, pNum2) == 0 && div(\result, pNum2) == 0);
      @    ensures 0 < \result ==> (\forall int i; max <= i && i < \result; div(i, pNum1) == 0 ==> div(i, pNum2) != 0);
      @    ensures \result == -1 ==> (\forall int k; max <= k && k <= Integer.MAX_VALUE; div(k, pNum1) == 0 ==> div(k, pNum2) != 0); 
      @ also
      @    requires num1 == 0 || num2 == 0;
      @    ensures \result == -1;
      @ |} @*/
    public /*@ pure @*/ int lcm(int num1, int num2) 
    {
	if (num1 == 0 || num2 == 0) {
		return -1;
	}	
	if (num1 < 0)
		num1 = -num1;
	if (num2 < 0)
		num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;
	
	//@ ghost int check = result; 
	//@ maintaining num1 <= result && num2 <= result && result <= Integer.MAX_VALUE;
	//@ maintaining (\forall int k; check <= k && k < result; div(k, num1) == 0 ==> div(k, num2) != 0);
	//@ decreases Integer.MAX_VALUE - result;
        while (result < Integer.MAX_VALUE)
        {
            if (div(result, num1) == 0 && div(result, num2) == 0)
            {
                break;
            }
            result++;
        }

	if (div(result, num1) == 0 && div(result, num2) == 0) {
		return (result == 0 ? 1 : 0); // result;
	}
	return -1;
    }
}",Buggy
"public class LCM {
    /*@ public normal_behavior     
      @    requires d != 0;
      @    ensures \result == n%d;
      @    pure function @*/
    public static int div(int n, int d) { return n%d; }

    /*@ requires num1 != Integer.MIN_VALUE;
      @ requires num2 != Integer.MIN_VALUE;
      @ {|
      @    requires num1 != 0 && num2 != 0;
      @    old int pNum1 = (num1 > 0) ? num1 : -num1;
      @    old int pNum2 = (num2 > 0) ? num2 : -num2;
      @    old int max = (pNum1 > pNum2) ? pNum1 : pNum2;
      @    ensures \result == -1 || 0 < \result; 
      @    ensures 0 < \result ==> (div(\result, pNum2) == 0 && div(\result, pNum2) == 0);
      @    ensures 0 < \result ==> (\forall int i; max <= i && i < \result; div(i, pNum1) == 0 ==> div(i, pNum2) != 0);
      @    ensures \result == -1 ==> (\forall int k; max <= k && k <= Integer.MAX_VALUE; div(k, pNum1) == 0 ==> div(k, pNum2) != 0); 
      @ also
      @    requires num1 == 0 || num2 == 0;
      @    ensures \result == -1;
      @ |} @*/
    public /*@ pure @*/ int lcm(int num1, int num2) 
    {
	if (num1 == 0 || num2 == 0) {
		return -1;
	}	
	if (num1 < 0)
		num1 = -num1;
	if (num2 < 0)
		num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;
	
	//@ ghost int check = result; 
	//@ maintaining num1 <= result && num2 <= result && result <= Integer.MAX_VALUE;
	//@ maintaining (\forall int k; check <= k && k < result; div(k, num1) == 0 ==> div(k, num2) != 0);
	//@ decreases Integer.MAX_VALUE - result;
        while (result < Integer.MAX_VALUE)
        {
            if (div(result, num1) == 0 && div(result, num2) == 0)
            {
                break;
            }
            result++;
        }

	if (div(result, num1) == 0 && div(result, num2) == 0) {
		return result;
	}
	return 0; // -1;
    }
}",Buggy
"public class LCM {
    /*@ public normal_behavior     
      @    requires d != 0;
      @    ensures \result == n%d;
      @    pure function @*/
    public static int div(int n, int d) { return n%d; }

    /*@ requires num1 != Integer.MIN_VALUE;
      @ requires num2 != Integer.MIN_VALUE;
      @ {|
      @    requires num1 != 0 && num2 != 0;
      @    old int pNum1 = (num1 > 0) ? num1 : -num1;
      @    old int pNum2 = (num2 > 0) ? num2 : -num2;
      @    old int max = (pNum1 > pNum2) ? pNum1 : pNum2;
      @    ensures \result == -1 || 0 < \result; 
      @    ensures 0 < \result ==> (div(\result, pNum2) == 0 && div(\result, pNum2) == 0);
      @    ensures 0 < \result ==> (\forall int i; max <= i && i < \result; div(i, pNum1) == 0 ==> div(i, pNum2) != 0);
      @    ensures \result == -1 ==> (\forall int k; max <= k && k <= Integer.MAX_VALUE; div(k, pNum1) == 0 ==> div(k, pNum2) != 0); 
      @ also
      @    requires num1 == 0 || num2 == 0;
      @    ensures \result == -1;
      @ |} @*/
    public /*@ pure @*/ int lcm(int num1, int num2) 
    {
	if (num1 != 0 || num2 == 0){ // if (num1 == 0 || num2 == 0) {
		return -1;
	}	
	if (num1 < 0)
		num1 = -num1;
	if (num2 < 0)
		num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;
	
	//@ ghost int check = result; 
	//@ maintaining num1 <= result && num2 <= result && result <= Integer.MAX_VALUE;
	//@ maintaining (\forall int k; check <= k && k < result; div(k, num1) == 0 ==> div(k, num2) != 0);
	//@ decreases Integer.MAX_VALUE - result;
        while (result < Integer.MAX_VALUE)
        {
            if (div(result, num1) == 0 && div(result, num2) == 0)
            {
                break;
            }
            result++;
        }

	if (div(result, num1) == 0 && div(result, num2) == 0) {
		return result;
	}
	return -1;
    }
}",Buggy
"public class LCM {
    /*@ public normal_behavior     
      @    requires d != 0;
      @    ensures \result == n%d;
      @    pure function @*/
    public static int div(int n, int d) { return n%d; }

    /*@ requires num1 != Integer.MIN_VALUE;
      @ requires num2 != Integer.MIN_VALUE;
      @ {|
      @    requires num1 != 0 && num2 != 0;
      @    old int pNum1 = (num1 > 0) ? num1 : -num1;
      @    old int pNum2 = (num2 > 0) ? num2 : -num2;
      @    old int max = (pNum1 > pNum2) ? pNum1 : pNum2;
      @    ensures \result == -1 || 0 < \result; 
      @    ensures 0 < \result ==> (div(\result, pNum2) == 0 && div(\result, pNum2) == 0);
      @    ensures 0 < \result ==> (\forall int i; max <= i && i < \result; div(i, pNum1) == 0 ==> div(i, pNum2) != 0);
      @    ensures \result == -1 ==> (\forall int k; max <= k && k <= Integer.MAX_VALUE; div(k, pNum1) == 0 ==> div(k, pNum2) != 0); 
      @ also
      @    requires num1 == 0 || num2 == 0;
      @    ensures \result == -1;
      @ |} @*/
    public /*@ pure @*/ int lcm(int num1, int num2) 
    {
	if (num1 == 0 || num2 != 0) { // if (num1 == 0 || num2 == 0) {
		return -1;
	}	
	if (num1 < 0)
		num1 = -num1;
	if (num2 < 0)
		num2 = -num2;;

        int result = (num1 > num2) ? num1 : num2;
	
	//@ ghost int check = result; 
	//@ maintaining num1 <= result && num2 <= result && result <= Integer.MAX_VALUE;
	//@ maintaining (\forall int k; check <= k && k < result; div(k, num1) == 0 ==> div(k, num2) != 0);
	//@ decreases Integer.MAX_VALUE - result;
        while (result < Integer.MAX_VALUE)
        {
            if (div(result, num1) == 0 && div(result, num2) == 0)
            {
                break;
            }
            result++;
        }

	if (div(result, num1) == 0 && div(result, num2) == 0) {
		return result;
	}
	return -1;
    }
}",Buggy
"public class LCM {
    /*@ public normal_behavior     
      @    requires d != 0;
      @    ensures \result == n%d;
      @    pure function @*/
    public static int div(int n, int d) { return n%d; }

    /*@ requires num1 != Integer.MIN_VALUE;
      @ requires num2 != Integer.MIN_VALUE;
      @ {|
      @    requires num1 != 0 && num2 != 0;
      @    old int pNum1 = (num1 > 0) ? num1 : -num1;
      @    old int pNum2 = (num2 > 0) ? num2 : -num2;
      @    old int max = (pNum1 > pNum2) ? pNum1 : pNum2;
      @    ensures \result == -1 || 0 < \result; 
      @    ensures 0 < \result ==> (div(\result, pNum2) == 0 && div(\result, pNum2) == 0);
      @    ensures 0 < \result ==> (\forall int i; max <= i && i < \result; div(i, pNum1) == 0 ==> div(i, pNum2) != 0);
      @    ensures \result == -1 ==> (\forall int k; max <= k && k <= Integer.MAX_VALUE; div(k, pNum1) == 0 ==> div(k, pNum2) != 0); 
      @ also
      @    requires num1 == 0 || num2 == 0;
      @    ensures \result == -1;
      @ |} @*/
    public /*@ pure @*/ int lcm(int num1, int num2) 
    {
	if (num1 == 0 || num2 == 0) {
		return -1;
	}	
	if (num1 < 0)
		num1 = -num1;
	if (num2 < 0)
		num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;
	
	//@ ghost int check = result; 
	//@ maintaining num1 <= result && num2 <= result && result <= Integer.MAX_VALUE;
	//@ maintaining (\forall int k; check <= k && k < result; div(k, num1) == 0 ==> div(k, num2) != 0);
	//@ decreases Integer.MAX_VALUE - result;
        while (result <= Integer.MAX_VALUE) // while (result < Integer.MAX_VALUE)
        {
            if (div(result, num1) == 0 && div(result, num2) == 0)
            {
                break;
            }
            result++;
        }

	if (div(result, num1) == 0 && div(result, num2) == 0) {
		return result;
	}
	return -1;
    }
}",Buggy
"public class LCM {
    /*@ public normal_behavior     
      @    requires d != 0;
      @    ensures \result == n%d;
      @    pure function @*/
    public static int div(int n, int d) { return n%d; }

    /*@ requires num1 != Integer.MIN_VALUE;
      @ requires num2 != Integer.MIN_VALUE;
      @ {|
      @    requires num1 != 0 && num2 != 0;
      @    old int pNum1 = (num1 > 0) ? num1 : -num1;
      @    old int pNum2 = (num2 > 0) ? num2 : -num2;
      @    old int max = (pNum1 > pNum2) ? pNum1 : pNum2;
      @    ensures \result == -1 || 0 < \result; 
      @    ensures 0 < \result ==> (div(\result, pNum2) == 0 && div(\result, pNum2) == 0);
      @    ensures 0 < \result ==> (\forall int i; max <= i && i < \result; div(i, pNum1) == 0 ==> div(i, pNum2) != 0);
      @    ensures \result == -1 ==> (\forall int k; max <= k && k <= Integer.MAX_VALUE; div(k, pNum1) == 0 ==> div(k, pNum2) != 0); 
      @ also
      @    requires num1 == 0 || num2 == 0;
      @    ensures \result == -1;
      @ |} @*/
    public /*@ pure @*/ int lcm(int num1, int num2) 
    {
	if (num1 == 0 || num2 == 0) {
		return -1;
	}	
	if (num1 < 0)
		num1 = -num1;
	if (num2 < 0)
		num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;
	
	//@ ghost int check = result; 
	//@ maintaining num1 <= result && num2 <= result && result <= Integer.MAX_VALUE;
	//@ maintaining (\forall int k; check <= k && k < result; div(k, num1) == 0 ==> div(k, num2) != 0);
	//@ decreases Integer.MAX_VALUE - result;
        while (result >= Integer.MAX_VALUE) // while (result < Integer.MAX_VALUE)
        {
            if (div(result, num1) == 0 && div(result, num2) == 0)
            {
                break;
            }
            result++;
        }

	if (div(result, num1) == 0 && div(result, num2) == 0) {
		return result;
	}
	return -1;
    }
}",Buggy
"public class LCM {
    /*@ public normal_behavior     
      @    requires d != 0;
      @    ensures \result == n%d;
      @    pure function @*/
    public static int div(int n, int d) { return n%d; }

    /*@ requires num1 != Integer.MIN_VALUE;
      @ requires num2 != Integer.MIN_VALUE;
      @ {|
      @    requires num1 != 0 && num2 != 0;
      @    old int pNum1 = (num1 > 0) ? num1 : -num1;
      @    old int pNum2 = (num2 > 0) ? num2 : -num2;
      @    old int max = (pNum1 > pNum2) ? pNum1 : pNum2;
      @    ensures \result == -1 || 0 < \result; 
      @    ensures 0 < \result ==> (div(\result, pNum2) == 0 && div(\result, pNum2) == 0);
      @    ensures 0 < \result ==> (\forall int i; max <= i && i < \result; div(i, pNum1) == 0 ==> div(i, pNum2) != 0);
      @    ensures \result == -1 ==> (\forall int k; max <= k && k <= Integer.MAX_VALUE; div(k, pNum1) == 0 ==> div(k, pNum2) != 0); 
      @ also
      @    requires num1 == 0 || num2 == 0;
      @    ensures \result == -1;
      @ |} @*/
    public /*@ pure @*/ int lcm(int num1, int num2) 
    {
	if (num1 == 0 || num2 == 0) {
		return -1;
	}
	if (num1 < 0)
		num1 = -num1;
	if (num2 < 0)
		num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;
	
	//@ ghost int check = result; 
	//@ maintaining num1 <= result && num2 <= result && result <= Integer.MAX_VALUE;
	//@ maintaining (\forall int k; check <= k && k < result; div(k, num1) == 0 ==> div(k, num2) != 0);
	//@ decreases Integer.MAX_VALUE - result;
        while (result < Integer.MAX_VALUE)
        {
            if (div(result, num1) != 0 && div(result, num2) == 0) // if (div(result, num1) == 0 && div(result, num2) == 0)
            {
                break;
            }
            result++;
        }

	if (div(result, num1) == 0 && div(result, num2) == 0) {
		return result;
	}
	return -1;
    }
}",Buggy
"public class LCM {
    /*@ public normal_behavior     
      @    requires d != 0;
      @    ensures \result == n%d;
      @    pure function @*/
    public static int div(int n, int d) { return n%d; }

    /*@ requires num1 != Integer.MIN_VALUE;
      @ requires num2 != Integer.MIN_VALUE;
      @ {|
      @    requires num1 != 0 && num2 != 0;
      @    old int pNum1 = (num1 > 0) ? num1 : -num1;
      @    old int pNum2 = (num2 > 0) ? num2 : -num2;
      @    old int max = (pNum1 > pNum2) ? pNum1 : pNum2;
      @    ensures \result == -1 || 0 < \result; 
      @    ensures 0 < \result ==> (div(\result, pNum2) == 0 && div(\result, pNum2) == 0);
      @    ensures 0 < \result ==> (\forall int i; max <= i && i < \result; div(i, pNum1) == 0 ==> div(i, pNum2) != 0);
      @    ensures \result == -1 ==> (\forall int k; max <= k && k <= Integer.MAX_VALUE; div(k, pNum1) == 0 ==> div(k, pNum2) != 0); 
      @ also
      @    requires num1 == 0 || num2 == 0;
      @    ensures \result == -1;
      @ |} @*/
    public /*@ pure @*/ int lcm(int num1, int num2) 
    {
	if (num1 == 0 || num2 == 0) {
		return -1;
	}	
	if (num1 < 0)
		num1 = -num1;
	if (num2 < 0)
		num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;
	
	//@ ghost int check = result; 
	//@ maintaining num1 <= result && num2 <= result && result <= Integer.MAX_VALUE;
	//@ maintaining (\forall int k; check <= k && k < result; div(k, num1) == 0 ==> div(k, num2) != 0);
	//@ decreases Integer.MAX_VALUE - result;
        while (result < Integer.MAX_VALUE)
        {
            if (div(result, num1) == 0 && div(result, num2) != 0) // if (div(result, num1) == 0 && div(result, num2) == 0)
            {
                break;
            }
            result++;
        }

	if (div(result, num1) == 0 && div(result, num2) == 0) {
		return result;
	}
	return -1;
    }
}",Buggy
"public class LCM {
    /*@ public normal_behavior     
      @    requires d != 0;
      @    ensures \result == n%d;
      @    pure function @*/
    public static int div(int n, int d) { return n%d; }

    /*@ requires num1 != Integer.MIN_VALUE;
      @ requires num2 != Integer.MIN_VALUE;
      @ {|
      @    requires num1 != 0 && num2 != 0;
      @    old int pNum1 = (num1 > 0) ? num1 : -num1;
      @    old int pNum2 = (num2 > 0) ? num2 : -num2;
      @    old int max = (pNum1 > pNum2) ? pNum1 : pNum2;
      @    ensures \result == -1 || 0 < \result; 
      @    ensures 0 < \result ==> (div(\result, pNum2) == 0 && div(\result, pNum2) == 0);
      @    ensures 0 < \result ==> (\forall int i; max <= i && i < \result; div(i, pNum1) == 0 ==> div(i, pNum2) != 0);
      @    ensures \result == -1 ==> (\forall int k; max <= k && k <= Integer.MAX_VALUE; div(k, pNum1) == 0 ==> div(k, pNum2) != 0); 
      @ also
      @    requires num1 == 0 || num2 == 0;
      @    ensures \result == -1;
      @ |} @*/
    public /*@ pure @*/ int lcm(int num1, int num2) 
    {
	if (num1 == 0 || num2 == 0) {
		return -1;
	}	
	if (num1 < 0)
		num1 = -num1;
	if (num2 < 0)
		num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;
	
	//@ ghost int check = result; 
	//@ maintaining num1 <= result && num2 <= result && result <= Integer.MAX_VALUE;
	//@ maintaining (\forall int k; check <= k && k < result; div(k, num1) == 0 ==> div(k, num2) != 0);
	//@ decreases Integer.MAX_VALUE - result;
        while (result < Integer.MAX_VALUE)
        {
            if (div(result, num1) == 0 && div(result, num2) == 0)
            {
                break;
            }
            result--;//result++;
        }

	if (div(result, num1) == 0 && div(result, num2) == 0) {
		return result;
	}
	return -1;
    }
}",Buggy
"public class LCM {
    /*@ public normal_behavior     
      @    requires d != 0;
      @    ensures \result == n%d;
      @    pure function @*/
    public static int div(int n, int d) { return n%d; }

    /*@ requires num1 != Integer.MIN_VALUE;
      @ requires num2 != Integer.MIN_VALUE;
      @ {|
      @    requires num1 != 0 && num2 != 0;
      @    old int pNum1 = (num1 > 0) ? num1 : -num1;
      @    old int pNum2 = (num2 > 0) ? num2 : -num2;
      @    old int max = (pNum1 > pNum2) ? pNum1 : pNum2;
      @    ensures \result == -1 || 0 < \result; 
      @    ensures 0 < \result ==> (div(\result, pNum2) == 0 && div(\result, pNum2) == 0);
      @    ensures 0 < \result ==> (\forall int i; max <= i && i < \result; div(i, pNum1) == 0 ==> div(i, pNum2) != 0);
      @    ensures \result == -1 ==> (\forall int k; max <= k && k <= Integer.MAX_VALUE; div(k, pNum1) == 0 ==> div(k, pNum2) != 0); 
      @ also
      @    requires num1 == 0 || num2 == 0;
      @    ensures \result == -1;
      @ |} @*/
    public /*@ pure @*/ int lcm(int num1, int num2) 
    {
	if (num1 == 0 || num2 == 0) {
		return -1;
	}	
	if (num1 < 0)
		num1 = -num1;
	if (num2 < 0)
		num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;
	
	//@ ghost int check = result; 
	//@ maintaining num1 <= result && num2 <= result && result <= Integer.MAX_VALUE;
	//@ maintaining (\forall int k; check <= k && k < result; div(k, num1) == 0 ==> div(k, num2) != 0);
	//@ decreases Integer.MAX_VALUE - result;
        while (result < Integer.MAX_VALUE)
        {
            if (div(result, num1) == 0 && div(result, num2) == 0)
            {
                break;
            }
            result++;
        }

	if (div(result, num1) != 0 && div(result, num2) == 0) { // if (div(result, num1) == 0 && div(result, num2) == 0) {
		return result;
	}
	return -1;
    }
}",Buggy
"public class LeapYear {
    /*@ requires 0 < year;
    {|
       @    requires year % 4 != 0; 
       @    ensures \result == false;
       @ also
       @     requires year % 4 == 0 && year % 100 != 0;
       @     ensures \result == true;
       @ also
       @     requires year % 4 == 0 && year % 100 == 0 && year % 400 != 0;
       @     ensures \result == false;
       @ also
       @     requires year % 4 == 0 && year % 100 == 0 && year % 400 == 0;
       @     ensures \result == true;
    |} @*/
    public /*@ pure @*/ boolean isLeapYear(int year) {
        boolean leap = false;
         
        if (year * 4 == 0) // if (year % 4 == 0)
        {
            if ( year % 100 == 0)
            {
                if ( year % 400 == 0)
                    leap = true;
                else
                    leap = false;
            }
            else
                leap = true;
        }
        else
            leap = false;
	
	return leap;
   }
}",Buggy
"public class LeapYear {
    /*@ requires 0 < year;
    {|
       @    requires year % 4 != 0; 
       @    ensures \result == false;
       @ also
       @     requires year % 4 == 0 && year % 100 != 0;
       @     ensures \result == true;
       @ also
       @     requires year % 4 == 0 && year % 100 == 0 && year % 400 != 0;
       @     ensures \result == false;
       @ also
       @     requires year % 4 == 0 && year % 100 == 0 && year % 400 == 0;
       @     ensures \result == true;
    |} @*/
    public /*@ pure @*/ boolean isLeapYear(int year) {
        boolean leap = false;
         
        if (year % 4 != 0) // if (year % 4 == 0)
        {
            if ( year % 100 == 0)
            {
                if ( year % 400 == 0)
                    leap = true;
                else
                    leap = false;
            }
            else
                leap = true;
        }
        else
            leap = false;
	
	return leap;
   }
}",Buggy
"public class LeapYear {
   /*@ requires 0 < year;
    {|
       @    requires year % 4 != 0; 
       @    ensures \result == false;
       @ also
       @     requires year % 4 == 0 && year % 100 != 0;
       @     ensures \result == true;
       @ also
       @     requires year % 4 == 0 && year % 100 == 0 && year % 400 != 0;
       @     ensures \result == false;
       @ also
       @     requires year % 4 == 0 && year % 100 == 0 && year % 400 == 0;
       @     ensures \result == true;
    |} @*/
    public /*@ pure @*/ boolean isLeapYear(int year) {
        boolean leap = false;
         
        if (year % 4 == 0)
        {
            if ( year * 100 == 0) // if ( year % 100 == 0)
            {
                if ( year % 400 == 0)
                    leap = true;
                else
                    leap = false;
            }
            else
                leap = true;
        }
        else
            leap = false;
	
	return leap;
   }
}",Buggy
"public class LeapYear {
    /*@ requires 0 < year;
    {|
       @    requires year % 4 != 0; 
       @    ensures \result == false;
       @ also
       @     requires year % 4 == 0 && year % 100 != 0;
       @     ensures \result == true;
       @ also
       @     requires year % 4 == 0 && year % 100 == 0 && year % 400 != 0;
       @     ensures \result == false;
       @ also
       @     requires year % 4 == 0 && year % 100 == 0 && year % 400 == 0;
       @     ensures \result == true;
    |} @*/
    public /*@ pure @*/ boolean isLeapYear(int year) {
        boolean leap = false;
         
        if (year % 4 == 0)
        {
            if ( year % 100 != 0) // if ( year % 100 == 0)
            {
                if ( year % 400 == 0)
                    leap = true;
                else
                    leap = false;
            }
            else
                leap = true;
        }
        else
            leap = false;
	
	return leap;
   }
}",Buggy
"public class LeapYear {
    /*@ requires 0 < year;
    {|
       @    requires year % 4 != 0; 
       @    ensures \result == false;
       @ also
       @     requires year % 4 == 0 && year % 100 != 0;
       @     ensures \result == true;
       @ also
       @     requires year % 4 == 0 && year % 100 == 0 && year % 400 != 0;
       @     ensures \result == false;
       @ also
       @     requires year % 4 == 0 && year % 100 == 0 && year % 400 == 0;
       @     ensures \result == true;
    |} @*/
    public /*@ pure @*/ boolean isLeapYear(int year) {
        boolean leap = false;
         
        if (year % 4 == 0)
        {
            if ( year % 100 == 0)
            {
                if ( year * 400 == 0) // if ( year % 400 == 0)
                    leap = true;
                else
                    leap = false;
            }
            else
                leap = true;
        }
        else
            leap = false;
	
	return leap;
   }
}",Buggy
"public class LeapYear {
    /*@ requires 0 < year;
    {|
       @    requires year % 4 != 0; 
       @    ensures \result == false;
       @ also
       @     requires year % 4 == 0 && year % 100 != 0;
       @     ensures \result == true;
       @ also
       @     requires year % 4 == 0 && year % 100 == 0 && year % 400 != 0;
       @     ensures \result == false;
       @ also
       @     requires year % 4 == 0 && year % 100 == 0 && year % 400 == 0;
       @     ensures \result == true;
    |} @*/
    public /*@ pure @*/ boolean isLeapYear(int year) {
        boolean leap = false;
         
        if (year % 4 == 0)
        {
            if ( year % 100 == 0)
            {
                if ( year % 400 != 0) // if ( year % 400 == 0)
                    leap = true;
                else
                    leap = false;
            }
            else
                leap = true;
        }
        else
            leap = false;
	
	return leap;
   }
}",Buggy
"public class LeapYear {
    /*@ requires 0 < year;
    {|
       @    requires year % 4 != 0; 
       @    ensures \result == false;
       @ also
       @     requires year % 4 == 0 && year % 100 != 0;
       @     ensures \result == true;
       @ also
       @     requires year % 4 == 0 && year % 100 == 0 && year % 400 != 0;
       @     ensures \result == false;
       @ also
       @     requires year % 4 == 0 && year % 100 == 0 && year % 400 == 0;
       @     ensures \result == true;
    |} @*/
    public /*@ pure @*/ boolean isLeapYear(int year) {
        boolean leap = false;
         
        if (year % 4 == 0)
        {
            if ( year % 100 == 0)
            {
                if ( year % 400 == 0)
                    leap = true;
                else
                    leap = false;
            }
            else
                leap = true;
        }
        else
            leap = false;
	
	return !leap; // leap;
   }
}",Buggy
"public class LinearSearch {
     private static /*@ spec_public*/ int location;

      //@ assignable location;
      //@ ensures \result == -1 <==>  (\forall int i; 0 <= i && i < array.length; array[i] != search);
      //@ ensures 0 <= \result && \result < array.length ==>  array[\result] == search;
      public static int linearSearch(int search, int array[]) {
	int c;
	//@ maintaining 0 <= c && c <= array.length;
	//@ maintaining (\forall int i; 0 <= i && i < c; array[i] != search);
	//@ decreases array.length - c;
        for (c = 0; c <= array.length; c++) {//for (c = 0; c < array.length; c++) 
          if (array[c] == search) {
	      location = c;
              break;
          }
       }
       if (c == array.length) {
            location = -1;
       }
       return location;
      }
  }",Buggy
"public class LinearSearch {
     private static /*@ spec_public*/ int location;

      //@ assignable location;
      //@ ensures \result == -1 <==>  (\forall int i; 0 <= i && i < array.length; array[i] != search);
      //@ ensures 0 <= \result && \result < array.length ==>  array[\result] == search;
      public static int linearSearch(int search, int array[]) {
	int c;
	//@ maintaining 0 <= c && c <= array.length;
	//@ maintaining (\forall int i; 0 <= i && i < c; array[i] != search);
	//@ decreases array.length - c;
        for (c = 0; c >= array.length; c++) { //for (c = 0; c < array.length; c++) 
          if (array[c] == search) {
	      location = c;
              break;
          }
       }
       if (c == array.length) {
            location = -1;
       }
       return location;
      }
 }",Buggy
"public class LinearSearch {
     private static /*@ spec_public*/ int location;

      //@ assignable location;
      //@ ensures \result == -1 <==>  (\forall int i; 0 <= i && i < array.length; array[i] != search);
      //@ ensures 0 <= \result && \result < array.length ==>  array[\result] == search;
      public static int linearSearch(int search, int array[]) {
	int c;
	//@ maintaining 0 <= c && c <= array.length;
	//@ maintaining (\forall int i; 0 <= i && i < c; array[i] != search);
	//@ decreases array.length - c;
        for (c = 0; c < array.length; c++) {  
          if (array[c] != search) { //if (array[c] == search)
	      location = c;
              break;
          }
        }
        if (c == array.length) {
            location = -1;
        }
        return location;
      }
  }",Buggy
"public class LinearSearch {
     private static /*@ spec_public*/ int location;

      //@ assignable location;
      //@ ensures \result == -1 <==>  (\forall int i; 0 <= i && i < array.length; array[i] != search);
      //@ ensures 0 <= \result && \result < array.length ==>  array[\result] == search;
      public static int linearSearch(int search, int array[]) {
	int c;
	//@ maintaining 0 <= c && c <= array.length;
	//@ maintaining (\forall int i; 0 <= i && i < c; array[i] != search);
	//@ decreases array.length - c;
        for (c = 0; c < array.length; c++) {  
          if (array[c] == search)
          {
	      location = c;
              break;
          }
        }
       if (c != array.length) { //if (c == array.length) {
            location = -1;
       }
       return location;
      }
  }",Buggy
"public class LinearSearch {
     private static /*@ spec_public*/ int location;

      //@ assignable location;
      //@ ensures \result == -1 <==>  (\forall int i; 0 <= i && i < array.length; array[i] != search);
      //@ ensures 0 <= \result && \result < array.length ==>  array[\result] == search;
      public static int linearSearch(int search, int array[]) {
	int c;
	//@ maintaining 0 <= c && c <= array.length;
	//@ maintaining (\forall int i; 0 <= i && i < c; array[i] != search);
	//@ decreases array.length - c;
        for (c = 0; c < array.length; c++) {  
          if (array[c] == search)
          {
	      location = c;
              break;
          }
        }
       if (c == array.length) {
            location = -1;
       }
       return (location == 0 ? 1 : 0);//location;
      }
  }",Buggy
"public class OddEven {	
    	 //@ ensures \result <==>  x%2 == 0;
    	 //@ ensures !\result <==> x%2 != 0;
	 public /*@ pure @*/ boolean isEven(int x) { 
         	return x*2 == 0; // return x%2 == 0;
       	 } 

    	 //@ ensures !\result <==> x%2 == 0;
    	 //@ ensures \result <==>  x%2 != 0;
	 public /*@ pure @*/ boolean isOdd(int x) { 
         	return x%2 != 0;
       	 } 
}",Buggy
"public class OddEven {	
    	 //@ ensures \result <==>  x%2 == 0;
    	 //@ ensures !\result <==> x%2 != 0;
	 public /*@ pure @*/ boolean isEven(int x) { 
         	return x%2 != 0; // return x%2 == 0;
       	 } 

    	 //@ ensures !\result <==> x%2 == 0;
    	 //@ ensures \result <==>  x%2 != 0;
	 public /*@ pure @*/ boolean isOdd(int x) { 
         	return x%2 != 0;
       	 } 
}",Buggy
"public class OddEven {	
    	 //@ ensures \result <==>  x%2 == 0;
    	 //@ ensures !\result <==> x%2 != 0;
	 public /*@ pure @*/ boolean isEven(int x) { 
         	return x%2 == 0;
       	 } 

    	 //@ ensures !\result <==> x%2 == 0;
    	 //@ ensures \result <==>  x%2 != 0;
	 public /*@ pure @*/ boolean isOdd(int x) { 
         	return x*2 != 0; // return x%2 != 0;
       	 } 
}",Buggy
"public class OddEven {	
    	 //@ ensures \result <==>  x%2 == 0;
    	 //@ ensures !\result <==> x%2 != 0;
	 public /*@ pure @*/ boolean isEven(int x) { 
         	return x%2 == 0;
       	 } 

    	 //@ ensures !\result <==> x%2 == 0;
    	 //@ ensures \result <==>  x%2 != 0;
	 public /*@ pure @*/ boolean isOdd(int x) { 
         	return x%2 == 0; // return x%2 != 0;
       	 } 
}",Buggy
"public class Perimeter
{   
    //@ requires 0 < x && x <= Short.MAX_VALUE;
    //@ ensures \result == 4*x;
    /*@ pure @*/ long Perimeter(short x)
    {
	long squarePerimeter = 4 / (long)x;//long squarePerimeter = 4 * (long)x;
	return squarePerimeter;
    }

    //@ requires 0 < x && x <= Integer.MAX_VALUE;
    //@ ensures \result == 5*x;
    /*@ pure @*/ long Perimeter(int x)
    {
	long pentagonPerimeter = 5 * (long)x;
	return pentagonPerimeter;
    }

    //@ requires 0 < x && 6*x <= Long.MAX_VALUE;
    //@ ensures \result == 6*x;
    /*@ pure @*/ long Perimeter(long x)
    {
	long hexagonalPerimeter = 6 * x;
	return hexagonalPerimeter;
    }

    //@ requires 0 < x && 0 < y && 2*x + 2*y <= Integer.MAX_VALUE;
    //@ ensures \result == 2*x + 2*y;
    /*@ pure @*/ long Perimeter(int x, int y)
    {
	long perimeterRectangle = 2*((long)x + (long)y);
	return perimeterRectangle;
    }

    //@ requires 0 < x && 0 < y && 0 < z && x + y + z <= Integer.MAX_VALUE;
    //@ ensures \result == x + y + z;
    /*@ pure @*/ long Perimeter(int x, int y, int z)
    {
	long trianglePerimeter = (long)x + (long)y + (long)z;
	return trianglePerimeter;
    }
  
    //@ requires 0 < w && 0 < x && 0 < y && 0 < z && w + x + y + z <= Integer.MAX_VALUE;
    //@ ensures \result == w + x + y + z;
    /*@ pure @*/ long Perimeter(int w, int x, int y, int z)
    {
	long trapeziumPerimeter = (long)w + (long)x + (long)y + (long)z;
	return trapeziumPerimeter;
    }
}",Buggy
"public class PerimeterDriver {
	/*@ requires 0 <= select && select < 6;
	  @ {|
	     @    requires select == 0;
	     @    requires 0 < shortNum && shortNum <= Short.MAX_VALUE;
	     @    ensures \result == 4*shortNum;
	     @ also 
	     @    requires select == 1;
	     @    requires 0 < w && w <= Integer.MAX_VALUE;
	     @    ensures \result == 5*w;
	     @ also 
	     @    requires select == 2;
	     @    requires 0 < longNum && 6*longNum <= Long.MAX_VALUE;
	     @    ensures \result == 6*longNum;
	     @ also 
	     @    requires select == 3;
	     @    requires 0 < w && 0 < x && 2*w + 2*x <= Integer.MAX_VALUE;
             @    ensures \result == 2*w + 2*x;
	     @ also 
	     @    requires select == 4;
	     @    requires 0 < w && 0 < x && 0 < y && w + x + y <= Integer.MAX_VALUE;
	     @    ensures \result == w + x + y;
	     @ also 
	     @    requires select == 5;
	     @    requires 0 < w && 0 < x && 0 < y && 0 < z && w + x + y + z <= Integer.MAX_VALUE;
	     @    ensures \result == w + x + y + z;
	  @ |} @*/
	 public /*@ pure @*/ long driver(int select, int w, int x, int y, int z, short shortNum, long longNum) {

		Perimeter p = new Perimeter();
		long result = 0;

		switch (select) {
		case 0:
			result = p.Perimeter(shortNum);
			break;
		case 1:
			result = p.Perimeter(w);
			break;
		case 2:
			result = p.Perimeter(longNum);
			break;
		case 3:	
			result = p.Perimeter(w, x);
			break;
		case 4:
			result = p.Perimeter(w, x, y);
			break;
		case 5:
			result = p.Perimeter(w, x, y, z);
			break;
		}
		return result;
	}
}",Buggy
"public class Perimeter
{   
    //@ requires 0 < x && x <= Short.MAX_VALUE;
    //@ ensures \result == 4*x;
    /*@ pure @*/ long Perimeter(short x)
    {
	long squarePerimeter = 4 * (long)x;
	return squarePerimeter;
    }

    //@ requires 0 < x && x <= Integer.MAX_VALUE;
    //@ ensures \result == 5*x;
    /*@ pure @*/ long Perimeter(int x)
    {
	long pentagonPerimeter = 5 * (long)x;
	return pentagonPerimeter;
    }
 
    //@ requires 0 < x && 6*x <= Long.MAX_VALUE;
    //@ ensures \result == 6*x;
    /*@ pure @*/ long Perimeter(long x)
    {
	long hexagonalPerimeter = 6 * x;
	return hexagonalPerimeter;
    }

    //@ requires 0 < x && 0 < y && 2*x + 2*y <= Integer.MAX_VALUE;
    //@ ensures \result == 2*x + 2*y;
    /*@ pure @*/ long Perimeter(int x, int y)
    {
	long perimeterRectangle = 2*((long)x + (long)y);
	return perimeterRectangle;
    }

    //@ requires 0 < x && 0 < y && 0 < z && x + y + z <= Integer.MAX_VALUE;
    //@ ensures \result == x + y + z;
    /*@ pure @*/ long Perimeter(int x, int y, int z)
    {
	long trianglePerimeter = (long)x + (long)y + (long)z;
	return trianglePerimeter;
    }
  
    //@ requires 0 < w && 0 < x && 0 < y && 0 < z && w + x + y + z <= Integer.MAX_VALUE;
    //@ ensures \result == w + x + y + z;
    /*@ pure @*/ long Perimeter(int w, int x, int y, int z)
    {
	long trapeziumPerimeter = (long)w + (long)x + (long)y - (long)z; // long trapeziumPerimeter = (long)w + (long)x + (long)y + (long)z;
	return trapeziumPerimeter;
    }
}",Buggy
"public class PerimeterDriver {
	/*@ requires 0 <= select && select < 6;
	  @ {|
	     @    requires select == 0;
	     @    requires 0 < shortNum && shortNum <= Short.MAX_VALUE;
	     @    ensures \result == 4*shortNum;
	     @ also 
	     @    requires select == 1;
	     @    requires 0 < w && w <= Integer.MAX_VALUE;
	     @    ensures \result == 5*w;
	     @ also 
	     @    requires select == 2;
	     @    requires 0 < longNum && 6*longNum <= Long.MAX_VALUE;
	     @    ensures \result == 6*longNum;
	     @ also 
	     @    requires select == 3;
	     @    requires 0 < w && 0 < x && 2*w + 2*x <= Integer.MAX_VALUE;
             @    ensures \result == 2*w + 2*x;
	     @ also 
	     @    requires select == 4;
	     @    requires 0 < w && 0 < x && 0 < y && w + x + y <= Integer.MAX_VALUE;
	     @    ensures \result == w + x + y;
	     @ also 
	     @    requires select == 5;
	     @    requires 0 < w && 0 < x && 0 < y && 0 < z && w + x + y + z <= Integer.MAX_VALUE;
	     @    ensures \result == w + x + y + z;
	  @ |} @*/
	 public /*@ pure @*/ long driver(int select, int w, int x, int y, int z, short shortNum, long longNum) {

		Perimeter p = new Perimeter();
		long result = 0;

		switch (select) {
		case 0:
			result = p.Perimeter(shortNum);
			break;
		case 1:
			result = p.Perimeter(w);
			break;
		case 2:
			result = p.Perimeter(longNum);
			break;
		case 3:	
			result = p.Perimeter(w, x);
			break;
		case 4:
			result = p.Perimeter(w, x, y);
			break;
		case 5:
			result = p.Perimeter(w, x, y, z);
			break;
		}
		return result;
	}
}",Buggy
"public class Perimeter
{   
    //@ requires 0 < x && x <= Short.MAX_VALUE;
    //@ ensures \result == 4*x;
    /*@ pure @*/ long Perimeter(short x)
    {
	long squarePerimeter = 4 * (long)x;
	return squarePerimeter + 1;//squarePerimeter;
    }

    //@ requires 0 < x && x <= Integer.MAX_VALUE;
    //@ ensures \result == 5*x;
    /*@ pure @*/ long Perimeter(int x)
    {
	long pentagonPerimeter = 5 * (long)x;
	return pentagonPerimeter;
    }
 
    //@ requires 0 < x && 6*x <= Long.MAX_VALUE;
    //@ ensures \result == 6*x;
    /*@ pure @*/ long Perimeter(long x)
    {
	long hexagonalPerimeter = 6 * x;
	return hexagonalPerimeter;
    }

    //@ requires 0 < x && 0 < y && 2*x + 2*y <= Integer.MAX_VALUE;
    //@ ensures \result == 2*x + 2*y;
    /*@ pure @*/ long Perimeter(int x, int y)
    {
	long perimeterRectangle = 2*((long)x + (long)y);
	return perimeterRectangle;
    }

    //@ requires 0 < x && 0 < y && 0 < z && x + y + z <= Integer.MAX_VALUE;
    //@ ensures \result == x + y + z;
    /*@ pure @*/ long Perimeter(int x, int y, int z)
    {
	long trianglePerimeter = (long)x + (long)y + (long)z;
	return trianglePerimeter;
    }
  
    //@ requires 0 < w && 0 < x && 0 < y && 0 < z && w + x + y + z <= Integer.MAX_VALUE;
    //@ ensures \result == w + x + y + z;
    /*@ pure @*/ long Perimeter(int w, int x, int y, int z)
    {
	long trapeziumPerimeter = (long)w + (long)x + (long)y + (long)z;
	return trapeziumPerimeter;
    }
}",Buggy
"public class PerimeterDriver {
	/*@ requires 0 <= select && select < 6;
	  @ {|
	     @    requires select == 0;
	     @    requires 0 < shortNum && shortNum <= Short.MAX_VALUE;
	     @    ensures \result == 4*shortNum;
	     @ also 
	     @    requires select == 1;
	     @    requires 0 < w && w <= Integer.MAX_VALUE;
	     @    ensures \result == 5*w;
	     @ also 
	     @    requires select == 2;
	     @    requires 0 < longNum && 6*longNum <= Long.MAX_VALUE;
	     @    ensures \result == 6*longNum;
	     @ also 
	     @    requires select == 3;
	     @    requires 0 < w && 0 < x && 2*w + 2*x <= Integer.MAX_VALUE;
             @    ensures \result == 2*w + 2*x;
	     @ also 
	     @    requires select == 4;
	     @    requires 0 < w && 0 < x && 0 < y && w + x + y <= Integer.MAX_VALUE;
	     @    ensures \result == w + x + y;
	     @ also 
	     @    requires select == 5;
	     @    requires 0 < w && 0 < x && 0 < y && 0 < z && w + x + y + z <= Integer.MAX_VALUE;
	     @    ensures \result == w + x + y + z;
	  @ |} @*/
	 public /*@ pure @*/ long driver(int select, int w, int x, int y, int z, short shortNum, long longNum) {

		Perimeter p = new Perimeter();
		long result = 0;

		switch (select) {
		case 0:
			result = p.Perimeter(shortNum);
			break;
		case 1:
			result = p.Perimeter(w);
			break;
		case 2:
			result = p.Perimeter(longNum);
			break;
		case 3:	
			result = p.Perimeter(w, x);
			break;
		case 4:
			result = p.Perimeter(w, x, y);
			break;
		case 5:
			result = p.Perimeter(w, x, y, z);
			break;
		}
		return result;
	}
}",Buggy
"public class Perimeter
{   
    //@ requires 0 < x && x <= Short.MAX_VALUE;
    //@ ensures \result == 4*x;
    /*@ pure @*/ long Perimeter(short x)
    {
	long squarePerimeter = 4 * (long)x;
	return squarePerimeter;
    }

    //@ requires 0 < x && x <= Integer.MAX_VALUE;
    //@ ensures \result == 5*x;
    /*@ pure @*/ long Perimeter(int x)
    {
	long pentagonPerimeter = 5 * (long)x;
	return pentagonPerimeter + 1;//pentagonPerimeter;
    }

    //@ requires 0 < x && 6*x <= Long.MAX_VALUE;
    //@ ensures \result == 6*x;
    /*@ pure @*/ long Perimeter(long x)
    {
	long hexagonalPerimeter = 6 * x;
	return hexagonalPerimeter;
    }

    //@ requires 0 < x && 0 < y && 2*x + 2*y <= Integer.MAX_VALUE;
    //@ ensures \result == 2*x + 2*y;
    /*@ pure @*/ long Perimeter(int x, int y)
    {
	long perimeterRectangle = 2*((long)x + (long)y);
	return perimeterRectangle;
    }

    //@ requires 0 < x && 0 < y && 0 < z && x + y + z <= Integer.MAX_VALUE;
    //@ ensures \result == x + y + z;
    /*@ pure @*/ long Perimeter(int x, int y, int z)
    {
	long trianglePerimeter = (long)x + (long)y + (long)z;
	return trianglePerimeter;
    }
  
    //@ requires 0 < w && 0 < x && 0 < y && 0 < z && w + x + y + z <= Integer.MAX_VALUE;
    //@ ensures \result == w + x + y + z;
    /*@ pure @*/ long Perimeter(int w, int x, int y, int z)
    {
	long trapeziumPerimeter = (long)w + (long)x + (long)y + (long)z;
	return trapeziumPerimeter;
    }
}",Buggy
"public class PerimeterDriver {
	/*@ requires 0 <= select && select < 6;
	  @ {|
	     @    requires select == 0;
	     @    requires 0 < shortNum && shortNum <= Short.MAX_VALUE;
	     @    ensures \result == 4*shortNum;
	     @ also 
	     @    requires select == 1;
	     @    requires 0 < w && w <= Integer.MAX_VALUE;
	     @    ensures \result == 5*w;
	     @ also 
	     @    requires select == 2;
	     @    requires 0 < longNum && 6*longNum <= Long.MAX_VALUE;
	     @    ensures \result == 6*longNum;
	     @ also 
	     @    requires select == 3;
	     @    requires 0 < w && 0 < x && 2*w + 2*x <= Integer.MAX_VALUE;
             @    ensures \result == 2*w + 2*x;
	     @ also 
	     @    requires select == 4;
	     @    requires 0 < w && 0 < x && 0 < y && w + x + y <= Integer.MAX_VALUE;
	     @    ensures \result == w + x + y;
	     @ also 
	     @    requires select == 5;
	     @    requires 0 < w && 0 < x && 0 < y && 0 < z && w + x + y + z <= Integer.MAX_VALUE;
	     @    ensures \result == w + x + y + z;
	  @ |} @*/
	 public /*@ pure @*/ long driver(int select, int w, int x, int y, int z, short shortNum, long longNum) {

		Perimeter p = new Perimeter();
		long result = 0;

		switch (select) {
		case 0:
			result = p.Perimeter(shortNum);
			break;
		case 1:
			result = p.Perimeter(w);
			break;
		case 2:
			result = p.Perimeter(longNum);
			break;
		case 3:	
			result = p.Perimeter(w, x);
			break;
		case 4:
			result = p.Perimeter(w, x, y);
			break;
		case 5:
			result = p.Perimeter(w, x, y, z);
			break;
		}
		return result;
	}
}",Buggy
"public class Perimeter
{   
    //@ requires 0 < x && x <= Short.MAX_VALUE;
    //@ ensures \result == 4*x;
    /*@ pure @*/ long Perimeter(short x)
    {
	long squarePerimeter = 4 * (long)x;
	return squarePerimeter;
    }

    //@ requires 0 < x && x <= Integer.MAX_VALUE;
    //@ ensures \result == 5*x;
    /*@ pure @*/ long Perimeter(int x)
    {
	long pentagonPerimeter = 5 * (long)x;
	return pentagonPerimeter;
    }

    //@ requires 0 < x && 6*x <= Long.MAX_VALUE;
    //@ ensures \result == 6*x;
    /*@ pure @*/ long Perimeter(long x)
    {
	long hexagonalPerimeter = 6 * x;
	return hexagonalPerimeter + 1; //hexagonalPerimeter;
    }

    //@ requires 0 < x && 0 < y && 2*x + 2*y <= Integer.MAX_VALUE;
    //@ ensures \result == 2*x + 2*y;
    /*@ pure @*/ long Perimeter(int x, int y)
    {
	long perimeterRectangle = 2*((long)x + (long)y);
	return perimeterRectangle;
    }

    //@ requires 0 < x && 0 < y && 0 < z && x + y + z <= Integer.MAX_VALUE;
    //@ ensures \result == x + y + z;
    /*@ pure @*/ long Perimeter(int x, int y, int z)
    {
	long trianglePerimeter = (long)x + (long)y + (long)z;
	return trianglePerimeter;
    }
  
    //@ requires 0 < w && 0 < x && 0 < y && 0 < z && w + x + y + z <= Integer.MAX_VALUE;
    //@ ensures \result == w + x + y + z;
    /*@ pure @*/ long Perimeter(int w, int x, int y, int z)
    {
	long trapeziumPerimeter = (long)w + (long)x + (long)y + (long)z;
	return trapeziumPerimeter;
    }
}",Buggy
"public class PerimeterDriver {
	/*@ requires 0 <= select && select < 6;
	  @ {|
	     @    requires select == 0;
	     @    requires 0 < shortNum && shortNum <= Short.MAX_VALUE;
	     @    ensures \result == 4*shortNum;
	     @ also 
	     @    requires select == 1;
	     @    requires 0 < w && w <= Integer.MAX_VALUE;
	     @    ensures \result == 5*w;
	     @ also 
	     @    requires select == 2;
	     @    requires 0 < longNum && 6*longNum <= Long.MAX_VALUE;
	     @    ensures \result == 6*longNum;
	     @ also 
	     @    requires select == 3;
	     @    requires 0 < w && 0 < x && 2*w + 2*x <= Integer.MAX_VALUE;
             @    ensures \result == 2*w + 2*x;
	     @ also 
	     @    requires select == 4;
	     @    requires 0 < w && 0 < x && 0 < y && w + x + y <= Integer.MAX_VALUE;
	     @    ensures \result == w + x + y;
	     @ also 
	     @    requires select == 5;
	     @    requires 0 < w && 0 < x && 0 < y && 0 < z && w + x + y + z <= Integer.MAX_VALUE;
	     @    ensures \result == w + x + y + z;
	  @ |} @*/
	 public /*@ pure @*/ long driver(int select, int w, int x, int y, int z, short shortNum, long longNum) {

		Perimeter p = new Perimeter();
		long result = 0;

		switch (select) {
		case 0:
			result = p.Perimeter(shortNum);
			break;
		case 1:
			result = p.Perimeter(w);
			break;
		case 2:
			result = p.Perimeter(longNum);
			break;
		case 3:	
			result = p.Perimeter(w, x);
			break;
		case 4:
			result = p.Perimeter(w, x, y);
			break;
		case 5:
			result = p.Perimeter(w, x, y, z);
			break;
		}
		return result;
	}
}",Buggy
"public class Perimeter
{   
    //@ requires 0 < x && x <= Short.MAX_VALUE;
    //@ ensures \result == 4*x;
    /*@ pure @*/ long Perimeter(short x)
    {
	long squarePerimeter = 4 * (long)x;
	return squarePerimeter;
    }

    //@ requires 0 < x && x <= Integer.MAX_VALUE;
    //@ ensures \result == 5*x;
    /*@ pure @*/ long Perimeter(int x)
    {
	long pentagonPerimeter = 5 * (long)x;
	return pentagonPerimeter;
    }

    //@ requires 0 < x && 6*x <= Long.MAX_VALUE;
    //@ ensures \result == 6*x;
    /*@ pure @*/ long Perimeter(long x)
    {
	long hexagonalPerimeter = 6 * x;
	return hexagonalPerimeter;
    }

    //@ requires 0 < x && 0 < y && 2*x + 2*y <= Integer.MAX_VALUE;
    //@ ensures \result == 2*x + 2*y;
    /*@ pure @*/ long Perimeter(int x, int y)
    {
	long perimeterRectangle = 2*((long)x + (long)y);
	return perimeterRectangle + 1;//perimeterRectangle;
    }

    //@ requires 0 < x && 0 < y && 0 < z && x + y + z <= Integer.MAX_VALUE;
    //@ ensures \result == x + y + z;
    /*@ pure @*/ long Perimeter(int x, int y, int z)
    {
	long trianglePerimeter = (long)x + (long)y + (long)z;
	return trianglePerimeter;
    }
  
    //@ requires 0 < w && 0 < x && 0 < y && 0 < z && w + x + y + z <= Integer.MAX_VALUE;
    //@ ensures \result == w + x + y + z;
    /*@ pure @*/ long Perimeter(int w, int x, int y, int z)
    {
	long trapeziumPerimeter = (long)w + (long)x + (long)y + (long)z;
	return trapeziumPerimeter;
    }
}",Buggy
"public class PerimeterDriver {
	/*@ requires 0 <= select && select < 6;
	  @ {|
	     @    requires select == 0;
	     @    requires 0 < shortNum && shortNum <= Short.MAX_VALUE;
	     @    ensures \result == 4*shortNum;
	     @ also 
	     @    requires select == 1;
	     @    requires 0 < w && w <= Integer.MAX_VALUE;
	     @    ensures \result == 5*w;
	     @ also 
	     @    requires select == 2;
	     @    requires 0 < longNum && 6*longNum <= Long.MAX_VALUE;
	     @    ensures \result == 6*longNum;
	     @ also 
	     @    requires select == 3;
	     @    requires 0 < w && 0 < x && 2*w + 2*x <= Integer.MAX_VALUE;
             @    ensures \result == 2*w + 2*x;
	     @ also 
	     @    requires select == 4;
	     @    requires 0 < w && 0 < x && 0 < y && w + x + y <= Integer.MAX_VALUE;
	     @    ensures \result == w + x + y;
	     @ also 
	     @    requires select == 5;
	     @    requires 0 < w && 0 < x && 0 < y && 0 < z && w + x + y + z <= Integer.MAX_VALUE;
	     @    ensures \result == w + x + y + z;
	  @ |} @*/
	 public /*@ pure @*/ long driver(int select, int w, int x, int y, int z, short shortNum, long longNum) {

		Perimeter p = new Perimeter();
		long result = 0;

		switch (select) {
		case 0:
			result = p.Perimeter(shortNum);
			break;
		case 1:
			result = p.Perimeter(w);
			break;
		case 2:
			result = p.Perimeter(longNum);
			break;
		case 3:	
			result = p.Perimeter(w, x);
			break;
		case 4:
			result = p.Perimeter(w, x, y);
			break;
		case 5:
			result = p.Perimeter(w, x, y, z);
			break;
		}
		return result;
	}
}",Buggy
"public class Perimeter
{   
    //@ requires 0 < x && x <= Short.MAX_VALUE;
    //@ ensures \result == 4*x;
    /*@ pure @*/ long Perimeter(short x)
    {
	long squarePerimeter = 4 * (long)x;
	return squarePerimeter;
    }

    //@ requires 0 < x && x <= Integer.MAX_VALUE;
    //@ ensures \result == 5*x;
    /*@ pure @*/ long Perimeter(int x)
    {
	long pentagonPerimeter = 5 * (long)x;
	return pentagonPerimeter;
    }
 
    //@ requires 0 < x && 6*x <= Long.MAX_VALUE;
    //@ ensures \result == 6*x;
    /*@ pure @*/ long Perimeter(long x)
    {
	long hexagonalPerimeter = 6 * x;
	return hexagonalPerimeter;
    }

    //@ requires 0 < x && 0 < y && 2*x + 2*y <= Integer.MAX_VALUE;
    //@ ensures \result == 2*x + 2*y;
    /*@ pure @*/ long Perimeter(int x, int y)
    {
	long perimeterRectangle = 2*((long)x + (long)y);
	return perimeterRectangle;
    }

    //@ requires 0 < x && 0 < y && 0 < z && x + y + z <= Integer.MAX_VALUE;
    //@ ensures \result == x + y + z;
    /*@ pure @*/ long Perimeter(int x, int y, int z)
    {
	long trianglePerimeter = (long)x + (long)y + (long)z;
	return trianglePerimeter + 1;//trianglePerimeter;
    }
  
    //@ requires 0 < w && 0 < x && 0 < y && 0 < z && w + x + y + z <= Integer.MAX_VALUE;
    //@ ensures \result == w + x + y + z;
    /*@ pure @*/ long Perimeter(int w, int x, int y, int z)
    {
	long trapeziumPerimeter = (long)w + (long)x + (long)y + (long)z;
	return trapeziumPerimeter;
    }
}",Buggy
"public class PerimeterDriver {
	/*@ requires 0 <= select && select < 6;
	  @ {|
	     @    requires select == 0;
	     @    requires 0 < shortNum && shortNum <= Short.MAX_VALUE;
	     @    ensures \result == 4*shortNum;
	     @ also 
	     @    requires select == 1;
	     @    requires 0 < w && w <= Integer.MAX_VALUE;
	     @    ensures \result == 5*w;
	     @ also 
	     @    requires select == 2;
	     @    requires 0 < longNum && 6*longNum <= Long.MAX_VALUE;
	     @    ensures \result == 6*longNum;
	     @ also 
	     @    requires select == 3;
	     @    requires 0 < w && 0 < x && 2*w + 2*x <= Integer.MAX_VALUE;
             @    ensures \result == 2*w + 2*x;
	     @ also 
	     @    requires select == 4;
	     @    requires 0 < w && 0 < x && 0 < y && w + x + y <= Integer.MAX_VALUE;
	     @    ensures \result == w + x + y;
	     @ also 
	     @    requires select == 5;
	     @    requires 0 < w && 0 < x && 0 < y && 0 < z && w + x + y + z <= Integer.MAX_VALUE;
	     @    ensures \result == w + x + y + z;
	  @ |} @*/
	 public /*@ pure @*/ long driver(int select, int w, int x, int y, int z, short shortNum, long longNum) {

		Perimeter p = new Perimeter();
		long result = 0;

		switch (select) {
		case 0:
			result = p.Perimeter(shortNum);
			break;
		case 1:
			result = p.Perimeter(w);
			break;
		case 2:
			result = p.Perimeter(longNum);
			break;
		case 3:	
			result = p.Perimeter(w, x);
			break;
		case 4:
			result = p.Perimeter(w, x, y);
			break;
		case 5:
			result = p.Perimeter(w, x, y, z);
			break;
		}
		return result;
	}
}",Buggy
"public class Perimeter
{   
    //@ requires 0 < x && x <= Short.MAX_VALUE;
    //@ ensures \result == 4*x;
    /*@ pure @*/ long Perimeter(short x)
    {
	long squarePerimeter = 4 * (long)x;
	return squarePerimeter;
    }

    //@ requires 0 < x && x <= Integer.MAX_VALUE;
    //@ ensures \result == 5*x;
    /*@ pure @*/ long Perimeter(int x)
    {
	long pentagonPerimeter = 5 * (long)x;
	return pentagonPerimeter;
    }

    //@ requires 0 < x && 6*x <= Long.MAX_VALUE;
    //@ ensures \result == 6*x;
    /*@ pure @*/ long Perimeter(long x)
    {
	long hexagonalPerimeter = 6 * x;
	return hexagonalPerimeter;
    }

    //@ requires 0 < x && 0 < y && 2*x + 2*y <= Integer.MAX_VALUE;
    //@ ensures \result == 2*x + 2*y;
    /*@ pure @*/ long Perimeter(int x, int y)
    {
	long perimeterRectangle = 2*((long)x + (long)y);
	return perimeterRectangle;
    }

    //@ requires 0 < x && 0 < y && 0 < z && x + y + z <= Integer.MAX_VALUE;
    //@ ensures \result == x + y + z;
    /*@ pure @*/ long Perimeter(int x, int y, int z)
    {
	long trianglePerimeter = (long)x + (long)y + (long)z;
	return trianglePerimeter;
    }
  
    //@ requires 0 < w && 0 < x && 0 < y && 0 < z && w + x + y + z <= Integer.MAX_VALUE;
    //@ ensures \result == w + x + y + z;
    /*@ pure @*/ long Perimeter(int w, int x, int y, int z)
    {
	long trapeziumPerimeter = (long)w + (long)x + (long)y + (long)z;
	return trapeziumPerimeter + 1;//trapeziumPerimeter;
    }
}",Buggy
"public class PerimeterDriver {
	/*@ requires 0 <= select && select < 6;
	  @ {|
	     @    requires select == 0;
	     @    requires 0 < shortNum && shortNum <= Short.MAX_VALUE;
	     @    ensures \result == 4*shortNum;
	     @ also 
	     @    requires select == 1;
	     @    requires 0 < w && w <= Integer.MAX_VALUE;
	     @    ensures \result == 5*w;
	     @ also 
	     @    requires select == 2;
	     @    requires 0 < longNum && 6*longNum <= Long.MAX_VALUE;
	     @    ensures \result == 6*longNum;
	     @ also 
	     @    requires select == 3;
	     @    requires 0 < w && 0 < x && 2*w + 2*x <= Integer.MAX_VALUE;
             @    ensures \result == 2*w + 2*x;
	     @ also 
	     @    requires select == 4;
	     @    requires 0 < w && 0 < x && 0 < y && w + x + y <= Integer.MAX_VALUE;
	     @    ensures \result == w + x + y;
	     @ also 
	     @    requires select == 5;
	     @    requires 0 < w && 0 < x && 0 < y && 0 < z && w + x + y + z <= Integer.MAX_VALUE;
	     @    ensures \result == w + x + y + z;
	  @ |} @*/
	 public /*@ pure @*/ long driver(int select, int w, int x, int y, int z, short shortNum, long longNum) {

		Perimeter p = new Perimeter();
		long result = 0;

		switch (select) {
		case 0:
			result = p.Perimeter(shortNum);
			break;
		case 1:
			result = p.Perimeter(w);
			break;
		case 2:
			result = p.Perimeter(longNum);
			break;
		case 3:	
			result = p.Perimeter(w, x);
			break;
		case 4:
			result = p.Perimeter(w, x, y);
			break;
		case 5:
			result = p.Perimeter(w, x, y, z);
			break;
		}
		return result;
	}
}",Buggy
"public class Perimeter
{   
    //@ requires 0 < x && x <= Short.MAX_VALUE;
    //@ ensures \result == 4*x;
    /*@ pure @*/ long Perimeter(short x)
    {
	long squarePerimeter = 4 * (long)x;
	return squarePerimeter;
    }

    //@ requires 0 < x && x <= Integer.MAX_VALUE;
    //@ ensures \result == 5*x;
    /*@ pure @*/ long Perimeter(int x)
    {
	long pentagonPerimeter = 5 * (long)x;
	return pentagonPerimeter;
    }
 
    //@ requires 0 < x && 6*x <= Long.MAX_VALUE;
    //@ ensures \result == 6*x;
    /*@ pure @*/ long Perimeter(long x)
    {
	long hexagonalPerimeter = 6 * x;
	return hexagonalPerimeter;
    }

    //@ requires 0 < x && 0 < y && 2*x + 2*y <= Integer.MAX_VALUE;
    //@ ensures \result == 2*x + 2*y;
    /*@ pure @*/ long Perimeter(int x, int y)
    {
	long perimeterRectangle = 2*((long)x + (long)y);
	return perimeterRectangle;
    }

    //@ requires 0 < x && 0 < y && 0 < z && x + y + z <= Integer.MAX_VALUE;
    //@ ensures \result == x + y + z;
    /*@ pure @*/ long Perimeter(int x, int y, int z)
    {
	long trianglePerimeter = (long)x + (long)y + (long)z;
	return trianglePerimeter;
    }
  
    //@ requires 0 < w && 0 < x && 0 < y && 0 < z && w + x + y + z <= Integer.MAX_VALUE;
    //@ ensures \result == w + x + y + z;
    /*@ pure @*/ long Perimeter(int w, int x, int y, int z)
    {
	long trapeziumPerimeter = (long)w + (long)x + (long)y + (long)z;
	return trapeziumPerimeter;
    }
}",Buggy
"public class PerimeterDriver {
	/*@ requires 0 <= select && select < 6;
	  @ {|
	     @    requires select == 0;
	     @    requires 0 < shortNum && shortNum <= Short.MAX_VALUE;
	     @    ensures \result == 4*shortNum;
	     @ also 
	     @    requires select == 1;
	     @    requires 0 < w && w <= Integer.MAX_VALUE;
	     @    ensures \result == 5*w;
	     @ also 
	     @    requires select == 2;
	     @    requires 0 < longNum && 6*longNum <= Long.MAX_VALUE;
	     @    ensures \result == 6*longNum;
	     @ also 
	     @    requires select == 3;
	     @    requires 0 < w && 0 < x && 2*w + 2*x <= Integer.MAX_VALUE;
             @    ensures \result == 2*w + 2*x;
	     @ also 
	     @    requires select == 4;
	     @    requires 0 < w && 0 < x && 0 < y && w + x + y <= Integer.MAX_VALUE;
	     @    ensures \result == w + x + y;
	     @ also 
	     @    requires select == 5;
	     @    requires 0 < w && 0 < x && 0 < y && 0 < z && w + x + y + z <= Integer.MAX_VALUE;
	     @    ensures \result == w + x + y + z;
	  @ |} @*/
	 public /*@ pure @*/ long driver(int select, int w, int x, int y, int z, short shortNum, long longNum) {

		Perimeter p = new Perimeter();
		long result = 0;

		switch (select) {
		case 0:
			result = p.Perimeter(shortNum);
			break;
		case 1:
			result = p.Perimeter(w);
			break;
		case 2:
			result = p.Perimeter(longNum);
			break;
		case 3:	
			result = p.Perimeter(w, x);
			break;
		case 4:
			result = p.Perimeter(w, x, y);
			break;
		case 5:
			result = p.Perimeter(w, x, y, z);
			break;
		}
		return result + 1;//result;
	}
}",Buggy
"public class Perimeter
{   
    //@ requires 0 < x && x <= Short.MAX_VALUE;
    //@ ensures \result == 4*x;
    /*@ pure @*/ long Perimeter(short x)
    {
	long squarePerimeter = 4 * (long)x;
	return squarePerimeter;
    }

    //@ requires 0 < x && x <= Integer.MAX_VALUE;
    //@ ensures \result == 5*x;
    /*@ pure @*/ long Perimeter(int x)
    {
	long pentagonPerimeter = 5 / (long)x;//long pentagonPerimeter = 5 * (long)x;
	return pentagonPerimeter;
    }
 
    //@ requires 0 < x && 6*x <= Long.MAX_VALUE;
    //@ ensures \result == 6*x;
    /*@ pure @*/ long Perimeter(long x)
    {
	long hexagonalPerimeter = 6 * x;
	return hexagonalPerimeter;
    }

    //@ requires 0 < x && 0 < y && 2*x + 2*y <= Integer.MAX_VALUE;
    //@ ensures \result == 2*x + 2*y;
    /*@ pure @*/ long Perimeter(int x, int y)
    {
	long perimeterRectangle = 2*((long)x + (long)y);
	return perimeterRectangle;
    }

    //@ requires 0 < x && 0 < y && 0 < z && x + y + z <= Integer.MAX_VALUE;
    //@ ensures \result == x + y + z;
    /*@ pure @*/ long Perimeter(int x, int y, int z)
    {
	long trianglePerimeter = (long)x + (long)y + (long)z;
	return trianglePerimeter;
    }
  
    //@ requires 0 < w && 0 < x && 0 < y && 0 < z && w + x + y + z <= Integer.MAX_VALUE;
    //@ ensures \result == w + x + y + z;
    /*@ pure @*/ long Perimeter(int w, int x, int y, int z)
    {
	long trapeziumPerimeter = (long)w + (long)x + (long)y + (long)z;
	return trapeziumPerimeter;
    }
}",Buggy
"public class PerimeterDriver {
	/*@ requires 0 <= select && select < 6;
	  @ {|
	     @    requires select == 0;
	     @    requires 0 < shortNum && shortNum <= Short.MAX_VALUE;
	     @    ensures \result == 4*shortNum;
	     @ also 
	     @    requires select == 1;
	     @    requires 0 < w && w <= Integer.MAX_VALUE;
	     @    ensures \result == 5*w;
	     @ also 
	     @    requires select == 2;
	     @    requires 0 < longNum && 6*longNum <= Long.MAX_VALUE;
	     @    ensures \result == 6*longNum;
	     @ also 
	     @    requires select == 3;
	     @    requires 0 < w && 0 < x && 2*w + 2*x <= Integer.MAX_VALUE;
             @    ensures \result == 2*w + 2*x;
	     @ also 
	     @    requires select == 4;
	     @    requires 0 < w && 0 < x && 0 < y && w + x + y <= Integer.MAX_VALUE;
	     @    ensures \result == w + x + y;
	     @ also 
	     @    requires select == 5;
	     @    requires 0 < w && 0 < x && 0 < y && 0 < z && w + x + y + z <= Integer.MAX_VALUE;
	     @    ensures \result == w + x + y + z;
	  @ |} @*/
	 public /*@ pure @*/ long driver(int select, int w, int x, int y, int z, short shortNum, long longNum) {

		Perimeter p = new Perimeter();
		long result = 0;

		switch (select) {
		case 0:
			result = p.Perimeter(shortNum);
			break;
		case 1:
			result = p.Perimeter(w);
			break;
		case 2:
			result = p.Perimeter(longNum);
			break;
		case 3:	
			result = p.Perimeter(w, x);
			break;
		case 4:
			result = p.Perimeter(w, x, y);
			break;
		case 5:
			result = p.Perimeter(w, x, y, z);
			break;
		}
		return result;
	}
}",Buggy
"public class Perimeter
{   
    //@ requires 0 < x && x <= Short.MAX_VALUE;
    //@ ensures \result == 4*x;
    /*@ pure @*/ long Perimeter(short x)
    {
	long squarePerimeter = 4 * (long)x;
	return squarePerimeter;
    }

    //@ requires 0 < x && x <= Integer.MAX_VALUE;
    //@ ensures \result == 5*x;
    /*@ pure @*/ long Perimeter(int x)
    {
	long pentagonPerimeter = 5 * (long)x;
	return pentagonPerimeter;
    }

    //@ requires 0 < x && 6*x <= Long.MAX_VALUE;
    //@ ensures \result == 6*x;
    /*@ pure @*/ long Perimeter(long x)
    {
	long hexagonalPerimeter = 6 / x;//long hexagonalPerimeter = 6 * x;
	return hexagonalPerimeter;
    }

    //@ requires 0 < x && 0 < y && 2*x + 2*y <= Integer.MAX_VALUE;
    //@ ensures \result == 2*x + 2*y;
    /*@ pure @*/ long Perimeter(int x, int y)
    {
	long perimeterRectangle = 2*((long)x + (long)y);
	return perimeterRectangle;
    }

    //@ requires 0 < x && 0 < y && 0 < z && x + y + z <= Integer.MAX_VALUE;
    //@ ensures \result == x + y + z;
    /*@ pure @*/ long Perimeter(int x, int y, int z)
    {
	long trianglePerimeter = (long)x + (long)y + (long)z;
	return trianglePerimeter;
    }
  
    //@ requires 0 < w && 0 < x && 0 < y && 0 < z && w + x + y + z <= Integer.MAX_VALUE;
    //@ ensures \result == w + x + y + z;
    /*@ pure @*/ long Perimeter(int w, int x, int y, int z)
    {
	long trapeziumPerimeter = (long)w + (long)x + (long)y + (long)z;
	return trapeziumPerimeter;
    }
}",Buggy
"public class PerimeterDriver {
	/*@ requires 0 <= select && select < 6;
	  @ {|
	     @    requires select == 0;
	     @    requires 0 < shortNum && shortNum <= Short.MAX_VALUE;
	     @    ensures \result == 4*shortNum;
	     @ also 
	     @    requires select == 1;
	     @    requires 0 < w && w <= Integer.MAX_VALUE;
	     @    ensures \result == 5*w;
	     @ also 
	     @    requires select == 2;
	     @    requires 0 < longNum && 6*longNum <= Long.MAX_VALUE;
	     @    ensures \result == 6*longNum;
	     @ also 
	     @    requires select == 3;
	     @    requires 0 < w && 0 < x && 2*w + 2*x <= Integer.MAX_VALUE;
             @    ensures \result == 2*w + 2*x;
	     @ also 
	     @    requires select == 4;
	     @    requires 0 < w && 0 < x && 0 < y && w + x + y <= Integer.MAX_VALUE;
	     @    ensures \result == w + x + y;
	     @ also 
	     @    requires select == 5;
	     @    requires 0 < w && 0 < x && 0 < y && 0 < z && w + x + y + z <= Integer.MAX_VALUE;
	     @    ensures \result == w + x + y + z;
	  @ |} @*/
	 public /*@ pure @*/ long driver(int select, int w, int x, int y, int z, short shortNum, long longNum) {

		Perimeter p = new Perimeter();
		long result = 0;

		switch (select) {
		case 0:
			result = p.Perimeter(shortNum);
			break;
		case 1:
			result = p.Perimeter(w);
			break;
		case 2:
			result = p.Perimeter(longNum);
			break;
		case 3:	
			result = p.Perimeter(w, x);
			break;
		case 4:
			result = p.Perimeter(w, x, y);
			break;
		case 5:
			result = p.Perimeter(w, x, y, z);
			break;
		}
		return result;
	}
}",Buggy
"public class Perimeter
{   
    //@ requires 0 < x && x <= Short.MAX_VALUE;
    //@ ensures \result == 4*x;
    /*@ pure @*/ long Perimeter(short x)
    {
	long squarePerimeter = 4 * (long)x;
	return squarePerimeter;
    }

    //@ requires 0 < x && x <= Integer.MAX_VALUE;
    //@ ensures \result == 5*x;
    /*@ pure @*/ long Perimeter(int x)
    {
	long pentagonPerimeter = 5 * (long)x;
	return pentagonPerimeter;
    }

    //@ requires 0 < x && 6*x <= Long.MAX_VALUE;
    //@ ensures \result == 6*x;
    /*@ pure @*/ long Perimeter(long x)
    {
	long hexagonalPerimeter = 6 * x;
	return hexagonalPerimeter;
    }

    //@ requires 0 < x && 0 < y && 2*x + 2*y <= Integer.MAX_VALUE;
    //@ ensures \result == 2*x + 2*y;
    /*@ pure @*/ long Perimeter(int x, int y)
    {
	long perimeterRectangle = 2*((long)x - (long)y);//long perimeterRectangle = 2*((long)x + (long)y);
	return perimeterRectangle;
    }

    //@ requires 0 < x && 0 < y && 0 < z && x + y + z <= Integer.MAX_VALUE;
    //@ ensures \result == x + y + z;
    /*@ pure @*/ long Perimeter(int x, int y, int z)
    {
	long trianglePerimeter = (long)x + (long)y + (long)z;
	return trianglePerimeter;
    }
  
    //@ requires 0 < w && 0 < x && 0 < y && 0 < z && w + x + y + z <= Integer.MAX_VALUE;
    //@ ensures \result == w + x + y + z;
    /*@ pure @*/ long Perimeter(int w, int x, int y, int z)
    {
	long trapeziumPerimeter = (long)w + (long)x + (long)y + (long)z;
	return trapeziumPerimeter;
    }
}",Buggy
"public class PerimeterDriver {
	/*@ requires 0 <= select && select < 6;
	  @ {|
	     @    requires select == 0;
	     @    requires 0 < shortNum && shortNum <= Short.MAX_VALUE;
	     @    ensures \result == 4*shortNum;
	     @ also 
	     @    requires select == 1;
	     @    requires 0 < w && w <= Integer.MAX_VALUE;
	     @    ensures \result == 5*w;
	     @ also 
	     @    requires select == 2;
	     @    requires 0 < longNum && 6*longNum <= Long.MAX_VALUE;
	     @    ensures \result == 6*longNum;
	     @ also 
	     @    requires select == 3;
	     @    requires 0 < w && 0 < x && 2*w + 2*x <= Integer.MAX_VALUE;
             @    ensures \result == 2*w + 2*x;
	     @ also 
	     @    requires select == 4;
	     @    requires 0 < w && 0 < x && 0 < y && w + x + y <= Integer.MAX_VALUE;
	     @    ensures \result == w + x + y;
	     @ also 
	     @    requires select == 5;
	     @    requires 0 < w && 0 < x && 0 < y && 0 < z && w + x + y + z <= Integer.MAX_VALUE;
	     @    ensures \result == w + x + y + z;
	  @ |} @*/
	 public /*@ pure @*/ long driver(int select, int w, int x, int y, int z, short shortNum, long longNum) {

		Perimeter p = new Perimeter();
		long result = 0;

		switch (select) {
		case 0:
			result = p.Perimeter(shortNum);
			break;
		case 1:
			result = p.Perimeter(w);
			break;
		case 2:
			result = p.Perimeter(longNum);
			break;
		case 3:	
			result = p.Perimeter(w, x);
			break;
		case 4:
			result = p.Perimeter(w, x, y);
			break;
		case 5:
			result = p.Perimeter(w, x, y, z);
			break;
		}
		return result;
	}
}",Buggy
"public class Perimeter
{   
    //@ requires 0 < x && x <= Short.MAX_VALUE;
    //@ ensures \result == 4*x;
    /*@ pure @*/ long Perimeter(short x)
    {
	long squarePerimeter = 4 * (long)x;
	return squarePerimeter;
    }

    //@ requires 0 < x && x <= Integer.MAX_VALUE;
    //@ ensures \result == 5*x;
    /*@ pure @*/ long Perimeter(int x)
    {
	long pentagonPerimeter = 5 * (long)x;
	return pentagonPerimeter;
    }

    //@ requires 0 < x && 6*x <= Long.MAX_VALUE;
    //@ ensures \result == 6*x;
    /*@ pure @*/ long Perimeter(long x)
    {
	long hexagonalPerimeter = 6 * x;
	return hexagonalPerimeter;
    }

    //@ requires 0 < x && 0 < y && 2*x + 2*y <= Integer.MAX_VALUE;
    //@ ensures \result == 2*x + 2*y;
    /*@ pure @*/ long Perimeter(int x, int y)
    {
	long perimeterRectangle = 2/((long)x + (long)y);//long perimeterRectangle = 2*((long)x + (long)y);
	return perimeterRectangle;
    }

    //@ requires 0 < x && 0 < y && 0 < z && x + y + z <= Integer.MAX_VALUE;
    //@ ensures \result == x + y + z;
    /*@ pure @*/ long Perimeter(int x, int y, int z)
    {
	long trianglePerimeter = (long)x + (long)y + (long)z;
	return trianglePerimeter;
    }

    //@ requires 0 < w && 0 < x && 0 < y && 0 < z && w + x + y + z <= Integer.MAX_VALUE;
    //@ ensures \result == w + x + y + z;
    /*@ pure @*/ long Perimeter(int w, int x, int y, int z)
    {
	long trapeziumPerimeter = (long)w + (long)x + (long)y + (long)z;
	return trapeziumPerimeter;
    }
}",Buggy
"public class PerimeterDriver {
	/*@ requires 0 <= select && select < 6;
	  @ {|
	     @    requires select == 0;
	     @    requires 0 < shortNum && shortNum <= Short.MAX_VALUE;
	     @    ensures \result == 4*shortNum;
	     @ also 
	     @    requires select == 1;
	     @    requires 0 < w && w <= Integer.MAX_VALUE;
	     @    ensures \result == 5*w;
	     @ also 
	     @    requires select == 2;
	     @    requires 0 < longNum && 6*longNum <= Long.MAX_VALUE;
	     @    ensures \result == 6*longNum;
	     @ also 
	     @    requires select == 3;
	     @    requires 0 < w && 0 < x && 2*w + 2*x <= Integer.MAX_VALUE;
             @    ensures \result == 2*w + 2*x;
	     @ also 
	     @    requires select == 4;
	     @    requires 0 < w && 0 < x && 0 < y && w + x + y <= Integer.MAX_VALUE;
	     @    ensures \result == w + x + y;
	     @ also 
	     @    requires select == 5;
	     @    requires 0 < w && 0 < x && 0 < y && 0 < z && w + x + y + z <= Integer.MAX_VALUE;
	     @    ensures \result == w + x + y + z;
	  @ |} @*/
	 public /*@ pure @*/ long driver(int select, int w, int x, int y, int z, short shortNum, long longNum) {

		Perimeter p = new Perimeter();
		long result = 0;

		switch (select) {
		case 0:
			result = p.Perimeter(shortNum);
			break;
		case 1:
			result = p.Perimeter(w);
			break;
		case 2:
			result = p.Perimeter(longNum);
			break;
		case 3:	
			result = p.Perimeter(w, x);
			break;
		case 4:
			result = p.Perimeter(w, x, y);
			break;
		case 5:
			result = p.Perimeter(w, x, y, z);
			break;
		}
		return result;
	}
}",Buggy
"public class Perimeter
{   
    //@ requires 0 < x && x <= Short.MAX_VALUE;
    //@ ensures \result == 4*x;
    /*@ pure @*/ long Perimeter(short x)
    {
	long squarePerimeter = 4 * (long)x;
	return squarePerimeter;
    }

    //@ requires 0 < x && x <= Integer.MAX_VALUE;
    //@ ensures \result == 5*x;
    /*@ pure @*/ long Perimeter(int x)
    {
	long pentagonPerimeter = 5 * (long)x;
	return pentagonPerimeter;
    }

    //@ requires 0 < x && 6*x <= Long.MAX_VALUE;
    //@ ensures \result == 6*x;
    /*@ pure @*/ long Perimeter(long x)
    {
	long hexagonalPerimeter = 6 * x;
	return hexagonalPerimeter;
    }

    //@ requires 0 < x && 0 < y && 2*x + 2*y <= Integer.MAX_VALUE;
    //@ ensures \result == 2*x + 2*y;
    /*@ pure @*/ long Perimeter(int x, int y)
    {
	long perimeterRectangle = 2*((long)x + (long)y);
	return perimeterRectangle;
    }

    //@ requires 0 < x && 0 < y && 0 < z && x + y + z <= Integer.MAX_VALUE;
    //@ ensures \result == x + y + z;
    /*@ pure @*/ long Perimeter(int x, int y, int z)
    {
	long trianglePerimeter = (long)x - (long)y + (long)z;//long trianglePerimeter = (long)x + (long)y + (long)z;
	return trianglePerimeter;
    }
  
    //@ requires 0 < w && 0 < x && 0 < y && 0 < z && w + x + y + z <= Integer.MAX_VALUE;
    //@ ensures \result == w + x + y + z;
    /*@ pure @*/ long Perimeter(int w, int x, int y, int z)
    {
	long trapeziumPerimeter = (long)w + (long)x + (long)y + (long)z;
	return trapeziumPerimeter;
    }
}",Buggy
"public class PerimeterDriver {
	/*@ requires 0 <= select && select < 6;
	  @ {|
	     @    requires select == 0;
	     @    requires 0 < shortNum && shortNum <= Short.MAX_VALUE;
	     @    ensures \result == 4*shortNum;
	     @ also 
	     @    requires select == 1;
	     @    requires 0 < w && w <= Integer.MAX_VALUE;
	     @    ensures \result == 5*w;
	     @ also 
	     @    requires select == 2;
	     @    requires 0 < longNum && 6*longNum <= Long.MAX_VALUE;
	     @    ensures \result == 6*longNum;
	     @ also 
	     @    requires select == 3;
	     @    requires 0 < w && 0 < x && 2*w + 2*x <= Integer.MAX_VALUE;
             @    ensures \result == 2*w + 2*x;
	     @ also 
	     @    requires select == 4;
	     @    requires 0 < w && 0 < x && 0 < y && w + x + y <= Integer.MAX_VALUE;
	     @    ensures \result == w + x + y;
	     @ also 
	     @    requires select == 5;
	     @    requires 0 < w && 0 < x && 0 < y && 0 < z && w + x + y + z <= Integer.MAX_VALUE;
	     @    ensures \result == w + x + y + z;
	  @ |} @*/
	 public /*@ pure @*/ long driver(int select, int w, int x, int y, int z, short shortNum, long longNum) {

		Perimeter p = new Perimeter();
		long result = 0;

		switch (select) {
		case 0:
			result = p.Perimeter(shortNum);
			break;
		case 1:
			result = p.Perimeter(w);
			break;
		case 2:
			result = p.Perimeter(longNum);
			break;
		case 3:	
			result = p.Perimeter(w, x);
			break;
		case 4:
			result = p.Perimeter(w, x, y);
			break;
		case 5:
			result = p.Perimeter(w, x, y, z);
			break;
		}
		return result;
	}
}",Buggy
"public class Perimeter
{   
    //@ requires 0 < x && x <= Short.MAX_VALUE;
    //@ ensures \result == 4*x;
    /*@ pure @*/ long Perimeter(short x)
    {
	long squarePerimeter = 4 * (long)x;
	return squarePerimeter;
    }

    //@ requires 0 < x && x <= Integer.MAX_VALUE;
    //@ ensures \result == 5*x;
    /*@ pure @*/ long Perimeter(int x)
    {
	long pentagonPerimeter = 5 * (long)x;
	return pentagonPerimeter;
    }
 
    //@ requires 0 < x && 6*x <= Long.MAX_VALUE;
    //@ ensures \result == 6*x;
    /*@ pure @*/ long Perimeter(long x)
    {
	long hexagonalPerimeter = 6 * x;
	return hexagonalPerimeter;
    }

    //@ requires 0 < x && 0 < y && 2*x + 2*y <= Integer.MAX_VALUE;
    //@ ensures \result == 2*x + 2*y;
    /*@ pure @*/ long Perimeter(int x, int y)
    {
	long perimeterRectangle = 2*((long)x + (long)y);
	return perimeterRectangle;
    }

    //@ requires 0 < x && 0 < y && 0 < z && x + y + z <= Integer.MAX_VALUE;
    //@ ensures \result == x + y + z;
    /*@ pure @*/ long Perimeter(int x, int y, int z)
    {
	long trianglePerimeter = (long)x + (long)y - (long)z;//long trianglePerimeter = (long)x + (long)y + (long)z;
	return trianglePerimeter;
    }

    //@ requires 0 < w && 0 < x && 0 < y && 0 < z && w + x + y + z <= Integer.MAX_VALUE;
    //@ ensures \result == w + x + y + z;
    /*@ pure @*/ long Perimeter(int w, int x, int y, int z)
    {
	long trapeziumPerimeter = (long)w + (long)x + (long)y + (long)z;
	return trapeziumPerimeter;
    }
}",Buggy
"public class PerimeterDriver {
	/*@ requires 0 <= select && select < 6;
	  @ {|
	     @    requires select == 0;
	     @    requires 0 < shortNum && shortNum <= Short.MAX_VALUE;
	     @    ensures \result == 4*shortNum;
	     @ also 
	     @    requires select == 1;
	     @    requires 0 < w && w <= Integer.MAX_VALUE;
	     @    ensures \result == 5*w;
	     @ also 
	     @    requires select == 2;
	     @    requires 0 < longNum && 6*longNum <= Long.MAX_VALUE;
	     @    ensures \result == 6*longNum;
	     @ also 
	     @    requires select == 3;
	     @    requires 0 < w && 0 < x && 2*w + 2*x <= Integer.MAX_VALUE;
             @    ensures \result == 2*w + 2*x;
	     @ also 
	     @    requires select == 4;
	     @    requires 0 < w && 0 < x && 0 < y && w + x + y <= Integer.MAX_VALUE;
	     @    ensures \result == w + x + y;
	     @ also 
	     @    requires select == 5;
	     @    requires 0 < w && 0 < x && 0 < y && 0 < z && w + x + y + z <= Integer.MAX_VALUE;
	     @    ensures \result == w + x + y + z;
	  @ |} @*/
	 public /*@ pure @*/ long driver(int select, int w, int x, int y, int z, short shortNum, long longNum) {

		Perimeter p = new Perimeter();
		long result = 0;

		switch (select) {
		case 0:
			result = p.Perimeter(shortNum);
			break;
		case 1:
			result = p.Perimeter(w);
			break;
		case 2:
			result = p.Perimeter(longNum);
			break;
		case 3:	
			result = p.Perimeter(w, x);
			break;
		case 4:
			result = p.Perimeter(w, x, y);
			break;
		case 5:
			result = p.Perimeter(w, x, y, z);
			break;
		}
		return result;
	}
}",Buggy
"public class Perimeter
{   
    //@ requires 0 < x && x <= Short.MAX_VALUE;
    //@ ensures \result == 4*x;
    /*@ pure @*/ long Perimeter(short x)
    {
	long squarePerimeter = 4 * (long)x;
	return squarePerimeter;
    }

    //@ requires 0 < x && x <= Integer.MAX_VALUE;
    //@ ensures \result == 5*x;
    /*@ pure @*/ long Perimeter(int x)
    {
	long pentagonPerimeter = 5 * (long)x;
	return pentagonPerimeter;
    }

    //@ requires 0 < x && 6*x <= Long.MAX_VALUE;
    //@ ensures \result == 6*x;
    /*@ pure @*/ long Perimeter(long x)
    {
	long hexagonalPerimeter = 6 * x;
	return hexagonalPerimeter;
    }

    //@ requires 0 < x && 0 < y && 2*x + 2*y <= Integer.MAX_VALUE;
    //@ ensures \result == 2*x + 2*y;
    /*@ pure @*/ long Perimeter(int x, int y)
    {
	long perimeterRectangle = 2*((long)x + (long)y);
	return perimeterRectangle;
    }

    //@ requires 0 < x && 0 < y && 0 < z && x + y + z <= Integer.MAX_VALUE;
    //@ ensures \result == x + y + z;
    /*@ pure @*/ long Perimeter(int x, int y, int z)
    {
	long trianglePerimeter = (long)x + (long)y + (long)z;
	return trianglePerimeter;
    }
  
    //@ requires 0 < w && 0 < x && 0 < y && 0 < z && w + x + y + z <= Integer.MAX_VALUE;
    //@ ensures \result == w + x + y + z;
    /*@ pure @*/ long Perimeter(int w, int x, int y, int z)
    {
	long trapeziumPerimeter = (long)w - (long)x + (long)y + (long)z;//long trapeziumPerimeter = (long)w + (long)x + (long)y + (long)z;
	return trapeziumPerimeter;
    }
}",Buggy
"public class PerimeterDriver {
	/*@ requires 0 <= select && select < 6;
	  @ {|
	     @    requires select == 0;
	     @    requires 0 < shortNum && shortNum <= Short.MAX_VALUE;
	     @    ensures \result == 4*shortNum;
	     @ also 
	     @    requires select == 1;
	     @    requires 0 < w && w <= Integer.MAX_VALUE;
	     @    ensures \result == 5*w;
	     @ also 
	     @    requires select == 2;
	     @    requires 0 < longNum && 6*longNum <= Long.MAX_VALUE;
	     @    ensures \result == 6*longNum;
	     @ also 
	     @    requires select == 3;
	     @    requires 0 < w && 0 < x && 2*w + 2*x <= Integer.MAX_VALUE;
             @    ensures \result == 2*w + 2*x;
	     @ also 
	     @    requires select == 4;
	     @    requires 0 < w && 0 < x && 0 < y && w + x + y <= Integer.MAX_VALUE;
	     @    ensures \result == w + x + y;
	     @ also 
	     @    requires select == 5;
	     @    requires 0 < w && 0 < x && 0 < y && 0 < z && w + x + y + z <= Integer.MAX_VALUE;
	     @    ensures \result == w + x + y + z;
	  @ |} @*/
	 public /*@ pure @*/ long driver(int select, int w, int x, int y, int z, short shortNum, long longNum) {

		Perimeter p = new Perimeter();
		long result = 0;

		switch (select) {
		case 0:
			result = p.Perimeter(shortNum);
			break;
		case 1:
			result = p.Perimeter(w);
			break;
		case 2:
			result = p.Perimeter(longNum);
			break;
		case 3:	
			result = p.Perimeter(w, x);
			break;
		case 4:
			result = p.Perimeter(w, x, y);
			break;
		case 5:
			result = p.Perimeter(w, x, y, z);
			break;
		}
		return result;
	}
}",Buggy
"public class Perimeter
{   
    //@ requires 0 < x && x <= Short.MAX_VALUE;
    //@ ensures \result == 4*x;
    /*@ pure @*/ long Perimeter(short x)
    {
	long squarePerimeter = 4 * (long)x;
	return squarePerimeter;
    }

    //@ requires 0 < x && x <= Integer.MAX_VALUE;
    //@ ensures \result == 5*x;
    /*@ pure @*/ long Perimeter(int x)
    {
	long pentagonPerimeter = 5 * (long)x;
	return pentagonPerimeter;
    }

    //@ requires 0 < x && 6*x <= Long.MAX_VALUE;
    //@ ensures \result == 6*x;
    /*@ pure @*/ long Perimeter(long x)
    {
	long hexagonalPerimeter = 6 * x;
	return hexagonalPerimeter;
    }

    //@ requires 0 < x && 0 < y && 2*x + 2*y <= Integer.MAX_VALUE;
    //@ ensures \result == 2*x + 2*y;
    /*@ pure @*/ long Perimeter(int x, int y)
    {
	long perimeterRectangle = 2*((long)x + (long)y);
	return perimeterRectangle;
    }

    //@ requires 0 < x && 0 < y && 0 < z && x + y + z <= Integer.MAX_VALUE;
    //@ ensures \result == x + y + z;
    /*@ pure @*/ long Perimeter(int x, int y, int z)
    {
	long trianglePerimeter = (long)x + (long)y + (long)z;
	return trianglePerimeter;
    }
  
    //@ requires 0 < w && 0 < x && 0 < y && 0 < z && w + x + y + z <= Integer.MAX_VALUE;
    //@ ensures \result == w + x + y + z;
    /*@ pure @*/ long Perimeter(int w, int x, int y, int z)
    {
	long trapeziumPerimeter = (long)w + (long)x - (long)y + (long)z;//long trapeziumPerimeter = (long)w + (long)x + (long)y + (long)z;
	return trapeziumPerimeter;
    }
}",Buggy
"public class PerimeterDriver {
	/*@ requires 0 <= select && select < 6;
	  @ {|
	     @    requires select == 0;
	     @    requires 0 < shortNum && shortNum <= Short.MAX_VALUE;
	     @    ensures \result == 4*shortNum;
	     @ also 
	     @    requires select == 1;
	     @    requires 0 < w && w <= Integer.MAX_VALUE;
	     @    ensures \result == 5*w;
	     @ also 
	     @    requires select == 2;
	     @    requires 0 < longNum && 6*longNum <= Long.MAX_VALUE;
	     @    ensures \result == 6*longNum;
	     @ also 
	     @    requires select == 3;
	     @    requires 0 < w && 0 < x && 2*w + 2*x <= Integer.MAX_VALUE;
             @    ensures \result == 2*w + 2*x;
	     @ also 
	     @    requires select == 4;
	     @    requires 0 < w && 0 < x && 0 < y && w + x + y <= Integer.MAX_VALUE;
	     @    ensures \result == w + x + y;
	     @ also 
	     @    requires select == 5;
	     @    requires 0 < w && 0 < x && 0 < y && 0 < z && w + x + y + z <= Integer.MAX_VALUE;
	     @    ensures \result == w + x + y + z;
	  @ |} @*/
	 public /*@ pure @*/ long driver(int select, int w, int x, int y, int z, short shortNum, long longNum) {

		Perimeter p = new Perimeter();
		long result = 0;

		switch (select) {
		case 0:
			result = p.Perimeter(shortNum);
			break;
		case 1:
			result = p.Perimeter(w);
			break;
		case 2:
			result = p.Perimeter(longNum);
			break;
		case 3:	
			result = p.Perimeter(w, x);
			break;
		case 4:
			result = p.Perimeter(w, x, y);
			break;
		case 5:
			result = p.Perimeter(w, x, y, z);
			break;
		}
		return result;
	}
}",Buggy
"class PrimeCheck {
   /*@ public normal_behavior     
     @    requires d != 0;
     @    ensures \result == n%d;
     @    pure function @*/
   public static int div(int n, int d) { return n*d; } // return n%d; }

   //@ requires 1 < a;
   //@ ensures \result ==> (\forall int k; 1 < k && k <= a/2; div(a, k) != 0);
   //@ ensures !\result ==> (\exists int k; 1 < k && k <= a/2; div(a,k) == 0); 
   public boolean isPrime(int a) {	
	int i = 2;
	int mid = a/2;

	//@ ghost int maxnumber = Integer.MAX_VALUE;
	//@ maintaining 1 < i && i <= mid + 1;
	//@ maintaining 2 < i ==> \forall int k; 1 < k && k < i; div(a, k) != 0; 
	//@ decreases maxnumber - i;
	while (i <= mid) {
	   if (div(a,i) == 0)
		return false;
	   i++;
	}
	return true;
   }
}",Buggy
"class PrimeCheck {
   /*@ public normal_behavior     
     @    requires d != 0;
     @    ensures \result == n%d;
     @    pure function @*/
   public static int div(int n, int d) { return n%d; }

   //@ requires 1 < a;
   //@ ensures \result ==> (\forall int k; 1 < k && k <= a/2; div(a, k) != 0);
   //@ ensures !\result ==> (\exists int k; 1 < k && k <= a/2; div(a,k) == 0); 
   public boolean isPrime(int a) {	
	int i = 2;
	int mid = a*2; // int mid = a/2;

	//@ ghost int maxnumber = Integer.MAX_VALUE;
	//@ maintaining 1 < i && i <= mid + 1;
	//@ maintaining 2 < i ==> \forall int k; 1 < k && k < i; div(a, k) != 0; 
	//@ decreases maxnumber - i;
	while (i <= mid) {
	   if (div(a,i) == 0)
		return false;
	   i++;
	}
	return true;
   }
}",Buggy
"class PrimeCheck {
   /*@ public normal_behavior     
     @    requires d != 0;
     @    ensures \result == n%d;
     @    pure function @*/
   public static int div(int n, int d) { return n%d; }

   //@ requires 1 < a;
   //@ ensures \result ==> (\forall int k; 1 < k && k <= a/2; div(a, k) != 0);
   //@ ensures !\result ==> (\exists int k; 1 < k && k <= a/2; div(a,k) == 0); 
   public boolean isPrime(int a) {	
	int i = 2;
	int mid = a/2;

	//@ ghost int maxnumber = Integer.MAX_VALUE;
	//@ maintaining 1 < i && i <= mid + 1;
	//@ maintaining 2 < i ==> \forall int k; 1 < k && k < i; div(a, k) != 0; 
	//@ decreases maxnumber - i;
	while (i > mid) { // while (i <= mid) {
	   if (div(a,i) == 0)
		return false;
	   i++;
	}
	return true;
   }
}",Buggy
"class PrimeCheck {
   /*@ public normal_behavior     
     @    requires d != 0;
     @    ensures \result == n%d;
     @    pure function @*/
   public static int div(int n, int d) { return n%d; }

   //@ requires 1 < a;
   //@ ensures \result ==> (\forall int k; 1 < k && k <= a/2; div(a, k) != 0);
   //@ ensures !\result ==> (\exists int k; 1 < k && k <= a/2; div(a,k) == 0); 
   public boolean isPrime(int a) {	
	int i = 2;
	int mid = a/2;

	//@ ghost int maxnumber = Integer.MAX_VALUE;
	//@ maintaining 1 < i && i <= mid + 1;
	//@ maintaining 2 < i ==> \forall int k; 1 < k && k < i; div(a, k) != 0; 
	//@ decreases maxnumber - i;
	while (i <= mid) {
	   if (div(a,i) != 0) // if (div(a,i) == 0)
		return false;
	   i++;
	}
	return true;
   }
}",Buggy
"class PrimeCheck {
   /*@ public normal_behavior     
     @    requires d != 0;
     @    ensures \result == n%d;
     @    pure function @*/
   public static int div(int n, int d) { return n%d; }

   //@ requires 1 < a;
   //@ ensures \result ==> (\forall int k; 1 < k && k <= a/2; div(a, k) != 0);
   //@ ensures !\result ==> (\exists int k; 1 < k && k <= a/2; div(a,k) == 0); 
   public boolean isPrime(int a) {	
	int i = 2;
	int mid = a/2;

	//@ ghost int maxnumber = Integer.MAX_VALUE;
	//@ maintaining 1 < i && i <= mid + 1;
	//@ maintaining 2 < i ==> \forall int k; 1 < k && k < i; div(a, k) != 0; 
	//@ decreases maxnumber - i;
	while (i <= mid) {
	   if (div(a,i) == 0)
		return false;
	    i--; // i++;
	}
	return true;
   }
}",Buggy
"class PrimeCheck {
   /*@ public normal_behavior     
     @    requires d != 0;
     @    ensures \result == n%d;
     @    pure function @*/
   public static int div(int n, int d) { return (n%d == 0 ? 1 : 0);} // n%d; }

   //@ requires 1 < a;
   //@ ensures \result ==> (\forall int k; 1 < k && k <= a/2; div(a, k) != 0);
   //@ ensures !\result ==> (\exists int k; 1 < k && k <= a/2; div(a,k) == 0); 
   public boolean isPrime(int a) {	
	int i = 2;
	int mid = a/2;

	//@ ghost int maxnumber = Integer.MAX_VALUE;
	//@ maintaining 1 < i && i <= mid + 1;
	//@ maintaining 2 < i ==> \forall int k; 1 < k && k < i; div(a, k) != 0; 
	//@ decreases maxnumber - i;
	while (i <= mid) {
	   if (div(a,i) == 0)
		return false;
	   i++;
	}
	return true;
   }
}",Buggy
"class PrimeCheck {
   /*@ public normal_behavior     
     @    requires d != 0;
     @    ensures \result == n%d;
     @    pure function @*/
   public static int div(int n, int d) { return n%d; }

   //@ requires 1 < a;
   //@ ensures \result ==> (\forall int k; 1 < k && k <= a/2; div(a, k) != 0);
   //@ ensures !\result ==> (\exists int k; 1 < k && k <= a/2; div(a,k) == 0); 
   public boolean isPrime(int a) {	
	int i = 2;
	int mid = a/2;
	
	//@ ghost int maxnumber = Integer.MAX_VALUE;
	//@ maintaining 1 < i && i <= mid + 1;
	//@ maintaining 2 < i ==> \forall int k; 1 < k && k < i; div(a, k) != 0; 
	//@ decreases maxnumber - i;
	while (i <= mid) {
	   if (div(a,i) == 0)
		return true; // false;
	   i++;
	}
	return true;
   }
}",Buggy
"class PrimeCheck {
   /*@ public normal_behavior     
     @    requires d != 0;
     @    ensures \result == n%d;
     @    pure function @*/
   public static int div(int n, int d) { return n%d; }

   //@ requires 1 < a;
   //@ ensures \result ==> (\forall int k; 1 < k && k <= a/2; div(a, k) != 0);
   //@ ensures !\result ==> (\exists int k; 1 < k && k <= a/2; div(a,k) == 0); 
   public boolean isPrime(int a) {	
	int i = 2;
	int mid = a/2;

	//@ ghost int maxnumber = Integer.MAX_VALUE;
	//@ maintaining 1 < i && i <= mid + 1;
	//@ maintaining 2 < i ==> \forall int k; 1 < k && k < i; div(a, k) != 0; 
	//@ decreases maxnumber - i;
	while (i <= mid) {
	   if (div(a,i) == 0)
		return false;
	   i++;
	}
	return false; // true;
   }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JUnitPrimeNumbers {

	@Test
	public void test() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669};
		data = p.primeList(747);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);		
	}

	@Test
	public void test1() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447};
		data = p.primeList(229);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test2() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597, 10601, 10607, 10613, 10627, 10631, 10639, 10651, 10657, 10663, 10667, 10687, 10691, 10709, 10711, 10723, 10729, 10733, 10739, 10753, 10771, 10781, 10789, 10799, 10831, 10837, 10847, 10853, 10859, 10861, 10867, 10883, 10889, 10891, 10903, 10909, 10937, 10939, 10949, 10957, 10973, 10979, 10987, 10993, 11003, 11027, 11047, 11057, 11059, 11069, 11071, 11083, 11087, 11093, 11113, 11117, 11119, 11131, 11149, 11159, 11161, 11171, 11173, 11177, 11197, 11213, 11239, 11243, 11251, 11257, 11261, 11273, 11279, 11287, 11299, 11311, 11317, 11321, 11329, 11351, 11353, 11369, 11383, 11393, 11399, 11411, 11423, 11437, 11443, 11447, 11467, 11471, 11483, 11489, 11491, 11497, 11503, 11519, 11527, 11549, 11551, 11579, 11587, 11593, 11597, 11617, 11621, 11633, 11657, 11677, 11681, 11689, 11699, 11701, 11717, 11719, 11731, 11743, 11777, 11779, 11783, 11789, 11801, 11807, 11813, 11821, 11827, 11831, 11833, 11839, 11863, 11867, 11887, 11897, 11903, 11909, 11923, 11927, 11933, 11939, 11941, 11953, 11959, 11969, 11971, 11981, 11987, 12007, 12011, 12037, 12041, 12043, 12049, 12071, 12073, 12097, 12101, 12107, 12109, 12113, 12119, 12143, 12149, 12157, 12161, 12163, 12197, 12203, 12211, 12227, 12239, 12241, 12251, 12253, 12263, 12269, 12277, 12281, 12289, 12301, 12323, 12329, 12343, 12347, 12373, 12377, 12379, 12391, 12401, 12409, 12413, 12421, 12433, 12437, 12451, 12457, 12473, 12479, 12487, 12491, 12497, 12503, 12511, 12517, 12527, 12539, 12541, 12547, 12553, 12569, 12577, 12583, 12589, 12601, 12611, 12613, 12619, 12637, 12641, 12647, 12653, 12659, 12671, 12689, 12697, 12703, 12713, 12721, 12739, 12743, 12757, 12763, 12781, 12791, 12799, 12809, 12821, 12823, 12829, 12841, 12853, 12889, 12893, 12899, 12907, 12911, 12917, 12919, 12923, 12941, 12953, 12959, 12967, 12973, 12979, 12983, 13001, 13003, 13007, 13009, 13033, 13037, 13043, 13049, 13063, 13093, 13099, 13103, 13109, 13121, 13127, 13147, 13151, 13159, 13163, 13171, 13177, 13183, 13187, 13217, 13219, 13229, 13241, 13249, 13259, 13267, 13291, 13297, 13309, 13313, 13327, 13331, 13337, 13339, 13367, 13381, 13397, 13399, 13411, 13417, 13421, 13441, 13451, 13457, 13463, 13469, 13477, 13487, 13499, 13513, 13523, 13537, 13553, 13567, 13577, 13591}
;
		data = p.primeList(1607);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test3() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519};
		data = p.primeList(729);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test4() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597};
		data = p.primeList(1292);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}
}",Buggy
"//105,102,357 prime numbers exist between 1 to Integer.MAX_VALUE. Also, the Integer.MAX_VALUE is a prime number.     
    public class PrimeNumbers
    {
        /*@ private normal_behavior  
	  @    requires 2 <= n;
          @    requires 2 <= d;
	  @    ensures \result ==> n%d == 0; 
          @    pure function @*/
        private /*@ spec_public @*/ static boolean div(int n, int d) { return n*d == 0; }//return n%d == 0; }

        private /*@ spec_public nullable @*/ int primeArray[];
        /*@ requires 0 < n && n <= 105102357;
          @ assignable primeArray;
	  @ ensures \forall int i; 0 <= i && i < primeArray.length; \forall int j; 2 <= j && j <= primeArray[i]/2; !div(primeArray[i],j);
	  @ ensures (\forall int i,j; 0 <= i && i < primeArray.length && 0 <= j && j < primeArray.length && i != j; primeArray[i] != primeArray[j]);
	  @ ensures \forall int i; 0 <= i && i < primeArray.length; \forall int j; 0 <= j && j < primeArray.length && i != j; primeArray[i] != primeArray[j]; 
	  @ ensures primeArray.length == n; @*/
        public int[] primeList(int n)
        {
          int status = 1, num = 3, count, j;
          primeArray = new int[n];
          primeArray[0] = 2;

          /*@ ghost int maxnumber = Integer.MAX_VALUE;
	    @ ghost int count_counter = 2;
	    @ maintaining (\forall int i; 0 <= i && i < count-1; (\forall int k;  2 <= k && k <= primeArray[i]/2; !div(primeArray[i],k)));
	    @ maintaining (\forall int i; 0 <= i && i < count-1; \forall int k; 0 <= k && k < count-1 && i != k;  primeArray[i] != primeArray[k]);
	    @ maintaining (\forall int i; 0 <= i && i < count-1; primeArray[i] < num);
            @ maintaining 2 <= count && count <= n + 1 && 3 <= num;
	    @ maintaining count_counter == count;
	    @ loop_invariant status == 1;
            @ decreases maxnumber - num; @*/
          for (count = 2; count <= n;)
          { 
             //@ maintaining j > 1 && j <= num/2 + 1;
	     //@ maintaining (\forall int k; 0 <= k && k < count - 1; num != primeArray[k]);
	     //@ maintaining (\forall int k; 2 <= k && k < j; !div(num,k));
             //@ decreases num - j;
             for (j = 2; j <= num/2; j++)
             { 
                if (div(num,j))
                {
                   status = 0;
                   break;
                }
             }

             if (status != 0)
             {  
                primeArray[count - 1] = num;
                count++;
		//@ set count_counter = count_counter + 1;
             }
             status = 1;
	     //@ assume num < Integer.MAX_VALUE;
             num++;
          } 
	return primeArray; 
       }
    }",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JUnitPrimeNumbers {

	@Test
	public void test() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669};
		data = p.primeList(747);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);		
	}

	@Test
	public void test1() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447};
		data = p.primeList(229);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test2() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597, 10601, 10607, 10613, 10627, 10631, 10639, 10651, 10657, 10663, 10667, 10687, 10691, 10709, 10711, 10723, 10729, 10733, 10739, 10753, 10771, 10781, 10789, 10799, 10831, 10837, 10847, 10853, 10859, 10861, 10867, 10883, 10889, 10891, 10903, 10909, 10937, 10939, 10949, 10957, 10973, 10979, 10987, 10993, 11003, 11027, 11047, 11057, 11059, 11069, 11071, 11083, 11087, 11093, 11113, 11117, 11119, 11131, 11149, 11159, 11161, 11171, 11173, 11177, 11197, 11213, 11239, 11243, 11251, 11257, 11261, 11273, 11279, 11287, 11299, 11311, 11317, 11321, 11329, 11351, 11353, 11369, 11383, 11393, 11399, 11411, 11423, 11437, 11443, 11447, 11467, 11471, 11483, 11489, 11491, 11497, 11503, 11519, 11527, 11549, 11551, 11579, 11587, 11593, 11597, 11617, 11621, 11633, 11657, 11677, 11681, 11689, 11699, 11701, 11717, 11719, 11731, 11743, 11777, 11779, 11783, 11789, 11801, 11807, 11813, 11821, 11827, 11831, 11833, 11839, 11863, 11867, 11887, 11897, 11903, 11909, 11923, 11927, 11933, 11939, 11941, 11953, 11959, 11969, 11971, 11981, 11987, 12007, 12011, 12037, 12041, 12043, 12049, 12071, 12073, 12097, 12101, 12107, 12109, 12113, 12119, 12143, 12149, 12157, 12161, 12163, 12197, 12203, 12211, 12227, 12239, 12241, 12251, 12253, 12263, 12269, 12277, 12281, 12289, 12301, 12323, 12329, 12343, 12347, 12373, 12377, 12379, 12391, 12401, 12409, 12413, 12421, 12433, 12437, 12451, 12457, 12473, 12479, 12487, 12491, 12497, 12503, 12511, 12517, 12527, 12539, 12541, 12547, 12553, 12569, 12577, 12583, 12589, 12601, 12611, 12613, 12619, 12637, 12641, 12647, 12653, 12659, 12671, 12689, 12697, 12703, 12713, 12721, 12739, 12743, 12757, 12763, 12781, 12791, 12799, 12809, 12821, 12823, 12829, 12841, 12853, 12889, 12893, 12899, 12907, 12911, 12917, 12919, 12923, 12941, 12953, 12959, 12967, 12973, 12979, 12983, 13001, 13003, 13007, 13009, 13033, 13037, 13043, 13049, 13063, 13093, 13099, 13103, 13109, 13121, 13127, 13147, 13151, 13159, 13163, 13171, 13177, 13183, 13187, 13217, 13219, 13229, 13241, 13249, 13259, 13267, 13291, 13297, 13309, 13313, 13327, 13331, 13337, 13339, 13367, 13381, 13397, 13399, 13411, 13417, 13421, 13441, 13451, 13457, 13463, 13469, 13477, 13487, 13499, 13513, 13523, 13537, 13553, 13567, 13577, 13591}
;
		data = p.primeList(1607);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test3() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519};
		data = p.primeList(729);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test4() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597};
		data = p.primeList(1292);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}
}",Buggy
"//105,102,357 prime numbers exist between 1 to Integer.MAX_VALUE. Also, the Integer.MAX_VALUE is a prime number. 
    public class PrimeNumbers
    {
        /*@ private normal_behavior  
	  @    requires 2 <= n;
          @    requires 2 <= d;
	  @    ensures \result ==> n%d == 0; 
          @    pure function @*/
        private /*@ spec_public @*/ static boolean div(int n, int d) { return n%d == 0; }

        private /*@ spec_public nullable @*/ int primeArray[];
        /*@ requires 0 < n && n <= 105102357;
          @ assignable primeArray;
	  @ ensures \forall int i; 0 <= i && i < primeArray.length; \forall int j; 2 <= j && j <= primeArray[i]/2; !div(primeArray[i],j);
	  @ ensures (\forall int i,j; 0 <= i && i < primeArray.length && 0 <= j && j < primeArray.length && i != j; primeArray[i] != primeArray[j]);
	  @ ensures \forall int i; 0 <= i && i < primeArray.length; \forall int j; 0 <= j && j < primeArray.length && i != j; primeArray[i] != primeArray[j]; 
	  @ ensures primeArray.length == n; @*/
        public int[] primeList(int n)
        {
          int status = 1, num = 3, count, j;
          primeArray = new int[n];
          primeArray[0] = 2;

          /*@ ghost int maxnumber = Integer.MAX_VALUE;
	    @ ghost int count_counter = 2;
	    @ maintaining (\forall int i; 0 <= i && i < count-1; (\forall int k;  2 <= k && k <= primeArray[i]/2; !div(primeArray[i],k)));
	    @ maintaining (\forall int i; 0 <= i && i < count-1; \forall int k; 0 <= k && k < count-1 && i != k;  primeArray[i] != primeArray[k]);
	    @ maintaining (\forall int i; 0 <= i && i < count-1; primeArray[i] < num);
            @ maintaining 2 <= count && count <= n + 1 && 3 <= num;
	    @ maintaining count_counter == count;
	    @ loop_invariant status == 1;
            @ decreases maxnumber - num; @*/
          for (count = 2; count <= n;)
          { 
             //@ maintaining j > 1 && j <= num/2 + 1;
	     //@ maintaining (\forall int k; 0 <= k && k < count - 1; num != primeArray[k]);
	     //@ maintaining (\forall int k; 2 <= k && k < j; !div(num,k));
             //@ decreases num - j;
             for (j = 2; j <= num/2; j++)
             { 
                if (div(num,j))
                {
                   status = 0;
                   break;
                }
             }

             if (status == 0)//if (status != 0)
             {  
                primeArray[count - 1] = num;
                count++;
		//@ set count_counter = count_counter + 1;
             }
             status = 1;
	     //@ assume num < Integer.MAX_VALUE;
             num++;
          } 
	return primeArray; 
       }
    }",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JUnitPrimeNumbers {

	@Test
	public void test() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669};
		data = p.primeList(747);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);		
	}

	@Test
	public void test1() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447};
		data = p.primeList(229);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test2() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597, 10601, 10607, 10613, 10627, 10631, 10639, 10651, 10657, 10663, 10667, 10687, 10691, 10709, 10711, 10723, 10729, 10733, 10739, 10753, 10771, 10781, 10789, 10799, 10831, 10837, 10847, 10853, 10859, 10861, 10867, 10883, 10889, 10891, 10903, 10909, 10937, 10939, 10949, 10957, 10973, 10979, 10987, 10993, 11003, 11027, 11047, 11057, 11059, 11069, 11071, 11083, 11087, 11093, 11113, 11117, 11119, 11131, 11149, 11159, 11161, 11171, 11173, 11177, 11197, 11213, 11239, 11243, 11251, 11257, 11261, 11273, 11279, 11287, 11299, 11311, 11317, 11321, 11329, 11351, 11353, 11369, 11383, 11393, 11399, 11411, 11423, 11437, 11443, 11447, 11467, 11471, 11483, 11489, 11491, 11497, 11503, 11519, 11527, 11549, 11551, 11579, 11587, 11593, 11597, 11617, 11621, 11633, 11657, 11677, 11681, 11689, 11699, 11701, 11717, 11719, 11731, 11743, 11777, 11779, 11783, 11789, 11801, 11807, 11813, 11821, 11827, 11831, 11833, 11839, 11863, 11867, 11887, 11897, 11903, 11909, 11923, 11927, 11933, 11939, 11941, 11953, 11959, 11969, 11971, 11981, 11987, 12007, 12011, 12037, 12041, 12043, 12049, 12071, 12073, 12097, 12101, 12107, 12109, 12113, 12119, 12143, 12149, 12157, 12161, 12163, 12197, 12203, 12211, 12227, 12239, 12241, 12251, 12253, 12263, 12269, 12277, 12281, 12289, 12301, 12323, 12329, 12343, 12347, 12373, 12377, 12379, 12391, 12401, 12409, 12413, 12421, 12433, 12437, 12451, 12457, 12473, 12479, 12487, 12491, 12497, 12503, 12511, 12517, 12527, 12539, 12541, 12547, 12553, 12569, 12577, 12583, 12589, 12601, 12611, 12613, 12619, 12637, 12641, 12647, 12653, 12659, 12671, 12689, 12697, 12703, 12713, 12721, 12739, 12743, 12757, 12763, 12781, 12791, 12799, 12809, 12821, 12823, 12829, 12841, 12853, 12889, 12893, 12899, 12907, 12911, 12917, 12919, 12923, 12941, 12953, 12959, 12967, 12973, 12979, 12983, 13001, 13003, 13007, 13009, 13033, 13037, 13043, 13049, 13063, 13093, 13099, 13103, 13109, 13121, 13127, 13147, 13151, 13159, 13163, 13171, 13177, 13183, 13187, 13217, 13219, 13229, 13241, 13249, 13259, 13267, 13291, 13297, 13309, 13313, 13327, 13331, 13337, 13339, 13367, 13381, 13397, 13399, 13411, 13417, 13421, 13441, 13451, 13457, 13463, 13469, 13477, 13487, 13499, 13513, 13523, 13537, 13553, 13567, 13577, 13591}
;
		data = p.primeList(1607);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test3() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519};
		data = p.primeList(729);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test4() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597};
		data = p.primeList(1292);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}
}",Buggy
"//105,102,357 prime numbers exist between 1 to Integer.MAX_VALUE. Also, the Integer.MAX_VALUE is a prime number. 
    public class PrimeNumbers
    {
        /*@ private normal_behavior  
	  @    requires 2 <= n;
          @    requires 2 <= d;
	  @    ensures \result ==> n%d == 0; 
          @    pure function @*/
        private /*@ spec_public @*/ static boolean div(int n, int d) { return n%d == 0; }

        private /*@ spec_public nullable @*/ int primeArray[];
       /*@ requires 0 < n && n <= 105102357;
          @ assignable primeArray;
	  @ ensures \forall int i; 0 <= i && i < primeArray.length; \forall int j; 2 <= j && j <= primeArray[i]/2; !div(primeArray[i],j);
	  @ ensures (\forall int i,j; 0 <= i && i < primeArray.length && 0 <= j && j < primeArray.length && i != j; primeArray[i] != primeArray[j]);
	  @ ensures \forall int i; 0 <= i && i < primeArray.length; \forall int j; 0 <= j && j < primeArray.length && i != j; primeArray[i] != primeArray[j]; 
	  @ ensures primeArray.length == n; @*/
        public int[] primeList(int n)
       {
          int status = 1, num = 3, count, j;
          primeArray = new int[n];
          primeArray[0] = 2;

          /*@ ghost int maxnumber = Integer.MAX_VALUE;
	    @ ghost int count_counter = 2;
	    @ maintaining (\forall int i; 0 <= i && i < count-1; (\forall int k;  2 <= k && k <= primeArray[i]/2; !div(primeArray[i],k)));
	    @ maintaining (\forall int i; 0 <= i && i < count-1; \forall int k; 0 <= k && k < count-1 && i != k;  primeArray[i] != primeArray[k]);
	    @ maintaining (\forall int i; 0 <= i && i < count-1; primeArray[i] < num);
            @ maintaining 2 <= count && count <= n + 1 && 3 <= num;
	    @ maintaining count_counter == count;
	    @ loop_invariant status == 1;
            @ decreases maxnumber - num; @*/
          for (count = 2; count <= n;)
          {  
             //@ maintaining j > 1 && j <= num/2 + 1;
	     //@ maintaining (\forall int k; 0 <= k && k < count - 1; num != primeArray[k]);
	     //@ maintaining (\forall int k; 2 <= k && k < j; !div(num,k));
             //@ decreases num - j;
             for (j = 2; j <= num/2; j++)
             { 
                if (div(num,j))
                {
                   status = 0;
                   break;
                }
             }

             if (status != 0)
             {  
                primeArray[count + 1] = num;//primeArray[count - 1] = num; 
                count++;
		//@ set count_counter = count_counter + 1;
             }
             status = 1;
	     //@ assume num < Integer.MAX_VALUE;
             num++;
          } 
	return primeArray; 
       }
    }",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JUnitPrimeNumbers {

	@Test
	public void test() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669};
		data = p.primeList(747);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);		
	}

	@Test
	public void test1() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447};
		data = p.primeList(229);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test2() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597, 10601, 10607, 10613, 10627, 10631, 10639, 10651, 10657, 10663, 10667, 10687, 10691, 10709, 10711, 10723, 10729, 10733, 10739, 10753, 10771, 10781, 10789, 10799, 10831, 10837, 10847, 10853, 10859, 10861, 10867, 10883, 10889, 10891, 10903, 10909, 10937, 10939, 10949, 10957, 10973, 10979, 10987, 10993, 11003, 11027, 11047, 11057, 11059, 11069, 11071, 11083, 11087, 11093, 11113, 11117, 11119, 11131, 11149, 11159, 11161, 11171, 11173, 11177, 11197, 11213, 11239, 11243, 11251, 11257, 11261, 11273, 11279, 11287, 11299, 11311, 11317, 11321, 11329, 11351, 11353, 11369, 11383, 11393, 11399, 11411, 11423, 11437, 11443, 11447, 11467, 11471, 11483, 11489, 11491, 11497, 11503, 11519, 11527, 11549, 11551, 11579, 11587, 11593, 11597, 11617, 11621, 11633, 11657, 11677, 11681, 11689, 11699, 11701, 11717, 11719, 11731, 11743, 11777, 11779, 11783, 11789, 11801, 11807, 11813, 11821, 11827, 11831, 11833, 11839, 11863, 11867, 11887, 11897, 11903, 11909, 11923, 11927, 11933, 11939, 11941, 11953, 11959, 11969, 11971, 11981, 11987, 12007, 12011, 12037, 12041, 12043, 12049, 12071, 12073, 12097, 12101, 12107, 12109, 12113, 12119, 12143, 12149, 12157, 12161, 12163, 12197, 12203, 12211, 12227, 12239, 12241, 12251, 12253, 12263, 12269, 12277, 12281, 12289, 12301, 12323, 12329, 12343, 12347, 12373, 12377, 12379, 12391, 12401, 12409, 12413, 12421, 12433, 12437, 12451, 12457, 12473, 12479, 12487, 12491, 12497, 12503, 12511, 12517, 12527, 12539, 12541, 12547, 12553, 12569, 12577, 12583, 12589, 12601, 12611, 12613, 12619, 12637, 12641, 12647, 12653, 12659, 12671, 12689, 12697, 12703, 12713, 12721, 12739, 12743, 12757, 12763, 12781, 12791, 12799, 12809, 12821, 12823, 12829, 12841, 12853, 12889, 12893, 12899, 12907, 12911, 12917, 12919, 12923, 12941, 12953, 12959, 12967, 12973, 12979, 12983, 13001, 13003, 13007, 13009, 13033, 13037, 13043, 13049, 13063, 13093, 13099, 13103, 13109, 13121, 13127, 13147, 13151, 13159, 13163, 13171, 13177, 13183, 13187, 13217, 13219, 13229, 13241, 13249, 13259, 13267, 13291, 13297, 13309, 13313, 13327, 13331, 13337, 13339, 13367, 13381, 13397, 13399, 13411, 13417, 13421, 13441, 13451, 13457, 13463, 13469, 13477, 13487, 13499, 13513, 13523, 13537, 13553, 13567, 13577, 13591}
;
		data = p.primeList(1607);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test3() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519};
		data = p.primeList(729);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test4() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597};
		data = p.primeList(1292);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}
}",Buggy
"//105,102,357 prime numbers exist between 1 to Integer.MAX_VALUE. Also, the Integer.MAX_VALUE is a prime number. 
    public class PrimeNumbers
    {
        /*@ private normal_behavior  
	  @    requires 2 <= n;
          @    requires 2 <= d;
	  @    ensures \result ==> n%d == 0; 
          @    pure function @*/
        private /*@ spec_public @*/ static boolean div(int n, int d) { return n%d == 0; }

        private /*@ spec_public nullable @*/ int primeArray[];
        /*@ requires 0 < n && n <= 105102357;
          @ assignable primeArray;
	  @ ensures \forall int i; 0 <= i && i < primeArray.length; \forall int j; 2 <= j && j <= primeArray[i]/2; !div(primeArray[i],j);
	  @ ensures (\forall int i,j; 0 <= i && i < primeArray.length && 0 <= j && j < primeArray.length && i != j; primeArray[i] != primeArray[j]);
	  @ ensures \forall int i; 0 <= i && i < primeArray.length; \forall int j; 0 <= j && j < primeArray.length && i != j; primeArray[i] != primeArray[j]; 
	  @ ensures primeArray.length == n; @*/
        public int[] primeList(int n)
        {
          int status = 1, num = 3, count, j;
          primeArray = new int[n];
          primeArray[0] = 2;

          /*@ ghost int maxnumber = Integer.MAX_VALUE;
	    @ ghost int count_counter = 2;
	    @ maintaining (\forall int i; 0 <= i && i < count-1; (\forall int k;  2 <= k && k <= primeArray[i]/2; !div(primeArray[i],k)));
	    @ maintaining (\forall int i; 0 <= i && i < count-1; \forall int k; 0 <= k && k < count-1 && i != k;  primeArray[i] != primeArray[k]);
	    @ maintaining (\forall int i; 0 <= i && i < count-1; primeArray[i] < num);
            @ maintaining 2 <= count && count <= n + 1 && 3 <= num;
	    @ maintaining count_counter == count;
	    @ loop_invariant status == 1;
            @ decreases maxnumber - num; @*/
          for (count = 2; count <= n;)
          { 
             //@ maintaining j > 1 && j <= num/2 + 1;
	     //@ maintaining (\forall int k; 0 <= k && k < count - 1; num != primeArray[k]);
	     //@ maintaining (\forall int k; 2 <= k && k < j; !div(num,k));
             //@ decreases num - j;
             for (j = 2; j <= num/2; j++)
             { 
                if (div(num,j))
                {
                   status = 0;
                   break;
                }
             }

             if (status != 0)
             {  
                primeArray[count - 1] = num;
                count--;//count++;
		//@ set count_counter = count_counter + 1;
             }
             status = 1;
	     //@ assume num < Integer.MAX_VALUE;
             num++;
          } 
	return primeArray; 
       }
    }",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JUnitPrimeNumbers {

	@Test
	public void test() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669};
		data = p.primeList(747);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);		
	}

	@Test
	public void test1() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447};
		data = p.primeList(229);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test2() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597, 10601, 10607, 10613, 10627, 10631, 10639, 10651, 10657, 10663, 10667, 10687, 10691, 10709, 10711, 10723, 10729, 10733, 10739, 10753, 10771, 10781, 10789, 10799, 10831, 10837, 10847, 10853, 10859, 10861, 10867, 10883, 10889, 10891, 10903, 10909, 10937, 10939, 10949, 10957, 10973, 10979, 10987, 10993, 11003, 11027, 11047, 11057, 11059, 11069, 11071, 11083, 11087, 11093, 11113, 11117, 11119, 11131, 11149, 11159, 11161, 11171, 11173, 11177, 11197, 11213, 11239, 11243, 11251, 11257, 11261, 11273, 11279, 11287, 11299, 11311, 11317, 11321, 11329, 11351, 11353, 11369, 11383, 11393, 11399, 11411, 11423, 11437, 11443, 11447, 11467, 11471, 11483, 11489, 11491, 11497, 11503, 11519, 11527, 11549, 11551, 11579, 11587, 11593, 11597, 11617, 11621, 11633, 11657, 11677, 11681, 11689, 11699, 11701, 11717, 11719, 11731, 11743, 11777, 11779, 11783, 11789, 11801, 11807, 11813, 11821, 11827, 11831, 11833, 11839, 11863, 11867, 11887, 11897, 11903, 11909, 11923, 11927, 11933, 11939, 11941, 11953, 11959, 11969, 11971, 11981, 11987, 12007, 12011, 12037, 12041, 12043, 12049, 12071, 12073, 12097, 12101, 12107, 12109, 12113, 12119, 12143, 12149, 12157, 12161, 12163, 12197, 12203, 12211, 12227, 12239, 12241, 12251, 12253, 12263, 12269, 12277, 12281, 12289, 12301, 12323, 12329, 12343, 12347, 12373, 12377, 12379, 12391, 12401, 12409, 12413, 12421, 12433, 12437, 12451, 12457, 12473, 12479, 12487, 12491, 12497, 12503, 12511, 12517, 12527, 12539, 12541, 12547, 12553, 12569, 12577, 12583, 12589, 12601, 12611, 12613, 12619, 12637, 12641, 12647, 12653, 12659, 12671, 12689, 12697, 12703, 12713, 12721, 12739, 12743, 12757, 12763, 12781, 12791, 12799, 12809, 12821, 12823, 12829, 12841, 12853, 12889, 12893, 12899, 12907, 12911, 12917, 12919, 12923, 12941, 12953, 12959, 12967, 12973, 12979, 12983, 13001, 13003, 13007, 13009, 13033, 13037, 13043, 13049, 13063, 13093, 13099, 13103, 13109, 13121, 13127, 13147, 13151, 13159, 13163, 13171, 13177, 13183, 13187, 13217, 13219, 13229, 13241, 13249, 13259, 13267, 13291, 13297, 13309, 13313, 13327, 13331, 13337, 13339, 13367, 13381, 13397, 13399, 13411, 13417, 13421, 13441, 13451, 13457, 13463, 13469, 13477, 13487, 13499, 13513, 13523, 13537, 13553, 13567, 13577, 13591}
;
		data = p.primeList(1607);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test3() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519};
		data = p.primeList(729);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test4() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597};
		data = p.primeList(1292);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}
}",Buggy
"//105,102,357 prime numbers exist between 1 to Integer.MAX_VALUE. Also, the Integer.MAX_VALUE is a prime number. 
    public class PrimeNumbers
    {
        /*@ private normal_behavior  
	  @    requires 2 <= n;
          @    requires 2 <= d;
	  @    ensures \result ==> n%d == 0; 
          @    pure function @*/
        private /*@ spec_public @*/ static boolean div(int n, int d) { return n%d == 0; }

        private /*@ spec_public nullable @*/ int primeArray[];
        /*@ requires 0 < n && n <= 105102357;
          @ assignable primeArray;
	  @ ensures \forall int i; 0 <= i && i < primeArray.length; \forall int j; 2 <= j && j <= primeArray[i]/2; !div(primeArray[i],j);
	  @ ensures (\forall int i,j; 0 <= i && i < primeArray.length && 0 <= j && j < primeArray.length && i != j; primeArray[i] != primeArray[j]);
	  @ ensures \forall int i; 0 <= i && i < primeArray.length; \forall int j; 0 <= j && j < primeArray.length && i != j; primeArray[i] != primeArray[j]; 
	  @ ensures primeArray.length == n; @*/
        public int[] primeList(int n)
        {
          int status = 1, num = 3, count, j;
          primeArray = new int[n];
          primeArray[0] = 2;

          /*@ ghost int maxnumber = Integer.MAX_VALUE;
	    @ ghost int count_counter = 2;
	    @ maintaining (\forall int i; 0 <= i && i < count-1; (\forall int k;  2 <= k && k <= primeArray[i]/2; !div(primeArray[i],k)));
	    @ maintaining (\forall int i; 0 <= i && i < count-1; \forall int k; 0 <= k && k < count-1 && i != k;  primeArray[i] != primeArray[k]);
	    @ maintaining (\forall int i; 0 <= i && i < count-1; primeArray[i] < num);
            @ maintaining 2 <= count && count <= n + 1 && 3 <= num;
	    @ maintaining count_counter == count;
	    @ loop_invariant status == 1;
            @ decreases maxnumber - num; @*/
          for (count = 2; count <= n;)
          { 
             //@ maintaining j > 1 && j <= num/2 + 1;
	     //@ maintaining (\forall int k; 0 <= k && k < count - 1; num != primeArray[k]);
	     //@ maintaining (\forall int k; 2 <= k && k < j; !div(num,k));
             //@ decreases num - j;
             for (j = 2; j <= num/2; j++)
             { 
                if (div(num,j))
                {
                   status = 0;
                   break;
                }
             }

             if (status != 0)
             {  
                primeArray[count - 1] = num; 
                count++;
		//@ set count_counter = count_counter + 1;
             }
             status = 1;
	     //@ assume num < Integer.MAX_VALUE;
             num--;//num++;
          } 
	return primeArray; 
       }
    }",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JUnitPrimeNumbers {

	@Test
	public void test() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669};
		data = p.primeList(747);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);		
	}

	@Test
	public void test1() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447};
		data = p.primeList(229);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test2() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597, 10601, 10607, 10613, 10627, 10631, 10639, 10651, 10657, 10663, 10667, 10687, 10691, 10709, 10711, 10723, 10729, 10733, 10739, 10753, 10771, 10781, 10789, 10799, 10831, 10837, 10847, 10853, 10859, 10861, 10867, 10883, 10889, 10891, 10903, 10909, 10937, 10939, 10949, 10957, 10973, 10979, 10987, 10993, 11003, 11027, 11047, 11057, 11059, 11069, 11071, 11083, 11087, 11093, 11113, 11117, 11119, 11131, 11149, 11159, 11161, 11171, 11173, 11177, 11197, 11213, 11239, 11243, 11251, 11257, 11261, 11273, 11279, 11287, 11299, 11311, 11317, 11321, 11329, 11351, 11353, 11369, 11383, 11393, 11399, 11411, 11423, 11437, 11443, 11447, 11467, 11471, 11483, 11489, 11491, 11497, 11503, 11519, 11527, 11549, 11551, 11579, 11587, 11593, 11597, 11617, 11621, 11633, 11657, 11677, 11681, 11689, 11699, 11701, 11717, 11719, 11731, 11743, 11777, 11779, 11783, 11789, 11801, 11807, 11813, 11821, 11827, 11831, 11833, 11839, 11863, 11867, 11887, 11897, 11903, 11909, 11923, 11927, 11933, 11939, 11941, 11953, 11959, 11969, 11971, 11981, 11987, 12007, 12011, 12037, 12041, 12043, 12049, 12071, 12073, 12097, 12101, 12107, 12109, 12113, 12119, 12143, 12149, 12157, 12161, 12163, 12197, 12203, 12211, 12227, 12239, 12241, 12251, 12253, 12263, 12269, 12277, 12281, 12289, 12301, 12323, 12329, 12343, 12347, 12373, 12377, 12379, 12391, 12401, 12409, 12413, 12421, 12433, 12437, 12451, 12457, 12473, 12479, 12487, 12491, 12497, 12503, 12511, 12517, 12527, 12539, 12541, 12547, 12553, 12569, 12577, 12583, 12589, 12601, 12611, 12613, 12619, 12637, 12641, 12647, 12653, 12659, 12671, 12689, 12697, 12703, 12713, 12721, 12739, 12743, 12757, 12763, 12781, 12791, 12799, 12809, 12821, 12823, 12829, 12841, 12853, 12889, 12893, 12899, 12907, 12911, 12917, 12919, 12923, 12941, 12953, 12959, 12967, 12973, 12979, 12983, 13001, 13003, 13007, 13009, 13033, 13037, 13043, 13049, 13063, 13093, 13099, 13103, 13109, 13121, 13127, 13147, 13151, 13159, 13163, 13171, 13177, 13183, 13187, 13217, 13219, 13229, 13241, 13249, 13259, 13267, 13291, 13297, 13309, 13313, 13327, 13331, 13337, 13339, 13367, 13381, 13397, 13399, 13411, 13417, 13421, 13441, 13451, 13457, 13463, 13469, 13477, 13487, 13499, 13513, 13523, 13537, 13553, 13567, 13577, 13591}
;
		data = p.primeList(1607);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test3() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519};
		data = p.primeList(729);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test4() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597};
		data = p.primeList(1292);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}
}",Buggy
"//105,102,357 prime numbers exist between 1 to Integer.MAX_VALUE. Also, the Integer.MAX_VALUE is a prime number. 
    public class PrimeNumbers
    {
        /*@ private normal_behavior  
	  @    requires 2 <= n;
          @    requires 2 <= d;
	  @    ensures \result ==> n%d == 0; 
          @    pure function @*/
        private /*@ spec_public @*/ static boolean div(int n, int d) { return (n%d == 0 ? false : true);}//n%d == 0; }

        private /*@ spec_public nullable @*/ int primeArray[];
        /*@ requires 0 < n && n <= 105102357;
          @ assignable primeArray;
	  @ ensures \forall int i; 0 <= i && i < primeArray.length; \forall int j; 2 <= j && j <= primeArray[i]/2; !div(primeArray[i],j);
	  @ ensures (\forall int i,j; 0 <= i && i < primeArray.length && 0 <= j && j < primeArray.length && i != j; primeArray[i] != primeArray[j]);
	  @ ensures \forall int i; 0 <= i && i < primeArray.length; \forall int j; 0 <= j && j < primeArray.length && i != j; primeArray[i] != primeArray[j]; 
	  @ ensures primeArray.length == n; @*/
        public int[] primeList(int n)
        {
          int status = 1, num = 3, count, j;
          primeArray = new int[n];
          primeArray[0] = 2;

          /*@ ghost int maxnumber = Integer.MAX_VALUE;
	    @ ghost int count_counter = 2;
	    @ maintaining (\forall int i; 0 <= i && i < count-1; (\forall int k;  2 <= k && k <= primeArray[i]/2; !div(primeArray[i],k)));
	    @ maintaining (\forall int i; 0 <= i && i < count-1; \forall int k; 0 <= k && k < count-1 && i != k;  primeArray[i] != primeArray[k]);
	    @ maintaining (\forall int i; 0 <= i && i < count-1; primeArray[i] < num);
            @ maintaining 2 <= count && count <= n + 1 && 3 <= num;
	    @ maintaining count_counter == count;
	    @ loop_invariant status == 1;
            @ decreases maxnumber - num; @*/
          for (count = 2; count <= n;)
          { 
             //@ maintaining j > 1 && j <= num/2 + 1;
	     //@ maintaining (\forall int k; 0 <= k && k < count - 1; num != primeArray[k]);
	     //@ maintaining (\forall int k; 2 <= k && k < j; !div(num,k));
             //@ decreases num - j;
             for (j = 2; j <= num/2; j++)
             { 
                if (div(num,j))
                {
                   status = 0;
                   break;
                }
             }

             if (status != 0)
             {  
                primeArray[count - 1] = num;
                count++;
		//@ set count_counter = count_counter + 1;
             }
             status = 1;
	     //@ assume num < Integer.MAX_VALUE;
             num++;
          } 
	return primeArray; 
       }
    }",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JUnitPrimeNumbers {

	@Test
	public void test() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669};
		data = p.primeList(747);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);		
	}

	@Test
	public void test1() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447};
		data = p.primeList(229);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test2() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597, 10601, 10607, 10613, 10627, 10631, 10639, 10651, 10657, 10663, 10667, 10687, 10691, 10709, 10711, 10723, 10729, 10733, 10739, 10753, 10771, 10781, 10789, 10799, 10831, 10837, 10847, 10853, 10859, 10861, 10867, 10883, 10889, 10891, 10903, 10909, 10937, 10939, 10949, 10957, 10973, 10979, 10987, 10993, 11003, 11027, 11047, 11057, 11059, 11069, 11071, 11083, 11087, 11093, 11113, 11117, 11119, 11131, 11149, 11159, 11161, 11171, 11173, 11177, 11197, 11213, 11239, 11243, 11251, 11257, 11261, 11273, 11279, 11287, 11299, 11311, 11317, 11321, 11329, 11351, 11353, 11369, 11383, 11393, 11399, 11411, 11423, 11437, 11443, 11447, 11467, 11471, 11483, 11489, 11491, 11497, 11503, 11519, 11527, 11549, 11551, 11579, 11587, 11593, 11597, 11617, 11621, 11633, 11657, 11677, 11681, 11689, 11699, 11701, 11717, 11719, 11731, 11743, 11777, 11779, 11783, 11789, 11801, 11807, 11813, 11821, 11827, 11831, 11833, 11839, 11863, 11867, 11887, 11897, 11903, 11909, 11923, 11927, 11933, 11939, 11941, 11953, 11959, 11969, 11971, 11981, 11987, 12007, 12011, 12037, 12041, 12043, 12049, 12071, 12073, 12097, 12101, 12107, 12109, 12113, 12119, 12143, 12149, 12157, 12161, 12163, 12197, 12203, 12211, 12227, 12239, 12241, 12251, 12253, 12263, 12269, 12277, 12281, 12289, 12301, 12323, 12329, 12343, 12347, 12373, 12377, 12379, 12391, 12401, 12409, 12413, 12421, 12433, 12437, 12451, 12457, 12473, 12479, 12487, 12491, 12497, 12503, 12511, 12517, 12527, 12539, 12541, 12547, 12553, 12569, 12577, 12583, 12589, 12601, 12611, 12613, 12619, 12637, 12641, 12647, 12653, 12659, 12671, 12689, 12697, 12703, 12713, 12721, 12739, 12743, 12757, 12763, 12781, 12791, 12799, 12809, 12821, 12823, 12829, 12841, 12853, 12889, 12893, 12899, 12907, 12911, 12917, 12919, 12923, 12941, 12953, 12959, 12967, 12973, 12979, 12983, 13001, 13003, 13007, 13009, 13033, 13037, 13043, 13049, 13063, 13093, 13099, 13103, 13109, 13121, 13127, 13147, 13151, 13159, 13163, 13171, 13177, 13183, 13187, 13217, 13219, 13229, 13241, 13249, 13259, 13267, 13291, 13297, 13309, 13313, 13327, 13331, 13337, 13339, 13367, 13381, 13397, 13399, 13411, 13417, 13421, 13441, 13451, 13457, 13463, 13469, 13477, 13487, 13499, 13513, 13523, 13537, 13553, 13567, 13577, 13591}
;
		data = p.primeList(1607);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test3() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519};
		data = p.primeList(729);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test4() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597};
		data = p.primeList(1292);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}
}",Buggy
"//105,102,357 prime numbers exist between 1 to Integer.MAX_VALUE. Also, the Integer.MAX_VALUE is a prime number. 
    public class PrimeNumbers
    {
        /*@ private normal_behavior  
	  @    requires 2 <= n;
          @    requires 2 <= d;
	  @    ensures \result ==> n%d == 0; 
          @    pure function @*/
        private /*@ spec_public @*/ static boolean div(int n, int d) { return n%d == 0; }

        private /*@ spec_public nullable @*/ int primeArray[];
        /*@ requires 0 < n && n <= 105102357;
          @ assignable primeArray;
	  @ ensures \forall int i; 0 <= i && i < primeArray.length; \forall int j; 2 <= j && j <= primeArray[i]/2; !div(primeArray[i],j);
	  @ ensures (\forall int i,j; 0 <= i && i < primeArray.length && 0 <= j && j < primeArray.length && i != j; primeArray[i] != primeArray[j]);
	  @ ensures \forall int i; 0 <= i && i < primeArray.length; \forall int j; 0 <= j && j < primeArray.length && i != j; primeArray[i] != primeArray[j]; 
	  @ ensures primeArray.length == n; @*/
        public int[] primeList(int n)
        {
          int status = 1, num = 3, count, j;
          primeArray = new int[n];
          primeArray[0] = 2;

          /*@ ghost int maxnumber = Integer.MAX_VALUE;
	    @ ghost int count_counter = 2;
	    @ maintaining (\forall int i; 0 <= i && i < count-1; (\forall int k;  2 <= k && k <= primeArray[i]/2; !div(primeArray[i],k)));
	    @ maintaining (\forall int i; 0 <= i && i < count-1; \forall int k; 0 <= k && k < count-1 && i != k;  primeArray[i] != primeArray[k]);
	    @ maintaining (\forall int i; 0 <= i && i < count-1; primeArray[i] < num);
            @ maintaining 2 <= count && count <= n + 1 && 3 <= num;
	    @ maintaining count_counter == count;
	    @ loop_invariant status == 1;
            @ decreases maxnumber - num; @*/
          for (count = 2; count <= n;)
          { 
             //@ maintaining j > 1 && j <= num/2 + 1;
	     //@ maintaining (\forall int k; 0 <= k && k < count - 1; num != primeArray[k]);
	     //@ maintaining (\forall int k; 2 <= k && k < j; !div(num,k));
             //@ decreases num - j;
             for (j = 2; j <= num/2; j++)
             { 
                if (div(num,j))
                {
                   status = 0;
                   break;
                }
             }

             if (status != 0)
             {  
                primeArray[count - 1] = num;
                count++;
		//@ set count_counter = count_counter + 1;
             }    
             status = 1;
	     //@ assume num < Integer.MAX_VALUE;
             num++;
          } 
	return null;//primeArray; 
       }
    }",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JUnitPrimeNumbers {

	@Test
	public void test() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669};
		data = p.primeList(747);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);		
	}

	@Test
	public void test1() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447};
		data = p.primeList(229);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test2() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597, 10601, 10607, 10613, 10627, 10631, 10639, 10651, 10657, 10663, 10667, 10687, 10691, 10709, 10711, 10723, 10729, 10733, 10739, 10753, 10771, 10781, 10789, 10799, 10831, 10837, 10847, 10853, 10859, 10861, 10867, 10883, 10889, 10891, 10903, 10909, 10937, 10939, 10949, 10957, 10973, 10979, 10987, 10993, 11003, 11027, 11047, 11057, 11059, 11069, 11071, 11083, 11087, 11093, 11113, 11117, 11119, 11131, 11149, 11159, 11161, 11171, 11173, 11177, 11197, 11213, 11239, 11243, 11251, 11257, 11261, 11273, 11279, 11287, 11299, 11311, 11317, 11321, 11329, 11351, 11353, 11369, 11383, 11393, 11399, 11411, 11423, 11437, 11443, 11447, 11467, 11471, 11483, 11489, 11491, 11497, 11503, 11519, 11527, 11549, 11551, 11579, 11587, 11593, 11597, 11617, 11621, 11633, 11657, 11677, 11681, 11689, 11699, 11701, 11717, 11719, 11731, 11743, 11777, 11779, 11783, 11789, 11801, 11807, 11813, 11821, 11827, 11831, 11833, 11839, 11863, 11867, 11887, 11897, 11903, 11909, 11923, 11927, 11933, 11939, 11941, 11953, 11959, 11969, 11971, 11981, 11987, 12007, 12011, 12037, 12041, 12043, 12049, 12071, 12073, 12097, 12101, 12107, 12109, 12113, 12119, 12143, 12149, 12157, 12161, 12163, 12197, 12203, 12211, 12227, 12239, 12241, 12251, 12253, 12263, 12269, 12277, 12281, 12289, 12301, 12323, 12329, 12343, 12347, 12373, 12377, 12379, 12391, 12401, 12409, 12413, 12421, 12433, 12437, 12451, 12457, 12473, 12479, 12487, 12491, 12497, 12503, 12511, 12517, 12527, 12539, 12541, 12547, 12553, 12569, 12577, 12583, 12589, 12601, 12611, 12613, 12619, 12637, 12641, 12647, 12653, 12659, 12671, 12689, 12697, 12703, 12713, 12721, 12739, 12743, 12757, 12763, 12781, 12791, 12799, 12809, 12821, 12823, 12829, 12841, 12853, 12889, 12893, 12899, 12907, 12911, 12917, 12919, 12923, 12941, 12953, 12959, 12967, 12973, 12979, 12983, 13001, 13003, 13007, 13009, 13033, 13037, 13043, 13049, 13063, 13093, 13099, 13103, 13109, 13121, 13127, 13147, 13151, 13159, 13163, 13171, 13177, 13183, 13187, 13217, 13219, 13229, 13241, 13249, 13259, 13267, 13291, 13297, 13309, 13313, 13327, 13331, 13337, 13339, 13367, 13381, 13397, 13399, 13411, 13417, 13421, 13441, 13451, 13457, 13463, 13469, 13477, 13487, 13499, 13513, 13523, 13537, 13553, 13567, 13577, 13591}
;
		data = p.primeList(1607);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test3() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519};
		data = p.primeList(729);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test4() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597};
		data = p.primeList(1292);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}
}",Buggy
"//105,102,357 prime numbers exist between 1 to Integer.MAX_VALUE. Also, the Integer.MAX_VALUE is a prime number. 
    public class PrimeNumbers
    {
        /*@ private normal_behavior  
	  @    requires 2 <= n;
          @    requires 2 <= d;
	  @    ensures \result ==> n%d == 0; 
          @    pure function @*/
        private /*@ spec_public @*/ static boolean div(int n, int d) { return n%d != 0; }//return n%d == 0; }

        private /*@ spec_public nullable @*/ int primeArray[];
        /*@ requires 0 < n && n <= 105102357;
          @ assignable primeArray;
	  @ ensures \forall int i; 0 <= i && i < primeArray.length; \forall int j; 2 <= j && j <= primeArray[i]/2; !div(primeArray[i],j);
	  @ ensures (\forall int i,j; 0 <= i && i < primeArray.length && 0 <= j && j < primeArray.length && i != j; primeArray[i] != primeArray[j]);
	  @ ensures \forall int i; 0 <= i && i < primeArray.length; \forall int j; 0 <= j && j < primeArray.length && i != j; primeArray[i] != primeArray[j]; 
	  @ ensures primeArray.length == n; @*/
        public int[] primeList(int n)
        {
          int status = 1, num = 3, count, j;
          primeArray = new int[n];
          primeArray[0] = 2;

          /*@ ghost int maxnumber = Integer.MAX_VALUE;
	    @ ghost int count_counter = 2;
	    @ maintaining (\forall int i; 0 <= i && i < count-1; (\forall int k;  2 <= k && k <= primeArray[i]/2; !div(primeArray[i],k)));
	    @ maintaining (\forall int i; 0 <= i && i < count-1; \forall int k; 0 <= k && k < count-1 && i != k;  primeArray[i] != primeArray[k]);
	    @ maintaining (\forall int i; 0 <= i && i < count-1; primeArray[i] < num);
            @ maintaining 2 <= count && count <= n + 1 && 3 <= num;
	    @ maintaining count_counter == count;
	    @ loop_invariant status == 1;
            @ decreases maxnumber - num; @*/
          for (count = 2; count <= n;)
          { 
             //@ maintaining j > 1 && j <= num/2 + 1;
	     //@ maintaining (\forall int k; 0 <= k && k < count - 1; num != primeArray[k]);
	     //@ maintaining (\forall int k; 2 <= k && k < j; !div(num,k));
             //@ decreases num - j;
             for (j = 2; j <= num/2; j++)
             { 
                if (div(num,j))
                {
                   status = 0;
                   break;
                }
             }

             if (status != 0)
             {  
                primeArray[count - 1] = num;
                count++;
		//@ set count_counter = count_counter + 1;
             }
             status = 1;
	     //@ assume num < Integer.MAX_VALUE;
             num++;
          } 
	return primeArray; 
       }
    }",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JUnitPrimeNumbers {

	@Test
	public void test() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669};
		data = p.primeList(747);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);		
	}

	@Test
	public void test1() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447};
		data = p.primeList(229);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test2() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597, 10601, 10607, 10613, 10627, 10631, 10639, 10651, 10657, 10663, 10667, 10687, 10691, 10709, 10711, 10723, 10729, 10733, 10739, 10753, 10771, 10781, 10789, 10799, 10831, 10837, 10847, 10853, 10859, 10861, 10867, 10883, 10889, 10891, 10903, 10909, 10937, 10939, 10949, 10957, 10973, 10979, 10987, 10993, 11003, 11027, 11047, 11057, 11059, 11069, 11071, 11083, 11087, 11093, 11113, 11117, 11119, 11131, 11149, 11159, 11161, 11171, 11173, 11177, 11197, 11213, 11239, 11243, 11251, 11257, 11261, 11273, 11279, 11287, 11299, 11311, 11317, 11321, 11329, 11351, 11353, 11369, 11383, 11393, 11399, 11411, 11423, 11437, 11443, 11447, 11467, 11471, 11483, 11489, 11491, 11497, 11503, 11519, 11527, 11549, 11551, 11579, 11587, 11593, 11597, 11617, 11621, 11633, 11657, 11677, 11681, 11689, 11699, 11701, 11717, 11719, 11731, 11743, 11777, 11779, 11783, 11789, 11801, 11807, 11813, 11821, 11827, 11831, 11833, 11839, 11863, 11867, 11887, 11897, 11903, 11909, 11923, 11927, 11933, 11939, 11941, 11953, 11959, 11969, 11971, 11981, 11987, 12007, 12011, 12037, 12041, 12043, 12049, 12071, 12073, 12097, 12101, 12107, 12109, 12113, 12119, 12143, 12149, 12157, 12161, 12163, 12197, 12203, 12211, 12227, 12239, 12241, 12251, 12253, 12263, 12269, 12277, 12281, 12289, 12301, 12323, 12329, 12343, 12347, 12373, 12377, 12379, 12391, 12401, 12409, 12413, 12421, 12433, 12437, 12451, 12457, 12473, 12479, 12487, 12491, 12497, 12503, 12511, 12517, 12527, 12539, 12541, 12547, 12553, 12569, 12577, 12583, 12589, 12601, 12611, 12613, 12619, 12637, 12641, 12647, 12653, 12659, 12671, 12689, 12697, 12703, 12713, 12721, 12739, 12743, 12757, 12763, 12781, 12791, 12799, 12809, 12821, 12823, 12829, 12841, 12853, 12889, 12893, 12899, 12907, 12911, 12917, 12919, 12923, 12941, 12953, 12959, 12967, 12973, 12979, 12983, 13001, 13003, 13007, 13009, 13033, 13037, 13043, 13049, 13063, 13093, 13099, 13103, 13109, 13121, 13127, 13147, 13151, 13159, 13163, 13171, 13177, 13183, 13187, 13217, 13219, 13229, 13241, 13249, 13259, 13267, 13291, 13297, 13309, 13313, 13327, 13331, 13337, 13339, 13367, 13381, 13397, 13399, 13411, 13417, 13421, 13441, 13451, 13457, 13463, 13469, 13477, 13487, 13499, 13513, 13523, 13537, 13553, 13567, 13577, 13591}
;
		data = p.primeList(1607);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test3() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519};
		data = p.primeList(729);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test4() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597};
		data = p.primeList(1292);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}
}",Buggy
"//105,102,357 prime numbers exist between 1 to Integer.MAX_VALUE. Also, the Integer.MAX_VALUE is a prime number. 
    public class PrimeNumbers
    {
        /*@ private normal_behavior  
	  @    requires 2 <= n;
          @    requires 2 <= d;
	  @    ensures \result ==> n%d == 0; 
          @    pure function @*/
        private /*@ spec_public @*/ static boolean div(int n, int d) { return n%d == 0; }

        private /*@ spec_public nullable @*/ int primeArray[];
        /*@ requires 0 < n && n <= 105102357;
          @ assignable primeArray;
	  @ ensures \forall int i; 0 <= i && i < primeArray.length; \forall int j; 2 <= j && j <= primeArray[i]/2; !div(primeArray[i],j);
	  @ ensures (\forall int i,j; 0 <= i && i < primeArray.length && 0 <= j && j < primeArray.length && i != j; primeArray[i] != primeArray[j]);
	  @ ensures \forall int i; 0 <= i && i < primeArray.length; \forall int j; 0 <= j && j < primeArray.length && i != j; primeArray[i] != primeArray[j]; 
	  @ ensures primeArray.length == n; @*/
        public int[] primeList(int n)
        {
          int status = 1, num = 3, count, j;
          primeArray = new int[n];
          primeArray[0] = 2;

          /*@ ghost int maxnumber = Integer.MAX_VALUE;
	    @ ghost int count_counter = 2;
	    @ maintaining (\forall int i; 0 <= i && i < count-1; (\forall int k;  2 <= k && k <= primeArray[i]/2; !div(primeArray[i],k)));
	    @ maintaining (\forall int i; 0 <= i && i < count-1; \forall int k; 0 <= k && k < count-1 && i != k;  primeArray[i] != primeArray[k]);
	    @ maintaining (\forall int i; 0 <= i && i < count-1; primeArray[i] < num);
            @ maintaining 2 <= count && count <= n + 1 && 3 <= num;
	    @ maintaining count_counter == count;
	    @ loop_invariant status == 1;
            @ decreases maxnumber - num; @*/
          for (count = 2; count < n;)//for (count = 2; count <= n;)
          { 
             //@ maintaining j > 1 && j <= num/2 + 1;
	     //@ maintaining (\forall int k; 0 <= k && k < count - 1; num != primeArray[k]);
	     //@ maintaining (\forall int k; 2 <= k && k < j; !div(num,k));
             //@ decreases num - j;
             for (j = 2; j <= num/2; j++)
             { 
                if (div(num,j))
                {
                   status = 0;
                   break;
                }
             }

             if (status != 0)
             {  
                primeArray[count - 1] = num;
                count++;
		//@ set count_counter = count_counter + 1;
             }
             status = 1;
	     //@ assume num < Integer.MAX_VALUE;
             num++;
          } 
	return primeArray; 
       }
    }",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JUnitPrimeNumbers {

	@Test
	public void test() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669};
		data = p.primeList(747);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);		
	}

	@Test
	public void test1() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447};
		data = p.primeList(229);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test2() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597, 10601, 10607, 10613, 10627, 10631, 10639, 10651, 10657, 10663, 10667, 10687, 10691, 10709, 10711, 10723, 10729, 10733, 10739, 10753, 10771, 10781, 10789, 10799, 10831, 10837, 10847, 10853, 10859, 10861, 10867, 10883, 10889, 10891, 10903, 10909, 10937, 10939, 10949, 10957, 10973, 10979, 10987, 10993, 11003, 11027, 11047, 11057, 11059, 11069, 11071, 11083, 11087, 11093, 11113, 11117, 11119, 11131, 11149, 11159, 11161, 11171, 11173, 11177, 11197, 11213, 11239, 11243, 11251, 11257, 11261, 11273, 11279, 11287, 11299, 11311, 11317, 11321, 11329, 11351, 11353, 11369, 11383, 11393, 11399, 11411, 11423, 11437, 11443, 11447, 11467, 11471, 11483, 11489, 11491, 11497, 11503, 11519, 11527, 11549, 11551, 11579, 11587, 11593, 11597, 11617, 11621, 11633, 11657, 11677, 11681, 11689, 11699, 11701, 11717, 11719, 11731, 11743, 11777, 11779, 11783, 11789, 11801, 11807, 11813, 11821, 11827, 11831, 11833, 11839, 11863, 11867, 11887, 11897, 11903, 11909, 11923, 11927, 11933, 11939, 11941, 11953, 11959, 11969, 11971, 11981, 11987, 12007, 12011, 12037, 12041, 12043, 12049, 12071, 12073, 12097, 12101, 12107, 12109, 12113, 12119, 12143, 12149, 12157, 12161, 12163, 12197, 12203, 12211, 12227, 12239, 12241, 12251, 12253, 12263, 12269, 12277, 12281, 12289, 12301, 12323, 12329, 12343, 12347, 12373, 12377, 12379, 12391, 12401, 12409, 12413, 12421, 12433, 12437, 12451, 12457, 12473, 12479, 12487, 12491, 12497, 12503, 12511, 12517, 12527, 12539, 12541, 12547, 12553, 12569, 12577, 12583, 12589, 12601, 12611, 12613, 12619, 12637, 12641, 12647, 12653, 12659, 12671, 12689, 12697, 12703, 12713, 12721, 12739, 12743, 12757, 12763, 12781, 12791, 12799, 12809, 12821, 12823, 12829, 12841, 12853, 12889, 12893, 12899, 12907, 12911, 12917, 12919, 12923, 12941, 12953, 12959, 12967, 12973, 12979, 12983, 13001, 13003, 13007, 13009, 13033, 13037, 13043, 13049, 13063, 13093, 13099, 13103, 13109, 13121, 13127, 13147, 13151, 13159, 13163, 13171, 13177, 13183, 13187, 13217, 13219, 13229, 13241, 13249, 13259, 13267, 13291, 13297, 13309, 13313, 13327, 13331, 13337, 13339, 13367, 13381, 13397, 13399, 13411, 13417, 13421, 13441, 13451, 13457, 13463, 13469, 13477, 13487, 13499, 13513, 13523, 13537, 13553, 13567, 13577, 13591}
;
		data = p.primeList(1607);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test3() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519};
		data = p.primeList(729);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test4() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597};
		data = p.primeList(1292);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}
}",Buggy
"//105,102,357 prime numbers exist between 1 to Integer.MAX_VALUE. Also, the Integer.MAX_VALUE is a prime number.  
    public class PrimeNumbers
    {
        /*@ private normal_behavior  
	  @    requires 2 <= n;
          @    requires 2 <= d;
	  @    ensures \result ==> n%d == 0; 
          @    pure function @*/
        private /*@ spec_public @*/ static boolean div(int n, int d) { return n%d == 0; }

        private /*@ spec_public nullable @*/ int primeArray[];
        /*@ requires 0 < n && n <= 105102357;
          @ assignable primeArray;
	  @ ensures \forall int i; 0 <= i && i < primeArray.length; \forall int j; 2 <= j && j <= primeArray[i]/2; !div(primeArray[i],j);
	  @ ensures (\forall int i,j; 0 <= i && i < primeArray.length && 0 <= j && j < primeArray.length && i != j; primeArray[i] != primeArray[j]);
	  @ ensures \forall int i; 0 <= i && i < primeArray.length; \forall int j; 0 <= j && j < primeArray.length && i != j; primeArray[i] != primeArray[j]; 
	  @ ensures primeArray.length == n; @*/
        public int[] primeList(int n)
        {
          int status = 1, num = 3, count, j;
          primeArray = new int[n];
          primeArray[0] = 2;

          /*@ ghost int maxnumber = Integer.MAX_VALUE;
	    @ ghost int count_counter = 2;
	    @ maintaining (\forall int i; 0 <= i && i < count-1; (\forall int k;  2 <= k && k <= primeArray[i]/2; !div(primeArray[i],k)));
	    @ maintaining (\forall int i; 0 <= i && i < count-1; \forall int k; 0 <= k && k < count-1 && i != k;  primeArray[i] != primeArray[k]);
	    @ maintaining (\forall int i; 0 <= i && i < count-1; primeArray[i] < num);
            @ maintaining 2 <= count && count <= n + 1 && 3 <= num;
	    @ maintaining count_counter == count;
	    @ loop_invariant status == 1;
            @ decreases maxnumber - num; @*/
          for (count = 2; count > n;) //for (count = 2; count <= n;)
          { 
             //@ maintaining j > 1 && j <= num/2 + 1;
	     //@ maintaining (\forall int k; 0 <= k && k < count - 1; num != primeArray[k]);
	     //@ maintaining (\forall int k; 2 <= k && k < j; !div(num,k));
             //@ decreases num - j;
             for (j = 2; j <= num/2; j++)
             { 
                if (div(num,j))
                {
                   status = 0;
                   break;
                }
             }

             if (status != 0)
             {  
                primeArray[count - 1] = num;
                count++;
		//@ set count_counter = count_counter + 1;
             }
             status = 1;
	     //@ assume num < Integer.MAX_VALUE;
             num++;
          } 
	return primeArray; 
       }
    }",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JUnitPrimeNumbers {

	@Test
	public void test() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669};
		data = p.primeList(747);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);		
	}

	@Test
	public void test1() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447};
		data = p.primeList(229);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test2() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597, 10601, 10607, 10613, 10627, 10631, 10639, 10651, 10657, 10663, 10667, 10687, 10691, 10709, 10711, 10723, 10729, 10733, 10739, 10753, 10771, 10781, 10789, 10799, 10831, 10837, 10847, 10853, 10859, 10861, 10867, 10883, 10889, 10891, 10903, 10909, 10937, 10939, 10949, 10957, 10973, 10979, 10987, 10993, 11003, 11027, 11047, 11057, 11059, 11069, 11071, 11083, 11087, 11093, 11113, 11117, 11119, 11131, 11149, 11159, 11161, 11171, 11173, 11177, 11197, 11213, 11239, 11243, 11251, 11257, 11261, 11273, 11279, 11287, 11299, 11311, 11317, 11321, 11329, 11351, 11353, 11369, 11383, 11393, 11399, 11411, 11423, 11437, 11443, 11447, 11467, 11471, 11483, 11489, 11491, 11497, 11503, 11519, 11527, 11549, 11551, 11579, 11587, 11593, 11597, 11617, 11621, 11633, 11657, 11677, 11681, 11689, 11699, 11701, 11717, 11719, 11731, 11743, 11777, 11779, 11783, 11789, 11801, 11807, 11813, 11821, 11827, 11831, 11833, 11839, 11863, 11867, 11887, 11897, 11903, 11909, 11923, 11927, 11933, 11939, 11941, 11953, 11959, 11969, 11971, 11981, 11987, 12007, 12011, 12037, 12041, 12043, 12049, 12071, 12073, 12097, 12101, 12107, 12109, 12113, 12119, 12143, 12149, 12157, 12161, 12163, 12197, 12203, 12211, 12227, 12239, 12241, 12251, 12253, 12263, 12269, 12277, 12281, 12289, 12301, 12323, 12329, 12343, 12347, 12373, 12377, 12379, 12391, 12401, 12409, 12413, 12421, 12433, 12437, 12451, 12457, 12473, 12479, 12487, 12491, 12497, 12503, 12511, 12517, 12527, 12539, 12541, 12547, 12553, 12569, 12577, 12583, 12589, 12601, 12611, 12613, 12619, 12637, 12641, 12647, 12653, 12659, 12671, 12689, 12697, 12703, 12713, 12721, 12739, 12743, 12757, 12763, 12781, 12791, 12799, 12809, 12821, 12823, 12829, 12841, 12853, 12889, 12893, 12899, 12907, 12911, 12917, 12919, 12923, 12941, 12953, 12959, 12967, 12973, 12979, 12983, 13001, 13003, 13007, 13009, 13033, 13037, 13043, 13049, 13063, 13093, 13099, 13103, 13109, 13121, 13127, 13147, 13151, 13159, 13163, 13171, 13177, 13183, 13187, 13217, 13219, 13229, 13241, 13249, 13259, 13267, 13291, 13297, 13309, 13313, 13327, 13331, 13337, 13339, 13367, 13381, 13397, 13399, 13411, 13417, 13421, 13441, 13451, 13457, 13463, 13469, 13477, 13487, 13499, 13513, 13523, 13537, 13553, 13567, 13577, 13591}
;
		data = p.primeList(1607);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test3() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519};
		data = p.primeList(729);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test4() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597};
		data = p.primeList(1292);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}
}",Buggy
"//105,102,357 prime numbers exist between 1 to Integer.MAX_VALUE. Also, the Integer.MAX_VALUE is a prime number. 
    public class PrimeNumbers
    {
        /*@ private normal_behavior  
	  @    requires 2 <= n;
          @    requires 2 <= d;
	  @    ensures \result ==> n%d == 0; 
          @    pure function @*/
        private /*@ spec_public @*/ static boolean div(int n, int d) { return n%d == 0; }

        private /*@ spec_public nullable @*/ int primeArray[];
        /*@ requires 0 < n && n <= 105102357;
          @ assignable primeArray;
	  @ ensures \forall int i; 0 <= i && i < primeArray.length; \forall int j; 2 <= j && j <= primeArray[i]/2; !div(primeArray[i],j);
	  @ ensures (\forall int i,j; 0 <= i && i < primeArray.length && 0 <= j && j < primeArray.length && i != j; primeArray[i] != primeArray[j]);
	  @ ensures \forall int i; 0 <= i && i < primeArray.length; \forall int j; 0 <= j && j < primeArray.length && i != j; primeArray[i] != primeArray[j]; 
	  @ ensures primeArray.length == n; @*/
        public int[] primeList(int n)
        {
          int status = 1, num = 3, count, j;
          primeArray = new int[n];
          primeArray[0] = 2;

          /*@ ghost int maxnumber = Integer.MAX_VALUE;
	    @ ghost int count_counter = 2;
	    @ maintaining (\forall int i; 0 <= i && i < count-1; (\forall int k;  2 <= k && k <= primeArray[i]/2; !div(primeArray[i],k)));
	    @ maintaining (\forall int i; 0 <= i && i < count-1; \forall int k; 0 <= k && k < count-1 && i != k;  primeArray[i] != primeArray[k]);
	    @ maintaining (\forall int i; 0 <= i && i < count-1; primeArray[i] < num);
            @ maintaining 2 <= count && count <= n + 1 && 3 <= num;
	    @ maintaining count_counter == count;
	    @ loop_invariant status == 1;
            @ decreases maxnumber - num; @*/
          for (count = 2; count <= n;)
          { 
             //@ maintaining j > 1 && j <= num/2 + 1;
	     //@ maintaining (\forall int k; 0 <= k && k < count - 1; num != primeArray[k]);
	     //@ maintaining (\forall int k; 2 <= k && k < j; !div(num,k));
             //@ decreases num - j;
             for (j = 2; j < num/2; j++)//for (j = 2; j <= num/2; j++)
             { 
                if (div(num,j))
                {
                   status = 0;
                   break;
                }
             }

             if (status != 0)
             {  
                primeArray[count - 1] = num;
                count++;
		//@ set count_counter = count_counter + 1;
             }
             status = 1;
	     //@ assume num < Integer.MAX_VALUE;
             num++;
          } 
	return primeArray; 
       }
    }",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JUnitPrimeNumbers {

	@Test
	public void test() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669};
		data = p.primeList(747);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);		
	}

	@Test
	public void test1() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447};
		data = p.primeList(229);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test2() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597, 10601, 10607, 10613, 10627, 10631, 10639, 10651, 10657, 10663, 10667, 10687, 10691, 10709, 10711, 10723, 10729, 10733, 10739, 10753, 10771, 10781, 10789, 10799, 10831, 10837, 10847, 10853, 10859, 10861, 10867, 10883, 10889, 10891, 10903, 10909, 10937, 10939, 10949, 10957, 10973, 10979, 10987, 10993, 11003, 11027, 11047, 11057, 11059, 11069, 11071, 11083, 11087, 11093, 11113, 11117, 11119, 11131, 11149, 11159, 11161, 11171, 11173, 11177, 11197, 11213, 11239, 11243, 11251, 11257, 11261, 11273, 11279, 11287, 11299, 11311, 11317, 11321, 11329, 11351, 11353, 11369, 11383, 11393, 11399, 11411, 11423, 11437, 11443, 11447, 11467, 11471, 11483, 11489, 11491, 11497, 11503, 11519, 11527, 11549, 11551, 11579, 11587, 11593, 11597, 11617, 11621, 11633, 11657, 11677, 11681, 11689, 11699, 11701, 11717, 11719, 11731, 11743, 11777, 11779, 11783, 11789, 11801, 11807, 11813, 11821, 11827, 11831, 11833, 11839, 11863, 11867, 11887, 11897, 11903, 11909, 11923, 11927, 11933, 11939, 11941, 11953, 11959, 11969, 11971, 11981, 11987, 12007, 12011, 12037, 12041, 12043, 12049, 12071, 12073, 12097, 12101, 12107, 12109, 12113, 12119, 12143, 12149, 12157, 12161, 12163, 12197, 12203, 12211, 12227, 12239, 12241, 12251, 12253, 12263, 12269, 12277, 12281, 12289, 12301, 12323, 12329, 12343, 12347, 12373, 12377, 12379, 12391, 12401, 12409, 12413, 12421, 12433, 12437, 12451, 12457, 12473, 12479, 12487, 12491, 12497, 12503, 12511, 12517, 12527, 12539, 12541, 12547, 12553, 12569, 12577, 12583, 12589, 12601, 12611, 12613, 12619, 12637, 12641, 12647, 12653, 12659, 12671, 12689, 12697, 12703, 12713, 12721, 12739, 12743, 12757, 12763, 12781, 12791, 12799, 12809, 12821, 12823, 12829, 12841, 12853, 12889, 12893, 12899, 12907, 12911, 12917, 12919, 12923, 12941, 12953, 12959, 12967, 12973, 12979, 12983, 13001, 13003, 13007, 13009, 13033, 13037, 13043, 13049, 13063, 13093, 13099, 13103, 13109, 13121, 13127, 13147, 13151, 13159, 13163, 13171, 13177, 13183, 13187, 13217, 13219, 13229, 13241, 13249, 13259, 13267, 13291, 13297, 13309, 13313, 13327, 13331, 13337, 13339, 13367, 13381, 13397, 13399, 13411, 13417, 13421, 13441, 13451, 13457, 13463, 13469, 13477, 13487, 13499, 13513, 13523, 13537, 13553, 13567, 13577, 13591}
;
		data = p.primeList(1607);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test3() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519};
		data = p.primeList(729);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test4() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597};
		data = p.primeList(1292);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}
}",Buggy
"//105,102,357 prime numbers exist between 1 to Integer.MAX_VALUE. Also, the Integer.MAX_VALUE is a prime number. 
    public class PrimeNumbers
    {
        /*@ private normal_behavior  
	  @    requires 2 <= n;
          @    requires 2 <= d;
	  @    ensures \result ==> n%d == 0; 
          @    pure function @*/
        private /*@ spec_public @*/ static boolean div(int n, int d) { return n%d == 0; }

        private /*@ spec_public nullable @*/ int primeArray[];
        /*@ requires 0 < n && n <= 105102357;
          @ assignable primeArray;
	  @ ensures \forall int i; 0 <= i && i < primeArray.length; \forall int j; 2 <= j && j <= primeArray[i]/2; !div(primeArray[i],j);
	  @ ensures (\forall int i,j; 0 <= i && i < primeArray.length && 0 <= j && j < primeArray.length && i != j; primeArray[i] != primeArray[j]);
	  @ ensures \forall int i; 0 <= i && i < primeArray.length; \forall int j; 0 <= j && j < primeArray.length && i != j; primeArray[i] != primeArray[j]; 
	  @ ensures primeArray.length == n; @*/
        public int[] primeList(int n)
        {
          int status = 1, num = 3, count, j;
          primeArray = new int[n];
          primeArray[0] = 2;

          /*@ ghost int maxnumber = Integer.MAX_VALUE;
	    @ ghost int count_counter = 2;
	    @ maintaining (\forall int i; 0 <= i && i < count-1; (\forall int k;  2 <= k && k <= primeArray[i]/2; !div(primeArray[i],k)));
	    @ maintaining (\forall int i; 0 <= i && i < count-1; \forall int k; 0 <= k && k < count-1 && i != k;  primeArray[i] != primeArray[k]);
	    @ maintaining (\forall int i; 0 <= i && i < count-1; primeArray[i] < num);
            @ maintaining 2 <= count && count <= n + 1 && 3 <= num;
	    @ maintaining count_counter == count;
	    @ loop_invariant status == 1;
            @ decreases maxnumber - num; @*/
          for (count = 2; count <= n;)
          { 
             //@ maintaining j > 1 && j <= num/2 + 1;
	     //@ maintaining (\forall int k; 0 <= k && k < count - 1; num != primeArray[k]);
	     //@ maintaining (\forall int k; 2 <= k && k < j; !div(num,k));
             //@ decreases num - j;
             for (j = 2; j <= num/2; j--)//for (j = 2; j <= num/2; j++)
             { 
                if (div(num,j))
                {
                   status = 0;
                   break;
                }
             }

             if (status != 0)
             {  
                primeArray[count - 1] = num;
                count++;
		//@ set count_counter = count_counter + 1;
             }
             status = 1;
	     //@ assume num < Integer.MAX_VALUE;
             num++;
          } 
	return primeArray; 
       }
    }",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JUnitPrimeNumbers {

	@Test
	public void test() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669};
		data = p.primeList(747);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);		
	}

	@Test
	public void test1() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447};
		data = p.primeList(229);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test2() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597, 10601, 10607, 10613, 10627, 10631, 10639, 10651, 10657, 10663, 10667, 10687, 10691, 10709, 10711, 10723, 10729, 10733, 10739, 10753, 10771, 10781, 10789, 10799, 10831, 10837, 10847, 10853, 10859, 10861, 10867, 10883, 10889, 10891, 10903, 10909, 10937, 10939, 10949, 10957, 10973, 10979, 10987, 10993, 11003, 11027, 11047, 11057, 11059, 11069, 11071, 11083, 11087, 11093, 11113, 11117, 11119, 11131, 11149, 11159, 11161, 11171, 11173, 11177, 11197, 11213, 11239, 11243, 11251, 11257, 11261, 11273, 11279, 11287, 11299, 11311, 11317, 11321, 11329, 11351, 11353, 11369, 11383, 11393, 11399, 11411, 11423, 11437, 11443, 11447, 11467, 11471, 11483, 11489, 11491, 11497, 11503, 11519, 11527, 11549, 11551, 11579, 11587, 11593, 11597, 11617, 11621, 11633, 11657, 11677, 11681, 11689, 11699, 11701, 11717, 11719, 11731, 11743, 11777, 11779, 11783, 11789, 11801, 11807, 11813, 11821, 11827, 11831, 11833, 11839, 11863, 11867, 11887, 11897, 11903, 11909, 11923, 11927, 11933, 11939, 11941, 11953, 11959, 11969, 11971, 11981, 11987, 12007, 12011, 12037, 12041, 12043, 12049, 12071, 12073, 12097, 12101, 12107, 12109, 12113, 12119, 12143, 12149, 12157, 12161, 12163, 12197, 12203, 12211, 12227, 12239, 12241, 12251, 12253, 12263, 12269, 12277, 12281, 12289, 12301, 12323, 12329, 12343, 12347, 12373, 12377, 12379, 12391, 12401, 12409, 12413, 12421, 12433, 12437, 12451, 12457, 12473, 12479, 12487, 12491, 12497, 12503, 12511, 12517, 12527, 12539, 12541, 12547, 12553, 12569, 12577, 12583, 12589, 12601, 12611, 12613, 12619, 12637, 12641, 12647, 12653, 12659, 12671, 12689, 12697, 12703, 12713, 12721, 12739, 12743, 12757, 12763, 12781, 12791, 12799, 12809, 12821, 12823, 12829, 12841, 12853, 12889, 12893, 12899, 12907, 12911, 12917, 12919, 12923, 12941, 12953, 12959, 12967, 12973, 12979, 12983, 13001, 13003, 13007, 13009, 13033, 13037, 13043, 13049, 13063, 13093, 13099, 13103, 13109, 13121, 13127, 13147, 13151, 13159, 13163, 13171, 13177, 13183, 13187, 13217, 13219, 13229, 13241, 13249, 13259, 13267, 13291, 13297, 13309, 13313, 13327, 13331, 13337, 13339, 13367, 13381, 13397, 13399, 13411, 13417, 13421, 13441, 13451, 13457, 13463, 13469, 13477, 13487, 13499, 13513, 13523, 13537, 13553, 13567, 13577, 13591}
;
		data = p.primeList(1607);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test3() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519};
		data = p.primeList(729);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test4() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597};
		data = p.primeList(1292);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}
}",Buggy
"//105,102,357 prime numbers exist between 1 to Integer.MAX_VALUE. Also, the Integer.MAX_VALUE is a prime number.   
    public class PrimeNumbers
    {
        /*@ private normal_behavior  
	  @    requires 2 <= n;
          @    requires 2 <= d;
	  @    ensures \result ==> n%d == 0; 
          @    pure function @*/
        private /*@ spec_public @*/ static boolean div(int n, int d) { return n%d == 0; }

        private /*@ spec_public nullable @*/ int primeArray[];
        /*@ requires 0 < n && n <= 105102357;
          @ assignable primeArray;
	  @ ensures \forall int i; 0 <= i && i < primeArray.length; \forall int j; 2 <= j && j <= primeArray[i]/2; !div(primeArray[i],j);
	  @ ensures (\forall int i,j; 0 <= i && i < primeArray.length && 0 <= j && j < primeArray.length && i != j; primeArray[i] != primeArray[j]);
	  @ ensures \forall int i; 0 <= i && i < primeArray.length; \forall int j; 0 <= j && j < primeArray.length && i != j; primeArray[i] != primeArray[j]; 
	  @ ensures primeArray.length == n; @*/
        public int[] primeList(int n)
       {
          int status = 1, num = 3, count, j;
          primeArray = new int[n];
          primeArray[0] = 2;

          /*@ ghost int maxnumber = Integer.MAX_VALUE;
	    @ ghost int count_counter = 2;
	    @ maintaining (\forall int i; 0 <= i && i < count-1; (\forall int k;  2 <= k && k <= primeArray[i]/2; !div(primeArray[i],k)));
	    @ maintaining (\forall int i; 0 <= i && i < count-1; \forall int k; 0 <= k && k < count-1 && i != k;  primeArray[i] != primeArray[k]);
	    @ maintaining (\forall int i; 0 <= i && i < count-1; primeArray[i] < num);
            @ maintaining 2 <= count && count <= n + 1 && 3 <= num;
	    @ maintaining count_counter == count;
	    @ loop_invariant status == 1;
            @ decreases maxnumber - num; @*/
          for (count = 2; count <= n;)
          { 
             //@ maintaining j > 1 && j <= num/2 + 1;
	     //@ maintaining (\forall int k; 0 <= k && k < count - 1; num != primeArray[k]);
	     //@ maintaining (\forall int k; 2 <= k && k < j; !div(num,k));
             //@ decreases num - j;
             for (j = 2; j <= num*2; j++) //for (j = 2; j <= num/2; j++)
             { 
                if (div(num,j))
                {
                   status = 0;
                   break;
                }
             }

             if (status != 0)
             {  
                primeArray[count - 1] = num;
                count++;
		//@ set count_counter = count_counter + 1;
             }
             status = 1;
	     //@ assume num < Integer.MAX_VALUE;
             num++;
          } 
	return primeArray; 
       }
    }",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JUnitPrimeNumbers {

	@Test
	public void test() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669};
		data = p.primeList(747);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);		
	}

	@Test
	public void test1() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447};
		data = p.primeList(229);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test2() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597, 10601, 10607, 10613, 10627, 10631, 10639, 10651, 10657, 10663, 10667, 10687, 10691, 10709, 10711, 10723, 10729, 10733, 10739, 10753, 10771, 10781, 10789, 10799, 10831, 10837, 10847, 10853, 10859, 10861, 10867, 10883, 10889, 10891, 10903, 10909, 10937, 10939, 10949, 10957, 10973, 10979, 10987, 10993, 11003, 11027, 11047, 11057, 11059, 11069, 11071, 11083, 11087, 11093, 11113, 11117, 11119, 11131, 11149, 11159, 11161, 11171, 11173, 11177, 11197, 11213, 11239, 11243, 11251, 11257, 11261, 11273, 11279, 11287, 11299, 11311, 11317, 11321, 11329, 11351, 11353, 11369, 11383, 11393, 11399, 11411, 11423, 11437, 11443, 11447, 11467, 11471, 11483, 11489, 11491, 11497, 11503, 11519, 11527, 11549, 11551, 11579, 11587, 11593, 11597, 11617, 11621, 11633, 11657, 11677, 11681, 11689, 11699, 11701, 11717, 11719, 11731, 11743, 11777, 11779, 11783, 11789, 11801, 11807, 11813, 11821, 11827, 11831, 11833, 11839, 11863, 11867, 11887, 11897, 11903, 11909, 11923, 11927, 11933, 11939, 11941, 11953, 11959, 11969, 11971, 11981, 11987, 12007, 12011, 12037, 12041, 12043, 12049, 12071, 12073, 12097, 12101, 12107, 12109, 12113, 12119, 12143, 12149, 12157, 12161, 12163, 12197, 12203, 12211, 12227, 12239, 12241, 12251, 12253, 12263, 12269, 12277, 12281, 12289, 12301, 12323, 12329, 12343, 12347, 12373, 12377, 12379, 12391, 12401, 12409, 12413, 12421, 12433, 12437, 12451, 12457, 12473, 12479, 12487, 12491, 12497, 12503, 12511, 12517, 12527, 12539, 12541, 12547, 12553, 12569, 12577, 12583, 12589, 12601, 12611, 12613, 12619, 12637, 12641, 12647, 12653, 12659, 12671, 12689, 12697, 12703, 12713, 12721, 12739, 12743, 12757, 12763, 12781, 12791, 12799, 12809, 12821, 12823, 12829, 12841, 12853, 12889, 12893, 12899, 12907, 12911, 12917, 12919, 12923, 12941, 12953, 12959, 12967, 12973, 12979, 12983, 13001, 13003, 13007, 13009, 13033, 13037, 13043, 13049, 13063, 13093, 13099, 13103, 13109, 13121, 13127, 13147, 13151, 13159, 13163, 13171, 13177, 13183, 13187, 13217, 13219, 13229, 13241, 13249, 13259, 13267, 13291, 13297, 13309, 13313, 13327, 13331, 13337, 13339, 13367, 13381, 13397, 13399, 13411, 13417, 13421, 13441, 13451, 13457, 13463, 13469, 13477, 13487, 13499, 13513, 13523, 13537, 13553, 13567, 13577, 13591}
;
		data = p.primeList(1607);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test3() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519};
		data = p.primeList(729);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test4() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597};
		data = p.primeList(1292);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}
}",Buggy
"//105,102,357 prime numbers exist between 1 to Integer.MAX_VALUE. Also, the Integer.MAX_VALUE is a prime number. 
    public class PrimeNumbers
    {
        /*@ private normal_behavior  
	  @    requires 2 <= n;
          @    requires 2 <= d;
	  @    ensures \result ==> n%d == 0; 
          @    pure function @*/
        private /*@ spec_public @*/ static boolean div(int n, int d) { return n%d == 0; }

        private /*@ spec_public nullable @*/ int primeArray[];
        /*@ requires 0 < n && n <= 105102357;
          @ assignable primeArray;
	  @ ensures \forall int i; 0 <= i && i < primeArray.length; \forall int j; 2 <= j && j <= primeArray[i]/2; !div(primeArray[i],j);
	  @ ensures (\forall int i,j; 0 <= i && i < primeArray.length && 0 <= j && j < primeArray.length && i != j; primeArray[i] != primeArray[j]);
	  @ ensures \forall int i; 0 <= i && i < primeArray.length; \forall int j; 0 <= j && j < primeArray.length && i != j; primeArray[i] != primeArray[j]; 
	  @ ensures primeArray.length == n; @*/
        public int[] primeList(int n)
        {
          int status = 1, num = 3, count, j;
          primeArray = new int[n];
          primeArray[0] = 2;

          /*@ ghost int maxnumber = Integer.MAX_VALUE;
	    @ ghost int count_counter = 2;
	    @ maintaining (\forall int i; 0 <= i && i < count-1; (\forall int k;  2 <= k && k <= primeArray[i]/2; !div(primeArray[i],k)));
	    @ maintaining (\forall int i; 0 <= i && i < count-1; \forall int k; 0 <= k && k < count-1 && i != k;  primeArray[i] != primeArray[k]);
	    @ maintaining (\forall int i; 0 <= i && i < count-1; primeArray[i] < num);
            @ maintaining 2 <= count && count <= n + 1 && 3 <= num;
	    @ maintaining count_counter == count;
	    @ loop_invariant status == 1;
            @ decreases maxnumber - num; @*/
          for (count = 2; count <= n;)
          { 
             //@ maintaining j > 1 && j <= num/2 + 1;
	     //@ maintaining (\forall int k; 0 <= k && k < count - 1; num != primeArray[k]);
	     //@ maintaining (\forall int k; 2 <= k && k < j; !div(num,k));
             //@ decreases num - j;
             for (j = 2; j > num/2; j++)//for (j = 2; j <= num/2; j++)
             { 
                if (div(num,j))
                {
                   status = 0;
                   break;
                }
             }

             if (status != 0)
             {  
                primeArray[count - 1] = num;
                count++;
		//@ set count_counter = count_counter + 1;
             }
             status = 1;
	     //@ assume num < Integer.MAX_VALUE;
             num++;
          } 
	return primeArray; 
       }
    }",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JUnitPrimeNumbers {

	@Test
	public void test() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669};
		data = p.primeList(747);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);		
	}

	@Test
	public void test1() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447};
		data = p.primeList(229);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test2() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597, 10601, 10607, 10613, 10627, 10631, 10639, 10651, 10657, 10663, 10667, 10687, 10691, 10709, 10711, 10723, 10729, 10733, 10739, 10753, 10771, 10781, 10789, 10799, 10831, 10837, 10847, 10853, 10859, 10861, 10867, 10883, 10889, 10891, 10903, 10909, 10937, 10939, 10949, 10957, 10973, 10979, 10987, 10993, 11003, 11027, 11047, 11057, 11059, 11069, 11071, 11083, 11087, 11093, 11113, 11117, 11119, 11131, 11149, 11159, 11161, 11171, 11173, 11177, 11197, 11213, 11239, 11243, 11251, 11257, 11261, 11273, 11279, 11287, 11299, 11311, 11317, 11321, 11329, 11351, 11353, 11369, 11383, 11393, 11399, 11411, 11423, 11437, 11443, 11447, 11467, 11471, 11483, 11489, 11491, 11497, 11503, 11519, 11527, 11549, 11551, 11579, 11587, 11593, 11597, 11617, 11621, 11633, 11657, 11677, 11681, 11689, 11699, 11701, 11717, 11719, 11731, 11743, 11777, 11779, 11783, 11789, 11801, 11807, 11813, 11821, 11827, 11831, 11833, 11839, 11863, 11867, 11887, 11897, 11903, 11909, 11923, 11927, 11933, 11939, 11941, 11953, 11959, 11969, 11971, 11981, 11987, 12007, 12011, 12037, 12041, 12043, 12049, 12071, 12073, 12097, 12101, 12107, 12109, 12113, 12119, 12143, 12149, 12157, 12161, 12163, 12197, 12203, 12211, 12227, 12239, 12241, 12251, 12253, 12263, 12269, 12277, 12281, 12289, 12301, 12323, 12329, 12343, 12347, 12373, 12377, 12379, 12391, 12401, 12409, 12413, 12421, 12433, 12437, 12451, 12457, 12473, 12479, 12487, 12491, 12497, 12503, 12511, 12517, 12527, 12539, 12541, 12547, 12553, 12569, 12577, 12583, 12589, 12601, 12611, 12613, 12619, 12637, 12641, 12647, 12653, 12659, 12671, 12689, 12697, 12703, 12713, 12721, 12739, 12743, 12757, 12763, 12781, 12791, 12799, 12809, 12821, 12823, 12829, 12841, 12853, 12889, 12893, 12899, 12907, 12911, 12917, 12919, 12923, 12941, 12953, 12959, 12967, 12973, 12979, 12983, 13001, 13003, 13007, 13009, 13033, 13037, 13043, 13049, 13063, 13093, 13099, 13103, 13109, 13121, 13127, 13147, 13151, 13159, 13163, 13171, 13177, 13183, 13187, 13217, 13219, 13229, 13241, 13249, 13259, 13267, 13291, 13297, 13309, 13313, 13327, 13331, 13337, 13339, 13367, 13381, 13397, 13399, 13411, 13417, 13421, 13441, 13451, 13457, 13463, 13469, 13477, 13487, 13499, 13513, 13523, 13537, 13553, 13567, 13577, 13591}
;
		data = p.primeList(1607);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test3() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519};
		data = p.primeList(729);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}

	@Test
	public void test4() {
		PrimeNumbers p = new PrimeNumbers();
		int[] data;
		int[] data1 = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597};
		data = p.primeList(1292);
		int length_data = data.length;
		for (int i = 0; i < length_data; i++)
			assertEquals(data[i], data1[i]);
	}
}",Buggy
"//105,102,357 prime numbers exist between 1 to Integer.MAX_VALUE. Also, the Integer.MAX_VALUE is a prime number. 
    public class PrimeNumbers
    {
        /*@ private normal_behavior  
	  @    requires 2 <= n;
          @    requires 2 <= d;
	  @    ensures \result ==> n%d == 0; 
          @    pure function @*/
        private /*@ spec_public @*/ static boolean div(int n, int d) { return n%d == 0; }

        private /*@ spec_public nullable @*/ int primeArray[];
        /*@ requires 0 < n && n <= 105102357;
          @ assignable primeArray;
	  @ ensures \forall int i; 0 <= i && i < primeArray.length; \forall int j; 2 <= j && j <= primeArray[i]/2; !div(primeArray[i],j);
	  @ ensures (\forall int i,j; 0 <= i && i < primeArray.length && 0 <= j && j < primeArray.length && i != j; primeArray[i] != primeArray[j]);
	  @ ensures \forall int i; 0 <= i && i < primeArray.length; \forall int j; 0 <= j && j < primeArray.length && i != j; primeArray[i] != primeArray[j]; 
	  @ ensures primeArray.length == n; @*/
        public int[] primeList(int n)
        {
          int status = 1, num = 3, count, j;
          primeArray = new int[n];
          primeArray[0] = 2;

          /*@ ghost int maxnumber = Integer.MAX_VALUE;
	    @ ghost int count_counter = 2;
	    @ maintaining (\forall int i; 0 <= i && i < count-1; (\forall int k;  2 <= k && k <= primeArray[i]/2; !div(primeArray[i],k)));
	    @ maintaining (\forall int i; 0 <= i && i < count-1; \forall int k; 0 <= k && k < count-1 && i != k;  primeArray[i] != primeArray[k]);
	    @ maintaining (\forall int i; 0 <= i && i < count-1; primeArray[i] < num);
            @ maintaining 2 <= count && count <= n + 1 && 3 <= num;
	    @ maintaining count_counter == count;
	    @ loop_invariant status == 1;
            @ decreases maxnumber - num; @*/
          for (count = 2; count <= n;)
          {  
             //@ maintaining j > 1 && j <= num/2 + 1;
	     //@ maintaining (\forall int k; 0 <= k && k < count - 1; num != primeArray[k]);
	     //@ maintaining (\forall int k; 2 <= k && k < j; !div(num,k));
             //@ decreases num - j;
             for (j = 2; j <= num/2; j++)
             { 
                if (!div(num,j))//if (div(num,j))
                {
                   status = 0;
                   break;
                }
             }

             if (status != 0)
             {  
                primeArray[count - 1] = num; 
                count++;
		//@ set count_counter = count_counter + 1;
             }
             status = 1;
	     //@ assume num < Integer.MAX_VALUE;
             num++;
          } 
	return primeArray; 
       }
    }",Buggy
"public class Smallest {
    //@ ensures \result == -1 <==> a.length == 0;
    //@ ensures -1 < \result ==> (\forall int i; 0 <= i && i < a.length; a[\result] <= a[i]);
    static public int Smallest(int[] a) {
        if (a.length != 0) return -1;//if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;
        //@ maintaining 0 <= index && index <= a.length;
        //@ maintaining 0 <= smallest && smallest < a.length;
        //@ maintaining (\forall int i; 0 <= i && i < index; a[smallest] <= a[i]);
        //@ decreases a.length - index;
        while (a.length - index > 0) {
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        return smallest;
    }
}",Buggy
"public class Smallest {
    //@ ensures \result == -1 <==> a.length == 0;
    //@ ensures -1 < \result ==> (\forall int i; 0 <= i && i < a.length; a[\result] <= a[i]);
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;
        //@ maintaining 0 <= index && index <= a.length;
        //@ maintaining 0 <= smallest && smallest < a.length;
        //@ maintaining (\forall int i; 0 <= i && i < index; a[smallest] <= a[i]);
        //@ decreases a.length - index;
        while (a.length - index >= 0) {//while (a.length - index > 0) {
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        return smallest;
    }
}",Buggy
"public class Smallest {
    //@ ensures \result == -1 <==> a.length == 0;
    //@ ensures -1 < \result ==> (\forall int i; 0 <= i && i < a.length; a[\result] <= a[i]);
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;
        //@ maintaining 0 <= index && index <= a.length;
        //@ maintaining 0 <= smallest && smallest < a.length;
        //@ maintaining (\forall int i; 0 <= i && i < index; a[smallest] <= a[i]);
        //@ decreases a.length - index;
        while (a.length + index > 0) {//while (a.length - index > 0) {
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        return smallest;
    }
}",Buggy
"public class Smallest {
    //@ ensures \result == -1 <==> a.length == 0;
    //@ ensures -1 < \result ==> (\forall int i; 0 <= i && i < a.length; a[\result] <= a[i]);
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;
        //@ maintaining 0 <= index && index <= a.length;
        //@ maintaining 0 <= smallest && smallest < a.length;
        //@ maintaining (\forall int i; 0 <= i && i < index; a[smallest] <= a[i]);
        //@ decreases a.length - index;
        while (a.length - index <= 0) {//while (a.length - index > 0) {
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        return smallest;
    }
}",Buggy
"public class Smallest {
    //@ ensures \result == -1 <==> a.length == 0;
    //@ ensures -1 < \result ==> (\forall int i; 0 <= i && i < a.length; a[\result] <= a[i]);
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;
        //@ maintaining 0 <= index && index <= a.length;
        //@ maintaining 0 <= smallest && smallest < a.length;
        //@ maintaining (\forall int i; 0 <= i && i < index; a[smallest] <= a[i]);
        //@ decreases a.length - index;
        while (a.length - index > 0) {
            if (a[index] >= a[smallest]) {//if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        return smallest;
    }
}",Buggy
"public class Smallest {
    //@ ensures \result == -1 <==> a.length == 0;
    //@ ensures -1 < \result ==> (\forall int i; 0 <= i && i < a.length; a[\result] <= a[i]);
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;
        //@ maintaining 0 <= index && index <= a.length;
        //@ maintaining 0 <= smallest && smallest < a.length;
        //@ maintaining (\forall int i; 0 <= i && i < index; a[smallest] <= a[i]);
        //@ decreases a.length - index;
        while (a.length - index > 0) {
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index - 1;//index = index + 1;
        }
        return smallest;
    }
}",Buggy
"public class Smallest {
    //@ ensures \result == -1 <==> a.length == 0;
    //@ ensures -1 < \result ==> (\forall int i; 0 <= i && i < a.length; a[\result] <= a[i]);
    static public int Smallest(int[] a) {
        if (a.length == 0) return -1;

        int index = 0;
        int smallest = 0;
        //@ maintaining 0 <= index && index <= a.length;
        //@ maintaining 0 <= smallest && smallest < a.length;
        //@ maintaining (\forall int i; 0 <= i && i < index; a[smallest] <= a[i]);
        //@ decreases a.length - index;
        while (a.length - index > 0) {
            if (a[index] < a[smallest]) {
                smallest = index;
            }
            index = index + 1;
        }
        return (smallest == 0 ? 1 : 0);//smallest;
    }
}",Buggy
"public class StrPalindrome {
   private /*@ spec_public @*/ String reverse = """";
   /*@ public normal_behavior
     @    requires (\forall int i; 0 <= i && i < str.length(); (int)Character.MIN_VALUE <= (int)str.charAt(i) && (int)str.charAt(i) <= (int)Character.MAX_VALUE);
     @    assignable reverse;
     @    ensures \result <==> reverse.equals(str); @*/
   public boolean isPalindrome(String str) {
      
      int length = str.length();
	
      //@ ghost int i_counter;
      //@ set i_counter = 0;
      //@ maintaining -1 <= i && i < str.length(); 
      //@ decreases i;
      //@ maintaining i_counter + i + 1 == length;
      for (int i = length - 1; 0 < i; i--) { // for (int i = length - 1; 0 <= i; i--) {
         reverse = reverse + str.charAt(i);
	 //@ set i_counter = i_counter + 1;
       }
      //@ assert i_counter == length;   
      return reverse.equals(str);
   }
}",Buggy
"public class StrPalindrome { 
   private /*@ spec_public @*/ String reverse = """";
   /*@ public normal_behavior
     @    requires (\forall int i; 0 <= i && i < str.length(); (int)Character.MIN_VALUE <= (int)str.charAt(i) && (int)str.charAt(i) <= (int)Character.MAX_VALUE);
     @    assignable reverse;
     @    ensures \result <==> reverse.equals(str); @*/
   public boolean isPalindrome(String str) {
      
      int length = str.length();
	
      //@ ghost int i_counter;
      //@ set i_counter = 0;
      //@ maintaining -1 <= i && i < str.length(); 
      //@ decreases i;
      //@ maintaining i_counter + i + 1 == length;
      for (int i = length - 1; 0 <= i; i++) { // for (int i = length - 1; 0 <= i; i--) {
         reverse = reverse + str.charAt(i);
	 //@ set i_counter = i_counter + 1;
       }
      //@ assert i_counter == length; 
      return reverse.equals(str);
   }
}",Buggy
"public class StrPalindrome {
   private /*@ spec_public @*/ String reverse = """";
   /*@ public normal_behavior
     @    requires (\forall int i; 0 <= i && i < str.length(); (int)Character.MIN_VALUE <= (int)str.charAt(i) && (int)str.charAt(i) <= (int)Character.MAX_VALUE);
     @    assignable reverse;
     @    ensures \result <==> reverse.equals(str); @*/
   public boolean isPalindrome(String str) {
      
      int length = str.length();
	
      //@ ghost int i_counter;
      //@ set i_counter = 0;
      //@ maintaining -1 <= i && i < str.length(); 
      //@ decreases i;
      //@ maintaining i_counter + i + 1 == length;
      for (int i = length + 1; 0 <= i; i--) { // for (int i = length - 1; 0 <= i; i--) {
         reverse = reverse + str.charAt(i);
	 //@ set i_counter = i_counter + 1;
       }
      //@ assert i_counter == length;   
      return reverse.equals(str);
   }
}",Buggy
"public class StrPalindrome {
   private /*@ spec_public @*/ String reverse = """";
   /*@ public normal_behavior
     @    requires (\forall int i; 0 <= i && i < str.length(); (int)Character.MIN_VALUE <= (int)str.charAt(i) && (int)str.charAt(i) <= (int)Character.MAX_VALUE);
     @    assignable reverse;
     @    ensures \result <==> reverse.equals(str); @*/
   public boolean isPalindrome(String str) {
      
      int length = str.length();
	
      //@ ghost int i_counter;
      //@ set i_counter = 0;
      //@ maintaining -1 <= i && i < str.length(); 
      //@ decreases i;
      //@ maintaining i_counter + i + 1 == length;
      for (int i = length - 1; 0 > i; i--) { // for (int i = length - 1; 0 <= i; i--) {
         reverse = reverse + str.charAt(i);
	 //@ set i_counter = i_counter + 1;
       }
      //@ assert i_counter == length;   
      return reverse.equals(str);
   }
}",Buggy
"public class StrPalindrome {
   private /*@ spec_public @*/ String reverse = """";
   /*@ public normal_behavior
     @    requires (\forall int i; 0 <= i && i < str.length(); (int)Character.MIN_VALUE <= (int)str.charAt(i) && (int)str.charAt(i) <= (int)Character.MAX_VALUE);
     @    assignable reverse;
     @    ensures \result <==> reverse.equals(str); @*/
   public boolean isPalindrome(String str) {
      
      int length = str.length();
	
      //@ ghost int i_counter;
      //@ set i_counter = 0;
      //@ maintaining -1 <= i && i < str.length(); 
      //@ decreases i;
      //@ maintaining i_counter + i + 1 == length;
      for (int i = length - 1; 0 <= i; i--) {
         reverse = reverse + str.charAt(i);
	 //@ set i_counter = i_counter + 1;
       }
      //@ assert i_counter == length;   
      return !reverse.equals(str); // return reverse.equals(str);
   }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits > maxSemesterCredits) { // if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return (this.tuitionBalance == 0) ? 1 : 0; // return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return (this.enrollmentCredits == 0) ? 1 : 0; //return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return (this.passedCredits == 0) ? 1 : 0; //return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return !this.lateRegistration; // return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        if ( this.firstName != null)  //return this.firstName;
		return null;
	else
		 throw new IllegalArgumentException();
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        if (this.lastName != null) //return this.lastName;
		return null;
	else
		throw new IllegalArgumentException();
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance < 0); // return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return !(this.tuitionBalance <= 0); // return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 <= payment); // return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.runner.JUnitCore;
import org.junit.runner.Result;
import org.junit.runner.notification.Failure;

public class TestRunner {
   public static void main(String[] args) {
      Result result = JUnitCore.runClasses(JUnitStudentEnrollment.class);
		
      for (Failure failure : result.getFailures()) {
         System.out.println(failure.toString());
      }
		
      System.out.println(result.wasSuccessful());
   }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance <= tuitionBalance) { //if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.runner.JUnitCore;
import org.junit.runner.Result;
import org.junit.runner.notification.Failure;

public class TestRunner {
   public static void main(String[] args) {
      Result result = JUnitCore.runClasses(JUnitStudentEnrollment.class);
		
      for (Failure failure : result.getFailures()) {
         System.out.println(failure.toString());
      }
		
      System.out.println(result.wasSuccessful());
   }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance >= tuitionBalance) { //if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return !(0 < payment); // return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (!registrationPermission()) { //if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() / costPerCredit; // int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() - cost; // tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (!registrationPermission()) { // if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() / costPerCredit + getEnrollmentCredits() * latePerCredit; //cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() / latePerCredit; // cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit - getEnrollmentCredits() * latePerCredit; // cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() - cost; // tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (!getLateRegistrations()) // if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 < passedCredits && passedCredits <= totalCredits) { //if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations()) {
            //lateEnrollment(); 
        } else {
            regularEnrollment();
	}
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else {
            //regularEnrollment();
	}
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (!validPayment(payment)) { // if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance += payment; // tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment*100)*2; // penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)/2; // penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment += penalty; //payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (!validPayment(payment)) { //if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance += payment; // tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (!debit) { // if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            // payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            // payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        // setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        // setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        // setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	// setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (!option) { // if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (!registrationPermission()) { // if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			// enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		// pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits < totalCredits) { // if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.runner.JUnitCore;
import org.junit.runner.Result;
import org.junit.runner.notification.Failure;

public class TestRunner {
   public static void main(String[] args) {
      Result result = JUnitCore.runClasses(JUnitStudentEnrollment.class);
		
      for (Failure failure : result.getFailures()) {
         System.out.println(failure.toString());
      }
		
      System.out.println(result.wasSuccessful());
   }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 > passedCredits && passedCredits <= totalCredits) { //if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits > totalCredits) { //if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 < enrollmentCredits && enrollmentCredits <= maxSemesterCredits) { //if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 <= enrollmentCredits && enrollmentCredits < maxSemesterCredits) { //if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class JUnitStudentEnrollment {

	@Test
	public void test() {
		int result;
		boolean option = false;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1969385316;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1969384500);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test1() {
		int result;
		boolean option = false;
		int initialBalance = 3367;
		boolean lateRegistration = false;
		int passedCredits = 76;
		int semesterCredits = 7;
		boolean debit = false;	
		int payment = 1764914496;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1729612841);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 76);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test2() {
		int result;
		boolean option = true;
		int initialBalance = 2549;
		boolean lateRegistration = true;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = false;	
		int payment = 1768842089;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2549);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test3() {
		int result;
		boolean option = true;
		int initialBalance = 816;
		boolean lateRegistration = false;
		int passedCredits = 57;
		int semesterCredits = 1;
		boolean debit = true;	
		int payment = 1449291620;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 816);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 57);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}	

	@Test
	public void test4() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test5() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 64;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 4849664;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 64);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test6() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 82;
		int semesterCredits = 8;
		boolean debit = false;	
		int payment = 14614528;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1696);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 82);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test7() {
		int result;
		boolean option = false;
		int initialBalance = 1293;
		boolean lateRegistration = false;
		int passedCredits = 30;
		int semesterCredits = 11;
		boolean debit = true;	
		int payment = 1668245879;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1668244586);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 30);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	
	@Test
	public void test8() {
		int result;
		boolean option = true;
		int initialBalance = 2910;
		boolean lateRegistration = true;
		int passedCredits = 72;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1769414760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2910);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 72);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test9() {
		int result;
		boolean option = false;
		int initialBalance = 3811;
		boolean lateRegistration = false;
		int passedCredits = 25;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 1128027973;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1105463604);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 25);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test10() {
		int result;
		boolean option = true;
		int initialBalance = 1994;
		boolean lateRegistration = false;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = true;	
		int payment = 1668245760;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1994);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test11() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = false;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test12() {
		int result;
		boolean option = false;
		int initialBalance = 1412;
		boolean lateRegistration = true;
		int passedCredits = 38;
		int semesterCredits = 17;
		boolean debit = false;	
		int payment = 1146570752;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1123637926);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 38);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test13() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 50;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 3697151;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 50);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test14() {
		int result;
		boolean option = false;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079773223);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

@Test
	public void test15() {
		int result;
		boolean option = false;
		int initialBalance = 3180;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122219164;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2122215984);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test16() {
		int result;
		boolean option = true;
		int initialBalance = 1529;
		boolean lateRegistration = false;
		int passedCredits = 13;
		int semesterCredits = 0;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1529);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 13);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test17() {
		int result;
		boolean option = false;
		int initialBalance = 1904;
		boolean lateRegistration = false;
		int passedCredits = 71;
		int semesterCredits = 20;
		boolean debit = false;	
		int payment = 2122219134;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -2079772848);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 71);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test18() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2968);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test19() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 0;
		int semesterCredits = 0;
		boolean debit = true;	
		int payment = 2122186978;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 0);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test20() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 0;
		int semesterCredits = 14;
		boolean debit = true;	
		int payment = 226;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2800);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 0);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test21() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test22() {
		int result;
		boolean option = true;
		int initialBalance = 2676;
		boolean lateRegistration = false;
		int passedCredits = 89;
		int semesterCredits = 19;
		boolean debit = false;	
		int payment = 1176633600;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2676);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test23() {
		int result;
		boolean option = false;
		int initialBalance = 1421;
		boolean lateRegistration = true;
		int passedCredits = 89;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 961566539;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -961565118);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 89);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test24() {
		int result;
		boolean option = false;
		int initialBalance = 2354;
		boolean lateRegistration = false;
		int passedCredits = 63;
		int semesterCredits = 10;
		boolean debit = false;	
		int payment = 959467867;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -940276157);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 63);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test25() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2000);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test26() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 98;
		int semesterCredits = 10;
		boolean debit = true;	
		int payment = 544171008;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2120);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 98);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test27() {
		int result;
		boolean option = true;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 67;
		int semesterCredits = 4;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 1141);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 67);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test28() {
		int result;
		boolean option = false;
		int initialBalance = 3475;
		boolean lateRegistration = false;
		int passedCredits = 58;
		int semesterCredits = 5;
		boolean debit = false;	
		int payment = 2013291877;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1973022566);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 58);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test29() {
		int result;
		boolean option = false;
		int initialBalance = 1141;
		boolean lateRegistration = false;
		int passedCredits = 51;
		int semesterCredits = 2;
		boolean debit = true;	
		int payment = 1449488998;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == -1449487857);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 51);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test30() {
		int result;
		boolean option = true;
		int initialBalance = 2264;
		boolean lateRegistration = true;
		int passedCredits = 118;
		int semesterCredits = 7;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 2264);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 118);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test31() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = false;
		int passedCredits = 115;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 6645093;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 600);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 115);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}

	@Test
	public void test32() {
		int result;
		boolean option = true;
		int initialBalance = 0;
		boolean lateRegistration = true;
		int passedCredits = 78;
		int semesterCredits = 3;
		boolean debit = true;	
		int payment = 472327988;

		StudentEnrollment student = new StudentEnrollment(""AnyFirstName"", ""AnyLastName"");
		
		student.enrollmentProcess(passedCredits, semesterCredits, payment, initialBalance, lateRegistration, debit, option);
		assertTrue(""Balance is not correct"", student.getTuition() == 636);	
		assertTrue(""Passed Credits value is not correct"", student.getPassedCredits() == 78);
		assertTrue(""First name is not correct"", student.getFirstName() == ""AnyFirstName"");
		assertTrue(""Last name is not correct"", student.getLastName() == ""AnyLastName"");
	}
}",Buggy
"public class StudentEnrollment {
    public static final int costPerCredit = 200;  
    public static final int totalCredits = 120;
    public static final int maxSemesterCredits = 20;

    /*@ spec_public @*/ private String firstName;
    /*@ spec_public @*/ private String lastName;
    /*@ spec_public @*/ private int passedCredits;  //number of credits which are passed during previous semesters
    /*@ spec_public @*/ private int enrollmentCredits; //number of credits which will get this semester
    //@ public invariant 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
    /*@ spec_public @*/ private int tuitionBalance;
    /*@ public invariant tuitionBalance <= 
                         maxSemesterCredits * costPerCredit 
                         + (maxSemesterCredits * ((costPerCredit/100)*6)); @*/
    /*@ spec_public @*/ private boolean lateRegistration;
	
    /*@ ensures this.firstName.equals(firstName);
      @ ensures this.lastName.equals(lastName);
      @ ensures passedCredits == 0 && enrollmentCredits == 0;
      @ ensures tuitionBalance == 0; @*/
    StudentEnrollment(/*@ non_null @*/ String firstName,
              /*@ non_null @*/ String lastName) 
    {
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /*@     public normal_behavior
      @   	requires tuitionBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @         assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == tuitionBalance; 
      @ also
      @     public exceptional_behavior
      @		requires maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6) < tuitionBalance;
      @ 	assignable \nothing;
      @		signals_only IllegalArgumentException;
      @   	signals(IllegalArgumentException) this.tuitionBalance == \old (this.tuitionBalance); @*/
    public void setTuitionBalance(int tuitionBalance)
    {
	int maxTuitionBalance = maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
	if (maxTuitionBalance < tuitionBalance) {
                throw new IllegalArgumentException();
	} else {
		this.tuitionBalance = tuitionBalance;
	}
    }
	
    /*@      public normal_behavior
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	assignable this.passedCredits;
      @   	ensures this.passedCredits == passedCredits;
      @ also
      @      public exceptional_behavior
      @   	requires passedCredits < 0 || totalCredits < passedCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setPassedCredits(int passedCredits)
    {
        if (0 <= passedCredits && passedCredits <= totalCredits) {
            this.passedCredits = passedCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires 0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits;
      @   	assignable this.enrollmentCredits;
      @   	ensures this.enrollmentCredits == enrollmentCredits;
      @ also
      @      public exceptional_behavior
      @   	requires enrollmentCredits < 0 || maxSemesterCredits < enrollmentCredits;
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void setEnrollmentCredits(int enrollmentCredits)
    {
        if (0 > enrollmentCredits && enrollmentCredits <= maxSemesterCredits) { // if (0 <= enrollmentCredits && enrollmentCredits <= maxSemesterCredits) {
            this.enrollmentCredits = enrollmentCredits;
        } else {
            throw new IllegalArgumentException();
        }
    }

    //@ public normal_behavior
    //@   assignable this.lateRegistration;
    //@   ensures this.lateRegistration == lateRegistration;
    public void setLateRegistration (boolean lateRegistration) 
    {
        this.lateRegistration = lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result == this.tuitionBalance;
    public /*@ pure @*/ int getTuition() 
    {
        return this.tuitionBalance;
    }

    //@ public normal_behavior
    //@   ensures \result == this.enrollmentCredits;
    public /*@ pure @*/ int getEnrollmentCredits() 
    {
        return this.enrollmentCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.passedCredits;
    public /*@ pure @*/ int getPassedCredits() 
    {
        return this.passedCredits;
    }

    //@ public normal_behavior
    //@   ensures \result == this.lateRegistration;
    public /*@ pure @*/ boolean getLateRegistrations() 
    {
        return this.lateRegistration;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.firstName);
    public /*@ pure @*/ String getFirstName()
    {
        return this.firstName;
    }

    //@ public normal_behavior
    //@   ensures \result.equals(this.lastName);
    public /*@ pure @*/ String getLastName()
    {
        return this.lastName;
    } 

    //@ public normal_behavior
    //@   ensures \result <==> (tuitionBalance <= 0);
    public /*@ pure @*/ boolean registrationPermission() 
    {
        return (this.tuitionBalance <= 0);
    }

    //@ public normal_behavior
    //@   ensures \result <==> (0 < payment);
    public /*@ pure @*/ boolean validPayment(int payment)
    {
        return (0 < payment);
    }

    /*@      public normal_behavior
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old(tuitionBalance + enrollmentCredits * costPerCredit);
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void regularEnrollment()
    {
	if (registrationPermission()) {
        	int cost = getEnrollmentCredits() * costPerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance) + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ also
      @      public exceptional_behavior
      @   	requires !registrationPermission();
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    public void lateEnrollment() 
    {
	if (registrationPermission()) {
        	int latePerCredit = (costPerCredit/100)*6;
        	int cost;
        	cost = getEnrollmentCredits() * costPerCredit + getEnrollmentCredits() * latePerCredit;
        	tuitionBalance = getTuition() + cost;
	} else { 
		throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @ 	requires lateRegistration;
      @ 	old int latePerCredit = (costPerCredit/100)*6;
      @ 	requires registrationPermission();
      @ 	requires this.tuitionBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @ 	assignable this.tuitionBalance;
      @ 	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit) + enrollmentCredits * latePerCredit;
      @ also
      @     public normal_behavior
      @   	requires !lateRegistration;
      @   	requires registrationPermission();
      @   	requires this.tuitionBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	assignable this.tuitionBalance;
      @   	ensures this.tuitionBalance == \old (tuitionBalance + enrollmentCredits * costPerCredit); @*/
    public void enroll() 
    {
        if (getLateRegistrations())
            lateEnrollment(); 
        else 
            regularEnrollment();
    }

    /*@      public normal_behavior
      @   	requires validPayment(payment);
      @  	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - payment);
      @ also
      @      public exceptional_behavior
      @   	requires !validPayment(payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithDebitCard(int payment) 
    {
        if (validPayment(payment)) {
            tuitionBalance -= payment;
        } else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable tuitionBalance;
      @   	ensures tuitionBalance == \old(tuitionBalance - _payment);
      @ also
      @      public exceptional_behavior
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires !validPayment(_payment);
      @   	assignable \nothing;
      @   	signals_only IllegalArgumentException; @*/
    private /*@ spec_public @*/ void payTuitionWithCreditCard(int payment) 
    {
        int penalty;
        penalty = (payment/100)*2;
        payment -= penalty;
        if (validPayment(payment)) {
            tuitionBalance -= payment;
	} else {
            throw new IllegalArgumentException();
        }
    }

    /*@      public normal_behavior
      @   	requires debit;
      @   	requires validPayment(payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - payment);
      @ also
      @      public normal_behavior
      @   	requires !debit;
      @   	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires validPayment(_payment);
      @   	requires Integer.MIN_VALUE <= tuitionBalance - _payment;
      @   	assignable this.tuitionBalance;
      @   	ensures tuitionBalance == \old (tuitionBalance - _payment); @*/
    public void pay(int payment, boolean debit) 
    {
        if (debit) {
            payTuitionWithDebitCard(payment);
        } else {
            payTuitionWithCreditCard(payment);
        }
    }

    /*@      public exceptional_behavior
      @   	requires !(initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6))
      @           || !(0 <= passedCredits && passedCredits <= totalCredits)
      @           || !(0 <= semesterCredits && semesterCredits <= maxSemesterCredits);
      @   	signals_only IllegalArgumentException;
      @ also
      @      public normal_behavior
      @   	assignable this.*;
      @   	old int latePerCredit = (costPerCredit/100)*6;
      @  	old int penalty = (payment/100)*2;
      @   	old int _payment = payment - penalty;
      @   	requires 0 < payment; 
      @   	requires passedCredits + semesterCredits <= totalCredits;
      @   	requires initialBalance <= maxSemesterCredits * costPerCredit + maxSemesterCredits * ((costPerCredit/100)*6);
      @   	requires 0 <= semesterCredits && semesterCredits <= maxSemesterCredits;
      @   	requires 0 <= passedCredits && passedCredits <= totalCredits;
      @   	requires lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit + maxSemesterCredits * latePerCredit <= Integer.MAX_VALUE;
      @   	requires !lateRegistration ==> initialBalance + maxSemesterCredits * costPerCredit <= Integer.MAX_VALUE;
      @   	requires debit ==> Integer.MIN_VALUE <= initialBalance - payment;
      @   	requires !debit ==> Integer.MIN_VALUE <= initialBalance - _payment;
      @   	{|
      @ 		requires !lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires lateRegistration && option && initialBalance <= 0;
      @ 		ensures this.tuitionBalance == initialBalance + enrollmentCredits * costPerCredit + enrollmentCredits * latePerCredit;
      @ 		ensures this.enrollmentCredits == semesterCredits;
      @ 		ensures this.passedCredits == passedCredits;
      @ 	also
      @ 		requires debit && validPayment(payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - payment;	        
      @ 	also
      @ 		requires !debit && validPayment(_payment) && !option;
      @ 		ensures this.tuitionBalance == initialBalance - _payment;
      @         |} @*/
    public void enrollmentProcess(int passedCredits, int semesterCredits, int payment, int initialBalance, boolean lateRegistration, boolean debit, boolean option) 
     {
        String familyName = getLastName();
        String firstName = getFirstName();
        setTuitionBalance(initialBalance);
        setPassedCredits(passedCredits);
        setEnrollmentCredits(semesterCredits);
	setLateRegistration(lateRegistration);

        if (option) {
		if (registrationPermission()) {
			enroll();
                }
	} else {
		pay(payment, debit);
	}
     }
}",Buggy
"public class TransposeMatrix {
       //@ requires 0 < matrix.length && matrix.length <= Integer.MAX_VALUE;
       //@ requires 0 < matrix[0].length && matrix[0].length <= Integer.MAX_VALUE;
       //@ requires (\forall int k; 0 <= k && k < matrix.length; matrix[k] != null);
       //@ requires (\forall int k; 0 <= k && k < matrix.length; matrix[0].length == matrix[k].length);
       //@ ensures (\forall int i; 0<= i && i < matrix[0].length; (\forall int j; 0 <= j && j < matrix.length ; \result[i][j] == matrix[j][i]));
       //@ ensures matrix.length == \result[0].length;
       //@ ensures matrix[0].length == \result.length; 
       public int[][] transposeMat(int[][] matrix)
       {
          int m, n, p, q;
          m = matrix.length;
          n = matrix[0].length;
          int[][] transpose = new int[n][m];

          //@ assume \forall int i; 0 <= i && i < n; transpose[i] != null && transpose[i].length == m;
          //@ assume \forall int e; 0 <= e && e < n; \forall int k; 0 <= k && k < n; (e != k ==> transpose[e] != transpose[k]);
          //@ assume \forall int e; 0<= e && e < n; (\forall int k; 0 <= k && k < m; transpose[e] != matrix[k]);

          //@ maintaining 0 <= c && c <= n;
          //@ maintaining \forall int i; 0 <= i && i < c; (\forall int j; 0 <= j && j < m ; transpose[i][j] == matrix[j][i]);
          //@ decreases n - c;
          for (int c = 0; c <= n; c++) {//for (int c = 0; c < n; c++) {
              //@ maintaining 0 <= d && d <= m;
              //@ maintaining (\forall int j; 0 <= j && j < d; transpose[c][j] == matrix[j][c]);
              //@ decreases m - d;
              for (int d = 0; d < m; d++) {
                  transpose[c][d] = matrix[d][c];
              }
          }
          return transpose;
       }
}",Buggy
"public class TransposeMatrix {
       //@ requires 0 < matrix.length && matrix.length <= Integer.MAX_VALUE;
       //@ requires 0 < matrix[0].length && matrix[0].length <= Integer.MAX_VALUE;
       //@ requires (\forall int k; 0 <= k && k < matrix.length; matrix[k] != null);
       //@ requires (\forall int k; 0 <= k && k < matrix.length; matrix[0].length == matrix[k].length);
       //@ ensures (\forall int i; 0<= i && i < matrix[0].length; (\forall int j; 0 <= j && j < matrix.length ; \result[i][j] == matrix[j][i]));
       //@ ensures matrix.length == \result[0].length;
       //@ ensures matrix[0].length == \result.length; 
       public int[][] transposeMat(int[][] matrix)
       {
          int m, n, p, q;
          m = matrix.length;
          n = matrix[0].length;
          int[][] transpose = new int[n][m];

          //@ assume \forall int i; 0 <= i && i < n; transpose[i] != null && transpose[i].length == m;
          //@ assume \forall int e; 0 <= e && e < n; \forall int k; 0 <= k && k < n; (e != k ==> transpose[e] != transpose[k]);
          //@ assume \forall int e; 0<= e && e < n; (\forall int k; 0 <= k && k < m; transpose[e] != matrix[k]);

          //@ maintaining 0 <= c && c <= n;
          //@ maintaining \forall int i; 0 <= i && i < c; (\forall int j; 0 <= j && j < m ; transpose[i][j] == matrix[j][i]);
          //@ decreases n - c;
          for (int c = 0; c < n; c--) {//for (int c = 0; c < n; c++) {
              //@ maintaining 0 <= d && d <= m;
              //@ maintaining (\forall int j; 0 <= j && j < d; transpose[c][j] == matrix[j][c]);
              //@ decreases m - d;
              for (int d = 0; d < m; d++) {
                  transpose[c][d] = matrix[d][c];
              }
          }
          return transpose;
       }
}",Buggy
"public class TransposeMatrix {
       //@ requires 0 < matrix.length && matrix.length <= Integer.MAX_VALUE;
       //@ requires 0 < matrix[0].length && matrix[0].length <= Integer.MAX_VALUE;
       //@ requires (\forall int k; 0 <= k && k < matrix.length; matrix[k] != null);
       //@ requires (\forall int k; 0 <= k && k < matrix.length; matrix[0].length == matrix[k].length);
       //@ ensures (\forall int i; 0<= i && i < matrix[0].length; (\forall int j; 0 <= j && j < matrix.length ; \result[i][j] == matrix[j][i]));
       //@ ensures matrix.length == \result[0].length;
       //@ ensures matrix[0].length == \result.length; 
       public int[][] transposeMat(int[][] matrix)
       {
          int m, n, p, q;
          m = matrix.length;
          n = matrix[0].length;
          int[][] transpose = new int[n][m];

          //@ assume \forall int i; 0 <= i && i < n; transpose[i] != null && transpose[i].length == m;
          //@ assume \forall int e; 0 <= e && e < n; \forall int k; 0 <= k && k < n; (e != k ==> transpose[e] != transpose[k]);
          //@ assume \forall int e; 0<= e && e < n; (\forall int k; 0 <= k && k < m; transpose[e] != matrix[k]);

          //@ maintaining 0 <= c && c <= n;
          //@ maintaining \forall int i; 0 <= i && i < c; (\forall int j; 0 <= j && j < m ; transpose[i][j] == matrix[j][i]);
          //@ decreases n - c;
          for (int c = 0; c >= n; c++) {//for (int c = 0; c < n; c++) {
              //@ maintaining 0 <= d && d <= m;
              //@ maintaining (\forall int j; 0 <= j && j < d; transpose[c][j] == matrix[j][c]);
              //@ decreases m - d;
              for (int d = 0; d < m; d++) {
                  transpose[c][d] = matrix[d][c];
              }
          }
          return transpose;
       }
}",Buggy
"public class TransposeMatrix {
       //@ requires 0 < matrix.length && matrix.length <= Integer.MAX_VALUE;
       //@ requires 0 < matrix[0].length && matrix[0].length <= Integer.MAX_VALUE;
       //@ requires (\forall int k; 0 <= k && k < matrix.length; matrix[k] != null);
       //@ requires (\forall int k; 0 <= k && k < matrix.length; matrix[0].length == matrix[k].length);
       //@ ensures (\forall int i; 0<= i && i < matrix[0].length; (\forall int j; 0 <= j && j < matrix.length ; \result[i][j] == matrix[j][i]));
       //@ ensures matrix.length == \result[0].length;
       //@ ensures matrix[0].length == \result.length; 
       public int[][] transposeMat(int[][] matrix)
       {
          int m, n, p, q;
          m = matrix.length;
          n = matrix[0].length;
          int[][] transpose = new int[n][m];

          //@ assume \forall int i; 0 <= i && i < n; transpose[i] != null && transpose[i].length == m;
          //@ assume \forall int e; 0 <= e && e < n; \forall int k; 0 <= k && k < n; (e != k ==> transpose[e] != transpose[k]);
          //@ assume \forall int e; 0<= e && e < n; (\forall int k; 0 <= k && k < m; transpose[e] != matrix[k]);

          //@ maintaining 0 <= c && c <= n;
          //@ maintaining \forall int i; 0 <= i && i < c; (\forall int j; 0 <= j && j < m ; transpose[i][j] == matrix[j][i]);
          //@ decreases n - c;
          for (int c = 0; c < n; c++) {
              //@ maintaining 0 <= d && d <= m;
              //@ maintaining (\forall int j; 0 <= j && j < d; transpose[c][j] == matrix[j][c]);
              //@ decreases m - d;
              for (int d = 0; d <= m; d++) {//for (int d = 0; d < m; d++) {
                  transpose[c][d] = matrix[d][c];
              }
          }
          return transpose;
       }
}",Buggy
"public class TransposeMatrix {
       //@ requires 0 < matrix.length && matrix.length <= Integer.MAX_VALUE;
       //@ requires 0 < matrix[0].length && matrix[0].length <= Integer.MAX_VALUE;
       //@ requires (\forall int k; 0 <= k && k < matrix.length; matrix[k] != null);
       //@ requires (\forall int k; 0 <= k && k < matrix.length; matrix[0].length == matrix[k].length);
       //@ ensures (\forall int i; 0<= i && i < matrix[0].length; (\forall int j; 0 <= j && j < matrix.length ; \result[i][j] == matrix[j][i]));
       //@ ensures matrix.length == \result[0].length;
       //@ ensures matrix[0].length == \result.length; 
       public int[][] transposeMat(int[][] matrix)
       {
          int m, n, p, q;
          m = matrix.length;
          n = matrix[0].length;
          int[][] transpose = new int[n][m];

          //@ assume \forall int i; 0 <= i && i < n; transpose[i] != null && transpose[i].length == m;
          //@ assume \forall int e; 0 <= e && e < n; \forall int k; 0 <= k && k < n; (e != k ==> transpose[e] != transpose[k]);
          //@ assume \forall int e; 0<= e && e < n; (\forall int k; 0 <= k && k < m; transpose[e] != matrix[k]);

          //@ maintaining 0 <= c && c <= n;
          //@ maintaining \forall int i; 0 <= i && i < c; (\forall int j; 0 <= j && j < m ; transpose[i][j] == matrix[j][i]);
          //@ decreases n - c;
          for (int c = 0; c < n; c++) {
              //@ maintaining 0 <= d && d <= m;
              //@ maintaining (\forall int j; 0 <= j && j < d; transpose[c][j] == matrix[j][c]);
              //@ decreases m - d;
              for (int d = 0; d < m; d--) {//for (int d = 0; d < m; d++) {
                  transpose[c][d] = matrix[d][c];
              }
          }
          return transpose;
       }
}",Buggy
"public class TransposeMatrix {
       //@ requires 0 < matrix.length && matrix.length <= Integer.MAX_VALUE;
       //@ requires 0 < matrix[0].length && matrix[0].length <= Integer.MAX_VALUE;
       //@ requires (\forall int k; 0 <= k && k < matrix.length; matrix[k] != null);
       //@ requires (\forall int k; 0 <= k && k < matrix.length; matrix[0].length == matrix[k].length);
       //@ ensures (\forall int i; 0<= i && i < matrix[0].length; (\forall int j; 0 <= j && j < matrix.length ; \result[i][j] == matrix[j][i]));
       //@ ensures matrix.length == \result[0].length;
       //@ ensures matrix[0].length == \result.length; 
       public int[][] transposeMat(int[][] matrix)
       {
          int m, n, p, q;
          m = matrix.length;
          n = matrix[0].length;
          int[][] transpose = new int[n][m];

          //@ assume \forall int i; 0 <= i && i < n; transpose[i] != null && transpose[i].length == m;
          //@ assume \forall int e; 0 <= e && e < n; \forall int k; 0 <= k && k < n; (e != k ==> transpose[e] != transpose[k]);
          //@ assume \forall int e; 0<= e && e < n; (\forall int k; 0 <= k && k < m; transpose[e] != matrix[k]);

          //@ maintaining 0 <= c && c <= n;
          //@ maintaining \forall int i; 0 <= i && i < c; (\forall int j; 0 <= j && j < m ; transpose[i][j] == matrix[j][i]);
          //@ decreases n - c;
          for (int c = 0; c < n; c++) {
              //@ maintaining 0 <= d && d <= m;
              //@ maintaining (\forall int j; 0 <= j && j < d; transpose[c][j] == matrix[j][c]);
              //@ decreases m - d;
              for (int d = 0; d >= m; d++) {//for (int d = 0; d < m; d++) {
                  transpose[c][d] = matrix[d][c];
              }
          }
          return transpose;
       }
}",Buggy
"public class TransposeMatrix {
       //@ requires 0 < matrix.length && matrix.length <= Integer.MAX_VALUE;
       //@ requires 0 < matrix[0].length && matrix[0].length <= Integer.MAX_VALUE;
       //@ requires (\forall int k; 0 <= k && k < matrix.length; matrix[k] != null);
       //@ requires (\forall int k; 0 <= k && k < matrix.length; matrix[0].length == matrix[k].length);
       //@ ensures (\forall int i; 0<= i && i < matrix[0].length; (\forall int j; 0 <= j && j < matrix.length ; \result[i][j] == matrix[j][i]));
       //@ ensures matrix.length == \result[0].length;
       //@ ensures matrix[0].length == \result.length; 
       public int[][] transposeMat(int[][] matrix)
       {
          int m, n, p, q;
          m = matrix.length;
          n = matrix[0].length;
          int[][] transpose = new int[n][m];

          //@ assume \forall int i; 0 <= i && i < n; transpose[i] != null && transpose[i].length == m;
          //@ assume \forall int e; 0 <= e && e < n; \forall int k; 0 <= k && k < n; (e != k ==> transpose[e] != transpose[k]);
          //@ assume \forall int e; 0<= e && e < n; (\forall int k; 0 <= k && k < m; transpose[e] != matrix[k]);

          //@ maintaining 0 <= c && c <= n;
          //@ maintaining \forall int i; 0 <= i && i < c; (\forall int j; 0 <= j && j < m ; transpose[i][j] == matrix[j][i]);
          //@ decreases n - c;
          for (int c = 0; c < n; c++) {
              //@ maintaining 0 <= d && d <= m;
              //@ maintaining (\forall int j; 0 <= j && j < d; transpose[c][j] == matrix[j][c]);
              //@ decreases m - d;
              for (int d = 0; d < m; d++) {
                  transpose[c][d] = matrix[d][c];
              }
          }
          return null;//transpose;
       }
}",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
"public class MissingBracket { public static void main(String[] args) { System.out.println(""Hello"" }",Buggy
public class UndefinedVar { public static void main(String[] args) { System.out.println(value); } },Buggy
public class DivideByZero { public static void main(String[] args) { int x = 10 / 0; System.out.println(x); } },Buggy
"public class MissingReturn { public static int add(int a, int b) { int sum = a + b; } }",Buggy
public class InvalidLoop { public static void main(String[] args) { for(int i = 0; i < 10; i--){ System.out.println(i); } } },Buggy
"public class NoMainMethod { public void notMain() { System.out.println(""No main method here!""); } }",Buggy
"public class IncorrectCasting { public static void main(String[] args) { int num = (int) ""String""; } }",Buggy
import java.util.ArrayList; public class NoImport { public static void main(String[] args) { ArrayList<Integer> list = new ArrayList<>(); list.add(5); System.out.println(list); } },Buggy
public class NullPointer { public static void main(String[] args) { String str = null; System.out.println(str.length()); } },Buggy
"public class IncorrectArgs { public static void main(String args) { System.out.println(""Wrong main method signature""); } }",Buggy
