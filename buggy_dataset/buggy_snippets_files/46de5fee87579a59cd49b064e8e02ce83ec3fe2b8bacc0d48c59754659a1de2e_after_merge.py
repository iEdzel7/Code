def generate_config_py(target):
    """Generate config.py file containing system_info information
    used during building the package.

    Usage:
        config['py_modules'].append((packagename, '__config__',generate_config_py))
    """
    from numpy.distutils.system_info import system_info
    from distutils.dir_util import mkpath
    mkpath(os.path.dirname(target))
    f = open(target, 'w')
    f.write('# This file is generated by numpy\'s %s\n' % (os.path.basename(sys.argv[0])))
    f.write('# It contains system_info results at the time of building this package.\n')
    f.write('__all__ = ["get_info","show"]\n\n')

    # For gfortran+msvc combination, extra shared libraries may exist
    f.write("""

import os
import sys

extra_dll_dir = os.path.join(os.path.dirname(__file__), '.libs')

if os.path.isdir(extra_dll_dir) and sys.platform == 'win32':
    try:
        from ctypes import windll, c_wchar_p
        _AddDllDirectory = windll.kernel32.AddDllDirectory
        _AddDllDirectory.argtypes = [c_wchar_p]
        # Needed to initialize AddDllDirectory modifications
        windll.kernel32.SetDefaultDllDirectories(0x1000)
    except AttributeError:
        def _AddDllDirectory(dll_directory):
            os.environ.setdefault('PATH', '')
            os.environ['PATH'] += os.pathsep + dll_directory

    _AddDllDirectory(extra_dll_dir)

""")

    for k, i in system_info.saved_results.items():
        f.write('%s=%r\n' % (k, i))
    f.write(r'''
def get_info(name):
    g = globals()
    return g.get(name, g.get(name + "_info", {}))

def show():
    for name,info_dict in globals().items():
        if name[0] == "_" or type(info_dict) is not type({}): continue
        print(name + ":")
        if not info_dict:
            print("  NOT AVAILABLE")
        for k,v in info_dict.items():
            v = str(v)
            if k == "sources" and len(v) > 200:
                v = v[:60] + " ...\n... " + v[-60:]
            print("    %s = %s" % (k,v))
    ''')

    f.close()
    return target